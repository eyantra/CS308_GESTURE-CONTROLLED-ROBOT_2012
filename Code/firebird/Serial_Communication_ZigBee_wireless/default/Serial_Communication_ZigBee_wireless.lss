
Serial_Communication_ZigBee_wireless.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800200  00003e68  00003efc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800310  00800310  0000400c  2**0
                  ALLOC
  3 .debug_aranges 000001e0  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000694  00000000  00000000  000041ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000033e1  00000000  00000000  00004880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016f0  00000000  00000000  00007c61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000291a  00000000  00000000  00009351  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004a0  00000000  00000000  0000bc6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007f6  00000000  00000000  0000c10c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a1a  00000000  00000000  0000c902  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000d31c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__vector_5>
      18:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 17 13 	jmp	0x262e	; 0x262e <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e6       	ldi	r30, 0x68	; 104
      fc:	fe e3       	ldi	r31, 0x3E	; 62
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 31       	cpi	r26, 0x10	; 16
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a0 e1       	ldi	r26, 0x10	; 16
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ac 34       	cpi	r26, 0x4C	; 76
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 43 15 	call	0x2a86	; 0x2a86 <main>
     122:	0c 94 32 1f 	jmp	0x3e64	; 0x3e64 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	df 93       	push	r29
     130:	cf 93       	push	r28
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	fe 01       	movw	r30, r28
     146:	e3 59       	subi	r30, 0x93	; 147
     148:	ff 4f       	sbci	r31, 0xFF	; 255
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	a0 e8       	ldi	r26, 0x80	; 128
     150:	bf e3       	ldi	r27, 0x3F	; 63
     152:	80 83       	st	Z, r24
     154:	91 83       	std	Z+1, r25	; 0x01
     156:	a2 83       	std	Z+2, r26	; 0x02
     158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     15a:	8e 01       	movw	r16, r28
     15c:	07 59       	subi	r16, 0x97	; 151
     15e:	1f 4f       	sbci	r17, 0xFF	; 255
     160:	fe 01       	movw	r30, r28
     162:	e3 59       	subi	r30, 0x93	; 147
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	60 81       	ld	r22, Z
     168:	71 81       	ldd	r23, Z+1	; 0x01
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	26 e6       	ldi	r18, 0x66	; 102
     170:	36 e6       	ldi	r19, 0x66	; 102
     172:	46 e6       	ldi	r20, 0x66	; 102
     174:	55 e4       	ldi	r21, 0x45	; 69
     176:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     17a:	dc 01       	movw	r26, r24
     17c:	cb 01       	movw	r24, r22
     17e:	f8 01       	movw	r30, r16
     180:	80 83       	st	Z, r24
     182:	91 83       	std	Z+1, r25	; 0x01
     184:	a2 83       	std	Z+2, r26	; 0x02
     186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     188:	fe 01       	movw	r30, r28
     18a:	e7 59       	subi	r30, 0x97	; 151
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	60 81       	ld	r22, Z
     190:	71 81       	ldd	r23, Z+1	; 0x01
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	93 81       	ldd	r25, Z+3	; 0x03
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e8       	ldi	r20, 0x80	; 128
     19c:	5f e3       	ldi	r21, 0x3F	; 63
     19e:	0e 94 97 1b 	call	0x372e	; 0x372e <__ltsf2>
     1a2:	88 23       	and	r24, r24
     1a4:	44 f4       	brge	.+16     	; 0x1b6 <lcd_set_4bit+0x8c>
		__ticks = 1;
     1a6:	fe 01       	movw	r30, r28
     1a8:	e9 59       	subi	r30, 0x99	; 153
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	91 83       	std	Z+1, r25	; 0x01
     1b2:	80 83       	st	Z, r24
     1b4:	64 c0       	rjmp	.+200    	; 0x27e <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     1b6:	fe 01       	movw	r30, r28
     1b8:	e7 59       	subi	r30, 0x97	; 151
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	60 81       	ld	r22, Z
     1be:	71 81       	ldd	r23, Z+1	; 0x01
     1c0:	82 81       	ldd	r24, Z+2	; 0x02
     1c2:	93 81       	ldd	r25, Z+3	; 0x03
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	3f ef       	ldi	r19, 0xFF	; 255
     1c8:	4f e7       	ldi	r20, 0x7F	; 127
     1ca:	57 e4       	ldi	r21, 0x47	; 71
     1cc:	0e 94 37 1b 	call	0x366e	; 0x366e <__gtsf2>
     1d0:	18 16       	cp	r1, r24
     1d2:	0c f0       	brlt	.+2      	; 0x1d6 <lcd_set_4bit+0xac>
     1d4:	43 c0       	rjmp	.+134    	; 0x25c <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1d6:	fe 01       	movw	r30, r28
     1d8:	e3 59       	subi	r30, 0x93	; 147
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	60 81       	ld	r22, Z
     1de:	71 81       	ldd	r23, Z+1	; 0x01
     1e0:	82 81       	ldd	r24, Z+2	; 0x02
     1e2:	93 81       	ldd	r25, Z+3	; 0x03
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 e2       	ldi	r20, 0x20	; 32
     1ea:	51 e4       	ldi	r21, 0x41	; 65
     1ec:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     1f0:	dc 01       	movw	r26, r24
     1f2:	cb 01       	movw	r24, r22
     1f4:	8e 01       	movw	r16, r28
     1f6:	09 59       	subi	r16, 0x99	; 153
     1f8:	1f 4f       	sbci	r17, 0xFF	; 255
     1fa:	bc 01       	movw	r22, r24
     1fc:	cd 01       	movw	r24, r26
     1fe:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	f8 01       	movw	r30, r16
     208:	91 83       	std	Z+1, r25	; 0x01
     20a:	80 83       	st	Z, r24
     20c:	1f c0       	rjmp	.+62     	; 0x24c <lcd_set_4bit+0x122>
     20e:	fe 01       	movw	r30, r28
     210:	eb 59       	subi	r30, 0x9B	; 155
     212:	ff 4f       	sbci	r31, 0xFF	; 255
     214:	80 e7       	ldi	r24, 0x70	; 112
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	91 83       	std	Z+1, r25	; 0x01
     21a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     21c:	fe 01       	movw	r30, r28
     21e:	eb 59       	subi	r30, 0x9B	; 155
     220:	ff 4f       	sbci	r31, 0xFF	; 255
     222:	80 81       	ld	r24, Z
     224:	91 81       	ldd	r25, Z+1	; 0x01
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0xfc>
     22a:	fe 01       	movw	r30, r28
     22c:	eb 59       	subi	r30, 0x9B	; 155
     22e:	ff 4f       	sbci	r31, 0xFF	; 255
     230:	91 83       	std	Z+1, r25	; 0x01
     232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     234:	de 01       	movw	r26, r28
     236:	a9 59       	subi	r26, 0x99	; 153
     238:	bf 4f       	sbci	r27, 0xFF	; 255
     23a:	fe 01       	movw	r30, r28
     23c:	e9 59       	subi	r30, 0x99	; 153
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	80 81       	ld	r24, Z
     242:	91 81       	ldd	r25, Z+1	; 0x01
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	11 96       	adiw	r26, 0x01	; 1
     248:	9c 93       	st	X, r25
     24a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24c:	fe 01       	movw	r30, r28
     24e:	e9 59       	subi	r30, 0x99	; 153
     250:	ff 4f       	sbci	r31, 0xFF	; 255
     252:	80 81       	ld	r24, Z
     254:	91 81       	ldd	r25, Z+1	; 0x01
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	d1 f6       	brne	.-76     	; 0x20e <lcd_set_4bit+0xe4>
     25a:	27 c0       	rjmp	.+78     	; 0x2aa <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     25c:	8e 01       	movw	r16, r28
     25e:	09 59       	subi	r16, 0x99	; 153
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	fe 01       	movw	r30, r28
     264:	e7 59       	subi	r30, 0x97	; 151
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	60 81       	ld	r22, Z
     26a:	71 81       	ldd	r23, Z+1	; 0x01
     26c:	82 81       	ldd	r24, Z+2	; 0x02
     26e:	93 81       	ldd	r25, Z+3	; 0x03
     270:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	f8 01       	movw	r30, r16
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
     27e:	de 01       	movw	r26, r28
     280:	ad 59       	subi	r26, 0x9D	; 157
     282:	bf 4f       	sbci	r27, 0xFF	; 255
     284:	fe 01       	movw	r30, r28
     286:	e9 59       	subi	r30, 0x99	; 153
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	80 81       	ld	r24, Z
     28c:	91 81       	ldd	r25, Z+1	; 0x01
     28e:	8d 93       	st	X+, r24
     290:	9c 93       	st	X, r25
     292:	fe 01       	movw	r30, r28
     294:	ed 59       	subi	r30, 0x9D	; 157
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	80 81       	ld	r24, Z
     29a:	91 81       	ldd	r25, Z+1	; 0x01
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x172>
     2a0:	fe 01       	movw	r30, r28
     2a2:	ed 59       	subi	r30, 0x9D	; 157
     2a4:	ff 4f       	sbci	r31, 0xFF	; 255
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2aa:	a8 e2       	ldi	r26, 0x28	; 40
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e8 e2       	ldi	r30, 0x28	; 40
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8e 7f       	andi	r24, 0xFE	; 254
     2b6:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2b8:	a8 e2       	ldi	r26, 0x28	; 40
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e8 e2       	ldi	r30, 0x28	; 40
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8d 7f       	andi	r24, 0xFD	; 253
     2c4:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     2c6:	e8 e2       	ldi	r30, 0x28	; 40
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 e3       	ldi	r24, 0x30	; 48
     2cc:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     2ce:	a8 e2       	ldi	r26, 0x28	; 40
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e8 e2       	ldi	r30, 0x28	; 40
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	8c 93       	st	X, r24
     2dc:	fe 01       	movw	r30, r28
     2de:	e1 5a       	subi	r30, 0xA1	; 161
     2e0:	ff 4f       	sbci	r31, 0xFF	; 255
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	a0 ea       	ldi	r26, 0xA0	; 160
     2e8:	b0 e4       	ldi	r27, 0x40	; 64
     2ea:	80 83       	st	Z, r24
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	a2 83       	std	Z+2, r26	; 0x02
     2f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2f2:	8e 01       	movw	r16, r28
     2f4:	05 5a       	subi	r16, 0xA5	; 165
     2f6:	1f 4f       	sbci	r17, 0xFF	; 255
     2f8:	fe 01       	movw	r30, r28
     2fa:	e1 5a       	subi	r30, 0xA1	; 161
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	60 81       	ld	r22, Z
     300:	71 81       	ldd	r23, Z+1	; 0x01
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	26 e6       	ldi	r18, 0x66	; 102
     308:	36 e6       	ldi	r19, 0x66	; 102
     30a:	46 e6       	ldi	r20, 0x66	; 102
     30c:	55 e4       	ldi	r21, 0x45	; 69
     30e:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	f8 01       	movw	r30, r16
     318:	80 83       	st	Z, r24
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	a2 83       	std	Z+2, r26	; 0x02
     31e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     320:	fe 01       	movw	r30, r28
     322:	e5 5a       	subi	r30, 0xA5	; 165
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	60 81       	ld	r22, Z
     328:	71 81       	ldd	r23, Z+1	; 0x01
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	0e 94 97 1b 	call	0x372e	; 0x372e <__ltsf2>
     33a:	88 23       	and	r24, r24
     33c:	44 f4       	brge	.+16     	; 0x34e <lcd_set_4bit+0x224>
		__ticks = 1;
     33e:	fe 01       	movw	r30, r28
     340:	e7 5a       	subi	r30, 0xA7	; 167
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
     34c:	64 c0       	rjmp	.+200    	; 0x416 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     34e:	fe 01       	movw	r30, r28
     350:	e5 5a       	subi	r30, 0xA5	; 165
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	60 81       	ld	r22, Z
     356:	71 81       	ldd	r23, Z+1	; 0x01
     358:	82 81       	ldd	r24, Z+2	; 0x02
     35a:	93 81       	ldd	r25, Z+3	; 0x03
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	3f ef       	ldi	r19, 0xFF	; 255
     360:	4f e7       	ldi	r20, 0x7F	; 127
     362:	57 e4       	ldi	r21, 0x47	; 71
     364:	0e 94 37 1b 	call	0x366e	; 0x366e <__gtsf2>
     368:	18 16       	cp	r1, r24
     36a:	0c f0       	brlt	.+2      	; 0x36e <lcd_set_4bit+0x244>
     36c:	43 c0       	rjmp	.+134    	; 0x3f4 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     36e:	fe 01       	movw	r30, r28
     370:	e1 5a       	subi	r30, 0xA1	; 161
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	60 81       	ld	r22, Z
     376:	71 81       	ldd	r23, Z+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	93 81       	ldd	r25, Z+3	; 0x03
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e2       	ldi	r20, 0x20	; 32
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	8e 01       	movw	r16, r28
     38e:	07 5a       	subi	r16, 0xA7	; 167
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	f8 01       	movw	r30, r16
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
     3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <lcd_set_4bit+0x2ba>
     3a6:	fe 01       	movw	r30, r28
     3a8:	e9 5a       	subi	r30, 0xA9	; 169
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	80 e7       	ldi	r24, 0x70	; 112
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
     3b4:	fe 01       	movw	r30, r28
     3b6:	e9 5a       	subi	r30, 0xA9	; 169
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_set_4bit+0x294>
     3c2:	fe 01       	movw	r30, r28
     3c4:	e9 5a       	subi	r30, 0xA9	; 169
     3c6:	ff 4f       	sbci	r31, 0xFF	; 255
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3cc:	de 01       	movw	r26, r28
     3ce:	a7 5a       	subi	r26, 0xA7	; 167
     3d0:	bf 4f       	sbci	r27, 0xFF	; 255
     3d2:	fe 01       	movw	r30, r28
     3d4:	e7 5a       	subi	r30, 0xA7	; 167
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	80 81       	ld	r24, Z
     3da:	91 81       	ldd	r25, Z+1	; 0x01
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	9c 93       	st	X, r25
     3e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e4:	fe 01       	movw	r30, r28
     3e6:	e7 5a       	subi	r30, 0xA7	; 167
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	d1 f6       	brne	.-76     	; 0x3a6 <lcd_set_4bit+0x27c>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f4:	8e 01       	movw	r16, r28
     3f6:	07 5a       	subi	r16, 0xA7	; 167
     3f8:	1f 4f       	sbci	r17, 0xFF	; 255
     3fa:	fe 01       	movw	r30, r28
     3fc:	e5 5a       	subi	r30, 0xA5	; 165
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	60 81       	ld	r22, Z
     402:	71 81       	ldd	r23, Z+1	; 0x01
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	93 81       	ldd	r25, Z+3	; 0x03
     408:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	f8 01       	movw	r30, r16
     412:	91 83       	std	Z+1, r25	; 0x01
     414:	80 83       	st	Z, r24
     416:	de 01       	movw	r26, r28
     418:	ab 5a       	subi	r26, 0xAB	; 171
     41a:	bf 4f       	sbci	r27, 0xFF	; 255
     41c:	fe 01       	movw	r30, r28
     41e:	e7 5a       	subi	r30, 0xA7	; 167
     420:	ff 4f       	sbci	r31, 0xFF	; 255
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	8d 93       	st	X+, r24
     428:	9c 93       	st	X, r25
     42a:	fe 01       	movw	r30, r28
     42c:	eb 5a       	subi	r30, 0xAB	; 171
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	80 81       	ld	r24, Z
     432:	91 81       	ldd	r25, Z+1	; 0x01
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <lcd_set_4bit+0x30a>
     438:	fe 01       	movw	r30, r28
     43a:	eb 5a       	subi	r30, 0xAB	; 171
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     442:	a8 e2       	ldi	r26, 0x28	; 40
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e8 e2       	ldi	r30, 0x28	; 40
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8b 7f       	andi	r24, 0xFB	; 251
     44e:	8c 93       	st	X, r24
     450:	fe 01       	movw	r30, r28
     452:	ef 5a       	subi	r30, 0xAF	; 175
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	a0 e8       	ldi	r26, 0x80	; 128
     45c:	bf e3       	ldi	r27, 0x3F	; 63
     45e:	80 83       	st	Z, r24
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	a2 83       	std	Z+2, r26	; 0x02
     464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     466:	8e 01       	movw	r16, r28
     468:	03 5b       	subi	r16, 0xB3	; 179
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	fe 01       	movw	r30, r28
     46e:	ef 5a       	subi	r30, 0xAF	; 175
     470:	ff 4f       	sbci	r31, 0xFF	; 255
     472:	60 81       	ld	r22, Z
     474:	71 81       	ldd	r23, Z+1	; 0x01
     476:	82 81       	ldd	r24, Z+2	; 0x02
     478:	93 81       	ldd	r25, Z+3	; 0x03
     47a:	26 e6       	ldi	r18, 0x66	; 102
     47c:	36 e6       	ldi	r19, 0x66	; 102
     47e:	46 e6       	ldi	r20, 0x66	; 102
     480:	55 e4       	ldi	r21, 0x45	; 69
     482:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	f8 01       	movw	r30, r16
     48c:	80 83       	st	Z, r24
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	a2 83       	std	Z+2, r26	; 0x02
     492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     494:	fe 01       	movw	r30, r28
     496:	e3 5b       	subi	r30, 0xB3	; 179
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	60 81       	ld	r22, Z
     49c:	71 81       	ldd	r23, Z+1	; 0x01
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	93 81       	ldd	r25, Z+3	; 0x03
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e8       	ldi	r20, 0x80	; 128
     4a8:	5f e3       	ldi	r21, 0x3F	; 63
     4aa:	0e 94 97 1b 	call	0x372e	; 0x372e <__ltsf2>
     4ae:	88 23       	and	r24, r24
     4b0:	44 f4       	brge	.+16     	; 0x4c2 <lcd_set_4bit+0x398>
		__ticks = 1;
     4b2:	fe 01       	movw	r30, r28
     4b4:	e5 5b       	subi	r30, 0xB5	; 181
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	64 c0       	rjmp	.+200    	; 0x58a <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     4c2:	fe 01       	movw	r30, r28
     4c4:	e3 5b       	subi	r30, 0xB3	; 179
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	60 81       	ld	r22, Z
     4ca:	71 81       	ldd	r23, Z+1	; 0x01
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	3f ef       	ldi	r19, 0xFF	; 255
     4d4:	4f e7       	ldi	r20, 0x7F	; 127
     4d6:	57 e4       	ldi	r21, 0x47	; 71
     4d8:	0e 94 37 1b 	call	0x366e	; 0x366e <__gtsf2>
     4dc:	18 16       	cp	r1, r24
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <lcd_set_4bit+0x3b8>
     4e0:	43 c0       	rjmp	.+134    	; 0x568 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4e2:	fe 01       	movw	r30, r28
     4e4:	ef 5a       	subi	r30, 0xAF	; 175
     4e6:	ff 4f       	sbci	r31, 0xFF	; 255
     4e8:	60 81       	ld	r22, Z
     4ea:	71 81       	ldd	r23, Z+1	; 0x01
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 e2       	ldi	r20, 0x20	; 32
     4f6:	51 e4       	ldi	r21, 0x41	; 65
     4f8:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	8e 01       	movw	r16, r28
     502:	05 5b       	subi	r16, 0xB5	; 181
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	f8 01       	movw	r30, r16
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
     518:	1f c0       	rjmp	.+62     	; 0x558 <lcd_set_4bit+0x42e>
     51a:	fe 01       	movw	r30, r28
     51c:	e7 5b       	subi	r30, 0xB7	; 183
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	80 e7       	ldi	r24, 0x70	; 112
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	91 83       	std	Z+1, r25	; 0x01
     526:	80 83       	st	Z, r24
     528:	fe 01       	movw	r30, r28
     52a:	e7 5b       	subi	r30, 0xB7	; 183
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <lcd_set_4bit+0x408>
     536:	fe 01       	movw	r30, r28
     538:	e7 5b       	subi	r30, 0xB7	; 183
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     540:	de 01       	movw	r26, r28
     542:	a5 5b       	subi	r26, 0xB5	; 181
     544:	bf 4f       	sbci	r27, 0xFF	; 255
     546:	fe 01       	movw	r30, r28
     548:	e5 5b       	subi	r30, 0xB5	; 181
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	11 96       	adiw	r26, 0x01	; 1
     554:	9c 93       	st	X, r25
     556:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     558:	fe 01       	movw	r30, r28
     55a:	e5 5b       	subi	r30, 0xB5	; 181
     55c:	ff 4f       	sbci	r31, 0xFF	; 255
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	d1 f6       	brne	.-76     	; 0x51a <lcd_set_4bit+0x3f0>
     566:	27 c0       	rjmp	.+78     	; 0x5b6 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     568:	8e 01       	movw	r16, r28
     56a:	05 5b       	subi	r16, 0xB5	; 181
     56c:	1f 4f       	sbci	r17, 0xFF	; 255
     56e:	fe 01       	movw	r30, r28
     570:	e3 5b       	subi	r30, 0xB3	; 179
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	60 81       	ld	r22, Z
     576:	71 81       	ldd	r23, Z+1	; 0x01
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	f8 01       	movw	r30, r16
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
     58a:	de 01       	movw	r26, r28
     58c:	a9 5b       	subi	r26, 0xB9	; 185
     58e:	bf 4f       	sbci	r27, 0xFF	; 255
     590:	fe 01       	movw	r30, r28
     592:	e5 5b       	subi	r30, 0xB5	; 181
     594:	ff 4f       	sbci	r31, 0xFF	; 255
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	8d 93       	st	X+, r24
     59c:	9c 93       	st	X, r25
     59e:	fe 01       	movw	r30, r28
     5a0:	e9 5b       	subi	r30, 0xB9	; 185
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_set_4bit+0x47e>
     5ac:	fe 01       	movw	r30, r28
     5ae:	e9 5b       	subi	r30, 0xB9	; 185
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	91 83       	std	Z+1, r25	; 0x01
     5b4:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     5b6:	a8 e2       	ldi	r26, 0x28	; 40
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
     5ba:	e8 e2       	ldi	r30, 0x28	; 40
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	8e 7f       	andi	r24, 0xFE	; 254
     5c2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     5c4:	a8 e2       	ldi	r26, 0x28	; 40
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	e8 e2       	ldi	r30, 0x28	; 40
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	8d 7f       	andi	r24, 0xFD	; 253
     5d0:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     5d2:	e8 e2       	ldi	r30, 0x28	; 40
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 e3       	ldi	r24, 0x30	; 48
     5d8:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     5da:	a8 e2       	ldi	r26, 0x28	; 40
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e8 e2       	ldi	r30, 0x28	; 40
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	84 60       	ori	r24, 0x04	; 4
     5e6:	8c 93       	st	X, r24
     5e8:	fe 01       	movw	r30, r28
     5ea:	ed 5b       	subi	r30, 0xBD	; 189
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	a0 ea       	ldi	r26, 0xA0	; 160
     5f4:	b0 e4       	ldi	r27, 0x40	; 64
     5f6:	80 83       	st	Z, r24
     5f8:	91 83       	std	Z+1, r25	; 0x01
     5fa:	a2 83       	std	Z+2, r26	; 0x02
     5fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5fe:	8e 01       	movw	r16, r28
     600:	01 5c       	subi	r16, 0xC1	; 193
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	fe 01       	movw	r30, r28
     606:	ed 5b       	subi	r30, 0xBD	; 189
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	60 81       	ld	r22, Z
     60c:	71 81       	ldd	r23, Z+1	; 0x01
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	26 e6       	ldi	r18, 0x66	; 102
     614:	36 e6       	ldi	r19, 0x66	; 102
     616:	46 e6       	ldi	r20, 0x66	; 102
     618:	55 e4       	ldi	r21, 0x45	; 69
     61a:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	f8 01       	movw	r30, r16
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	fe 01       	movw	r30, r28
     62e:	ff 96       	adiw	r30, 0x3f	; 63
     630:	60 81       	ld	r22, Z
     632:	71 81       	ldd	r23, Z+1	; 0x01
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	93 81       	ldd	r25, Z+3	; 0x03
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	0e 94 97 1b 	call	0x372e	; 0x372e <__ltsf2>
     644:	88 23       	and	r24, r24
     646:	2c f4       	brge	.+10     	; 0x652 <lcd_set_4bit+0x528>
		__ticks = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	9e af       	std	Y+62, r25	; 0x3e
     64e:	8d af       	std	Y+61, r24	; 0x3d
     650:	46 c0       	rjmp	.+140    	; 0x6de <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     652:	fe 01       	movw	r30, r28
     654:	ff 96       	adiw	r30, 0x3f	; 63
     656:	60 81       	ld	r22, Z
     658:	71 81       	ldd	r23, Z+1	; 0x01
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	93 81       	ldd	r25, Z+3	; 0x03
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	3f ef       	ldi	r19, 0xFF	; 255
     662:	4f e7       	ldi	r20, 0x7F	; 127
     664:	57 e4       	ldi	r21, 0x47	; 71
     666:	0e 94 37 1b 	call	0x366e	; 0x366e <__gtsf2>
     66a:	18 16       	cp	r1, r24
     66c:	64 f5       	brge	.+88     	; 0x6c6 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66e:	fe 01       	movw	r30, r28
     670:	ed 5b       	subi	r30, 0xBD	; 189
     672:	ff 4f       	sbci	r31, 0xFF	; 255
     674:	60 81       	ld	r22, Z
     676:	71 81       	ldd	r23, Z+1	; 0x01
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	93 81       	ldd	r25, Z+3	; 0x03
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e2       	ldi	r20, 0x20	; 32
     682:	51 e4       	ldi	r21, 0x41	; 65
     684:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	9e af       	std	Y+62, r25	; 0x3e
     69a:	8d af       	std	Y+61, r24	; 0x3d
     69c:	0f c0       	rjmp	.+30     	; 0x6bc <lcd_set_4bit+0x592>
     69e:	80 e7       	ldi	r24, 0x70	; 112
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9c af       	std	Y+60, r25	; 0x3c
     6a4:	8b af       	std	Y+59, r24	; 0x3b
     6a6:	8b ad       	ldd	r24, Y+59	; 0x3b
     6a8:	9c ad       	ldd	r25, Y+60	; 0x3c
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <lcd_set_4bit+0x580>
     6ae:	9c af       	std	Y+60, r25	; 0x3c
     6b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b2:	8d ad       	ldd	r24, Y+61	; 0x3d
     6b4:	9e ad       	ldd	r25, Y+62	; 0x3e
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	9e af       	std	Y+62, r25	; 0x3e
     6ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6bc:	8d ad       	ldd	r24, Y+61	; 0x3d
     6be:	9e ad       	ldd	r25, Y+62	; 0x3e
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	69 f7       	brne	.-38     	; 0x69e <lcd_set_4bit+0x574>
     6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6c6:	fe 01       	movw	r30, r28
     6c8:	ff 96       	adiw	r30, 0x3f	; 63
     6ca:	60 81       	ld	r22, Z
     6cc:	71 81       	ldd	r23, Z+1	; 0x01
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9e af       	std	Y+62, r25	; 0x3e
     6dc:	8d af       	std	Y+61, r24	; 0x3d
     6de:	8d ad       	ldd	r24, Y+61	; 0x3d
     6e0:	9e ad       	ldd	r25, Y+62	; 0x3e
     6e2:	9a af       	std	Y+58, r25	; 0x3a
     6e4:	89 af       	std	Y+57, r24	; 0x39
     6e6:	89 ad       	ldd	r24, Y+57	; 0x39
     6e8:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <lcd_set_4bit+0x5c0>
     6ee:	9a af       	std	Y+58, r25	; 0x3a
     6f0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     6f2:	a8 e2       	ldi	r26, 0x28	; 40
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	e8 e2       	ldi	r30, 0x28	; 40
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	8b 7f       	andi	r24, 0xFB	; 251
     6fe:	8c 93       	st	X, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e8       	ldi	r26, 0x80	; 128
     706:	bf e3       	ldi	r27, 0x3F	; 63
     708:	8d ab       	std	Y+53, r24	; 0x35
     70a:	9e ab       	std	Y+54, r25	; 0x36
     70c:	af ab       	std	Y+55, r26	; 0x37
     70e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     710:	6d a9       	ldd	r22, Y+53	; 0x35
     712:	7e a9       	ldd	r23, Y+54	; 0x36
     714:	8f a9       	ldd	r24, Y+55	; 0x37
     716:	98 ad       	ldd	r25, Y+56	; 0x38
     718:	26 e6       	ldi	r18, 0x66	; 102
     71a:	36 e6       	ldi	r19, 0x66	; 102
     71c:	46 e6       	ldi	r20, 0x66	; 102
     71e:	55 e4       	ldi	r21, 0x45	; 69
     720:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	89 ab       	std	Y+49, r24	; 0x31
     72a:	9a ab       	std	Y+50, r25	; 0x32
     72c:	ab ab       	std	Y+51, r26	; 0x33
     72e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     730:	69 a9       	ldd	r22, Y+49	; 0x31
     732:	7a a9       	ldd	r23, Y+50	; 0x32
     734:	8b a9       	ldd	r24, Y+51	; 0x33
     736:	9c a9       	ldd	r25, Y+52	; 0x34
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e8       	ldi	r20, 0x80	; 128
     73e:	5f e3       	ldi	r21, 0x3F	; 63
     740:	0e 94 97 1b 	call	0x372e	; 0x372e <__ltsf2>
     744:	88 23       	and	r24, r24
     746:	2c f4       	brge	.+10     	; 0x752 <lcd_set_4bit+0x628>
		__ticks = 1;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	98 ab       	std	Y+48, r25	; 0x30
     74e:	8f a7       	std	Y+47, r24	; 0x2f
     750:	3f c0       	rjmp	.+126    	; 0x7d0 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     752:	69 a9       	ldd	r22, Y+49	; 0x31
     754:	7a a9       	ldd	r23, Y+50	; 0x32
     756:	8b a9       	ldd	r24, Y+51	; 0x33
     758:	9c a9       	ldd	r25, Y+52	; 0x34
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	3f ef       	ldi	r19, 0xFF	; 255
     75e:	4f e7       	ldi	r20, 0x7F	; 127
     760:	57 e4       	ldi	r21, 0x47	; 71
     762:	0e 94 37 1b 	call	0x366e	; 0x366e <__gtsf2>
     766:	18 16       	cp	r1, r24
     768:	4c f5       	brge	.+82     	; 0x7bc <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     76a:	6d a9       	ldd	r22, Y+53	; 0x35
     76c:	7e a9       	ldd	r23, Y+54	; 0x36
     76e:	8f a9       	ldd	r24, Y+55	; 0x37
     770:	98 ad       	ldd	r25, Y+56	; 0x38
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	bc 01       	movw	r22, r24
     784:	cd 01       	movw	r24, r26
     786:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	98 ab       	std	Y+48, r25	; 0x30
     790:	8f a7       	std	Y+47, r24	; 0x2f
     792:	0f c0       	rjmp	.+30     	; 0x7b2 <lcd_set_4bit+0x688>
     794:	80 e7       	ldi	r24, 0x70	; 112
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9e a7       	std	Y+46, r25	; 0x2e
     79a:	8d a7       	std	Y+45, r24	; 0x2d
     79c:	8d a5       	ldd	r24, Y+45	; 0x2d
     79e:	9e a5       	ldd	r25, Y+46	; 0x2e
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <lcd_set_4bit+0x676>
     7a4:	9e a7       	std	Y+46, r25	; 0x2e
     7a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a8:	8f a5       	ldd	r24, Y+47	; 0x2f
     7aa:	98 a9       	ldd	r25, Y+48	; 0x30
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	98 ab       	std	Y+48, r25	; 0x30
     7b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b2:	8f a5       	ldd	r24, Y+47	; 0x2f
     7b4:	98 a9       	ldd	r25, Y+48	; 0x30
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	69 f7       	brne	.-38     	; 0x794 <lcd_set_4bit+0x66a>
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7bc:	69 a9       	ldd	r22, Y+49	; 0x31
     7be:	7a a9       	ldd	r23, Y+50	; 0x32
     7c0:	8b a9       	ldd	r24, Y+51	; 0x33
     7c2:	9c a9       	ldd	r25, Y+52	; 0x34
     7c4:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	98 ab       	std	Y+48, r25	; 0x30
     7ce:	8f a7       	std	Y+47, r24	; 0x2f
     7d0:	8f a5       	ldd	r24, Y+47	; 0x2f
     7d2:	98 a9       	ldd	r25, Y+48	; 0x30
     7d4:	9c a7       	std	Y+44, r25	; 0x2c
     7d6:	8b a7       	std	Y+43, r24	; 0x2b
     7d8:	8b a5       	ldd	r24, Y+43	; 0x2b
     7da:	9c a5       	ldd	r25, Y+44	; 0x2c
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <lcd_set_4bit+0x6b2>
     7e0:	9c a7       	std	Y+44, r25	; 0x2c
     7e2:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     7e4:	a8 e2       	ldi	r26, 0x28	; 40
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e8 e2       	ldi	r30, 0x28	; 40
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	8e 7f       	andi	r24, 0xFE	; 254
     7f0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     7f2:	a8 e2       	ldi	r26, 0x28	; 40
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	e8 e2       	ldi	r30, 0x28	; 40
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8d 7f       	andi	r24, 0xFD	; 253
     7fe:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     800:	e8 e2       	ldi	r30, 0x28	; 40
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 e3       	ldi	r24, 0x30	; 48
     806:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     808:	a8 e2       	ldi	r26, 0x28	; 40
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e8 e2       	ldi	r30, 0x28	; 40
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	84 60       	ori	r24, 0x04	; 4
     814:	8c 93       	st	X, r24
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 ea       	ldi	r26, 0xA0	; 160
     81c:	b0 e4       	ldi	r27, 0x40	; 64
     81e:	8f a3       	std	Y+39, r24	; 0x27
     820:	98 a7       	std	Y+40, r25	; 0x28
     822:	a9 a7       	std	Y+41, r26	; 0x29
     824:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     826:	6f a1       	ldd	r22, Y+39	; 0x27
     828:	78 a5       	ldd	r23, Y+40	; 0x28
     82a:	89 a5       	ldd	r24, Y+41	; 0x29
     82c:	9a a5       	ldd	r25, Y+42	; 0x2a
     82e:	26 e6       	ldi	r18, 0x66	; 102
     830:	36 e6       	ldi	r19, 0x66	; 102
     832:	46 e6       	ldi	r20, 0x66	; 102
     834:	55 e4       	ldi	r21, 0x45	; 69
     836:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	8b a3       	std	Y+35, r24	; 0x23
     840:	9c a3       	std	Y+36, r25	; 0x24
     842:	ad a3       	std	Y+37, r26	; 0x25
     844:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     846:	6b a1       	ldd	r22, Y+35	; 0x23
     848:	7c a1       	ldd	r23, Y+36	; 0x24
     84a:	8d a1       	ldd	r24, Y+37	; 0x25
     84c:	9e a1       	ldd	r25, Y+38	; 0x26
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e8       	ldi	r20, 0x80	; 128
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	0e 94 97 1b 	call	0x372e	; 0x372e <__ltsf2>
     85a:	88 23       	and	r24, r24
     85c:	2c f4       	brge	.+10     	; 0x868 <lcd_set_4bit+0x73e>
		__ticks = 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9a a3       	std	Y+34, r25	; 0x22
     864:	89 a3       	std	Y+33, r24	; 0x21
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     868:	6b a1       	ldd	r22, Y+35	; 0x23
     86a:	7c a1       	ldd	r23, Y+36	; 0x24
     86c:	8d a1       	ldd	r24, Y+37	; 0x25
     86e:	9e a1       	ldd	r25, Y+38	; 0x26
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	3f ef       	ldi	r19, 0xFF	; 255
     874:	4f e7       	ldi	r20, 0x7F	; 127
     876:	57 e4       	ldi	r21, 0x47	; 71
     878:	0e 94 37 1b 	call	0x366e	; 0x366e <__gtsf2>
     87c:	18 16       	cp	r1, r24
     87e:	4c f5       	brge	.+82     	; 0x8d2 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     880:	6f a1       	ldd	r22, Y+39	; 0x27
     882:	78 a5       	ldd	r23, Y+40	; 0x28
     884:	89 a5       	ldd	r24, Y+41	; 0x29
     886:	9a a5       	ldd	r25, Y+42	; 0x2a
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e2       	ldi	r20, 0x20	; 32
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	9a a3       	std	Y+34, r25	; 0x22
     8a6:	89 a3       	std	Y+33, r24	; 0x21
     8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <lcd_set_4bit+0x79e>
     8aa:	80 e7       	ldi	r24, 0x70	; 112
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	98 a3       	std	Y+32, r25	; 0x20
     8b0:	8f 8f       	std	Y+31, r24	; 0x1f
     8b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8b4:	98 a1       	ldd	r25, Y+32	; 0x20
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <lcd_set_4bit+0x78c>
     8ba:	98 a3       	std	Y+32, r25	; 0x20
     8bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8be:	89 a1       	ldd	r24, Y+33	; 0x21
     8c0:	9a a1       	ldd	r25, Y+34	; 0x22
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	9a a3       	std	Y+34, r25	; 0x22
     8c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ca:	9a a1       	ldd	r25, Y+34	; 0x22
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	69 f7       	brne	.-38     	; 0x8aa <lcd_set_4bit+0x780>
     8d0:	14 c0       	rjmp	.+40     	; 0x8fa <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d2:	6b a1       	ldd	r22, Y+35	; 0x23
     8d4:	7c a1       	ldd	r23, Y+36	; 0x24
     8d6:	8d a1       	ldd	r24, Y+37	; 0x25
     8d8:	9e a1       	ldd	r25, Y+38	; 0x26
     8da:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	9a a3       	std	Y+34, r25	; 0x22
     8e4:	89 a3       	std	Y+33, r24	; 0x21
     8e6:	89 a1       	ldd	r24, Y+33	; 0x21
     8e8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ea:	9e 8f       	std	Y+30, r25	; 0x1e
     8ec:	8d 8f       	std	Y+29, r24	; 0x1d
     8ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <lcd_set_4bit+0x7c8>
     8f6:	9e 8f       	std	Y+30, r25	; 0x1e
     8f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8fa:	a8 e2       	ldi	r26, 0x28	; 40
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e8 e2       	ldi	r30, 0x28	; 40
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	8b 7f       	andi	r24, 0xFB	; 251
     906:	8c 93       	st	X, r24
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e8       	ldi	r26, 0x80	; 128
     90e:	bf e3       	ldi	r27, 0x3F	; 63
     910:	89 8f       	std	Y+25, r24	; 0x19
     912:	9a 8f       	std	Y+26, r25	; 0x1a
     914:	ab 8f       	std	Y+27, r26	; 0x1b
     916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     918:	69 8d       	ldd	r22, Y+25	; 0x19
     91a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     91c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     91e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     920:	26 e6       	ldi	r18, 0x66	; 102
     922:	36 e6       	ldi	r19, 0x66	; 102
     924:	46 e6       	ldi	r20, 0x66	; 102
     926:	55 e4       	ldi	r21, 0x45	; 69
     928:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	8d 8b       	std	Y+21, r24	; 0x15
     932:	9e 8b       	std	Y+22, r25	; 0x16
     934:	af 8b       	std	Y+23, r26	; 0x17
     936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     938:	6d 89       	ldd	r22, Y+21	; 0x15
     93a:	7e 89       	ldd	r23, Y+22	; 0x16
     93c:	8f 89       	ldd	r24, Y+23	; 0x17
     93e:	98 8d       	ldd	r25, Y+24	; 0x18
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e8       	ldi	r20, 0x80	; 128
     946:	5f e3       	ldi	r21, 0x3F	; 63
     948:	0e 94 97 1b 	call	0x372e	; 0x372e <__ltsf2>
     94c:	88 23       	and	r24, r24
     94e:	2c f4       	brge	.+10     	; 0x95a <lcd_set_4bit+0x830>
		__ticks = 1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	9c 8b       	std	Y+20, r25	; 0x14
     956:	8b 8b       	std	Y+19, r24	; 0x13
     958:	3f c0       	rjmp	.+126    	; 0x9d8 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     95a:	6d 89       	ldd	r22, Y+21	; 0x15
     95c:	7e 89       	ldd	r23, Y+22	; 0x16
     95e:	8f 89       	ldd	r24, Y+23	; 0x17
     960:	98 8d       	ldd	r25, Y+24	; 0x18
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	3f ef       	ldi	r19, 0xFF	; 255
     966:	4f e7       	ldi	r20, 0x7F	; 127
     968:	57 e4       	ldi	r21, 0x47	; 71
     96a:	0e 94 37 1b 	call	0x366e	; 0x366e <__gtsf2>
     96e:	18 16       	cp	r1, r24
     970:	4c f5       	brge	.+82     	; 0x9c4 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     972:	69 8d       	ldd	r22, Y+25	; 0x19
     974:	7a 8d       	ldd	r23, Y+26	; 0x1a
     976:	8b 8d       	ldd	r24, Y+27	; 0x1b
     978:	9c 8d       	ldd	r25, Y+28	; 0x1c
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e2       	ldi	r20, 0x20	; 32
     980:	51 e4       	ldi	r21, 0x41	; 65
     982:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	bc 01       	movw	r22, r24
     98c:	cd 01       	movw	r24, r26
     98e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	9c 8b       	std	Y+20, r25	; 0x14
     998:	8b 8b       	std	Y+19, r24	; 0x13
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <lcd_set_4bit+0x890>
     99c:	80 e7       	ldi	r24, 0x70	; 112
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9a 8b       	std	Y+18, r25	; 0x12
     9a2:	89 8b       	std	Y+17, r24	; 0x11
     9a4:	89 89       	ldd	r24, Y+17	; 0x11
     9a6:	9a 89       	ldd	r25, Y+18	; 0x12
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <lcd_set_4bit+0x87e>
     9ac:	9a 8b       	std	Y+18, r25	; 0x12
     9ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b0:	8b 89       	ldd	r24, Y+19	; 0x13
     9b2:	9c 89       	ldd	r25, Y+20	; 0x14
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	9c 8b       	std	Y+20, r25	; 0x14
     9b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ba:	8b 89       	ldd	r24, Y+19	; 0x13
     9bc:	9c 89       	ldd	r25, Y+20	; 0x14
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	69 f7       	brne	.-38     	; 0x99c <lcd_set_4bit+0x872>
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c4:	6d 89       	ldd	r22, Y+21	; 0x15
     9c6:	7e 89       	ldd	r23, Y+22	; 0x16
     9c8:	8f 89       	ldd	r24, Y+23	; 0x17
     9ca:	98 8d       	ldd	r25, Y+24	; 0x18
     9cc:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	9c 8b       	std	Y+20, r25	; 0x14
     9d6:	8b 8b       	std	Y+19, r24	; 0x13
     9d8:	8b 89       	ldd	r24, Y+19	; 0x13
     9da:	9c 89       	ldd	r25, Y+20	; 0x14
     9dc:	98 8b       	std	Y+16, r25	; 0x10
     9de:	8f 87       	std	Y+15, r24	; 0x0f
     9e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e2:	98 89       	ldd	r25, Y+16	; 0x10
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <lcd_set_4bit+0x8ba>
     9e8:	98 8b       	std	Y+16, r25	; 0x10
     9ea:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     9ec:	a8 e2       	ldi	r26, 0x28	; 40
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e8 e2       	ldi	r30, 0x28	; 40
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8e 7f       	andi	r24, 0xFE	; 254
     9f8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     9fa:	a8 e2       	ldi	r26, 0x28	; 40
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e8 e2       	ldi	r30, 0x28	; 40
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8d 7f       	andi	r24, 0xFD	; 253
     a06:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a08:	e8 e2       	ldi	r30, 0x28	; 40
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a10:	a8 e2       	ldi	r26, 0x28	; 40
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e8 e2       	ldi	r30, 0x28	; 40
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	84 60       	ori	r24, 0x04	; 4
     a1c:	8c 93       	st	X, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	a0 ea       	ldi	r26, 0xA0	; 160
     a24:	b0 e4       	ldi	r27, 0x40	; 64
     a26:	8b 87       	std	Y+11, r24	; 0x0b
     a28:	9c 87       	std	Y+12, r25	; 0x0c
     a2a:	ad 87       	std	Y+13, r26	; 0x0d
     a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a30:	7c 85       	ldd	r23, Y+12	; 0x0c
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	9e 85       	ldd	r25, Y+14	; 0x0e
     a36:	26 e6       	ldi	r18, 0x66	; 102
     a38:	36 e6       	ldi	r19, 0x66	; 102
     a3a:	46 e6       	ldi	r20, 0x66	; 102
     a3c:	55 e4       	ldi	r21, 0x45	; 69
     a3e:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	8f 83       	std	Y+7, r24	; 0x07
     a48:	98 87       	std	Y+8, r25	; 0x08
     a4a:	a9 87       	std	Y+9, r26	; 0x09
     a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a4e:	6f 81       	ldd	r22, Y+7	; 0x07
     a50:	78 85       	ldd	r23, Y+8	; 0x08
     a52:	89 85       	ldd	r24, Y+9	; 0x09
     a54:	9a 85       	ldd	r25, Y+10	; 0x0a
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e8       	ldi	r20, 0x80	; 128
     a5c:	5f e3       	ldi	r21, 0x3F	; 63
     a5e:	0e 94 97 1b 	call	0x372e	; 0x372e <__ltsf2>
     a62:	88 23       	and	r24, r24
     a64:	2c f4       	brge	.+10     	; 0xa70 <lcd_set_4bit+0x946>
		__ticks = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9e 83       	std	Y+6, r25	; 0x06
     a6c:	8d 83       	std	Y+5, r24	; 0x05
     a6e:	3f c0       	rjmp	.+126    	; 0xaee <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     a70:	6f 81       	ldd	r22, Y+7	; 0x07
     a72:	78 85       	ldd	r23, Y+8	; 0x08
     a74:	89 85       	ldd	r24, Y+9	; 0x09
     a76:	9a 85       	ldd	r25, Y+10	; 0x0a
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	3f ef       	ldi	r19, 0xFF	; 255
     a7c:	4f e7       	ldi	r20, 0x7F	; 127
     a7e:	57 e4       	ldi	r21, 0x47	; 71
     a80:	0e 94 37 1b 	call	0x366e	; 0x366e <__gtsf2>
     a84:	18 16       	cp	r1, r24
     a86:	4c f5       	brge	.+82     	; 0xada <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a88:	6b 85       	ldd	r22, Y+11	; 0x0b
     a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	bc 01       	movw	r22, r24
     aa2:	cd 01       	movw	r24, r26
     aa4:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	9e 83       	std	Y+6, r25	; 0x06
     aae:	8d 83       	std	Y+5, r24	; 0x05
     ab0:	0f c0       	rjmp	.+30     	; 0xad0 <lcd_set_4bit+0x9a6>
     ab2:	80 e7       	ldi	r24, 0x70	; 112
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <lcd_set_4bit+0x994>
     ac2:	9c 83       	std	Y+4, r25	; 0x04
     ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac6:	8d 81       	ldd	r24, Y+5	; 0x05
     ac8:	9e 81       	ldd	r25, Y+6	; 0x06
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	9e 83       	std	Y+6, r25	; 0x06
     ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	69 f7       	brne	.-38     	; 0xab2 <lcd_set_4bit+0x988>
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ada:	6f 81       	ldd	r22, Y+7	; 0x07
     adc:	78 85       	ldd	r23, Y+8	; 0x08
     ade:	89 85       	ldd	r24, Y+9	; 0x09
     ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae2:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	9e 83       	std	Y+6, r25	; 0x06
     aec:	8d 83       	std	Y+5, r24	; 0x05
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	9e 81       	ldd	r25, Y+6	; 0x06
     af2:	9a 83       	std	Y+2, r25	; 0x02
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <lcd_set_4bit+0x9d0>
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b02:	a8 e2       	ldi	r26, 0x28	; 40
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 e2       	ldi	r30, 0x28	; 40
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8b 7f       	andi	r24, 0xFB	; 251
     b0e:	8c 93       	st	X, r24

	
}
     b10:	c0 59       	subi	r28, 0x90	; 144
     b12:	df 4f       	sbci	r29, 0xFF	; 255
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2e 97       	sbiw	r28, 0x0e	; 14
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e8       	ldi	r26, 0x80	; 128
     b42:	bf e3       	ldi	r27, 0x3F	; 63
     b44:	8b 87       	std	Y+11, r24	; 0x0b
     b46:	9c 87       	std	Y+12, r25	; 0x0c
     b48:	ad 87       	std	Y+13, r26	; 0x0d
     b4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b50:	8d 85       	ldd	r24, Y+13	; 0x0d
     b52:	9e 85       	ldd	r25, Y+14	; 0x0e
     b54:	26 e6       	ldi	r18, 0x66	; 102
     b56:	36 e6       	ldi	r19, 0x66	; 102
     b58:	46 e6       	ldi	r20, 0x66	; 102
     b5a:	55 e4       	ldi	r21, 0x45	; 69
     b5c:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	8f 83       	std	Y+7, r24	; 0x07
     b66:	98 87       	std	Y+8, r25	; 0x08
     b68:	a9 87       	std	Y+9, r26	; 0x09
     b6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b6c:	6f 81       	ldd	r22, Y+7	; 0x07
     b6e:	78 85       	ldd	r23, Y+8	; 0x08
     b70:	89 85       	ldd	r24, Y+9	; 0x09
     b72:	9a 85       	ldd	r25, Y+10	; 0x0a
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	0e 94 97 1b 	call	0x372e	; 0x372e <__ltsf2>
     b80:	88 23       	and	r24, r24
     b82:	2c f4       	brge	.+10     	; 0xb8e <lcd_init+0x66>
		__ticks = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	9e 83       	std	Y+6, r25	; 0x06
     b8a:	8d 83       	std	Y+5, r24	; 0x05
     b8c:	3f c0       	rjmp	.+126    	; 0xc0c <lcd_init+0xe4>
	else if (__tmp > 65535)
     b8e:	6f 81       	ldd	r22, Y+7	; 0x07
     b90:	78 85       	ldd	r23, Y+8	; 0x08
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	4f e7       	ldi	r20, 0x7F	; 127
     b9c:	57 e4       	ldi	r21, 0x47	; 71
     b9e:	0e 94 37 1b 	call	0x366e	; 0x366e <__gtsf2>
     ba2:	18 16       	cp	r1, r24
     ba4:	4c f5       	brge	.+82     	; 0xbf8 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bac:	9e 85       	ldd	r25, Y+14	; 0x0e
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e2       	ldi	r20, 0x20	; 32
     bb4:	51 e4       	ldi	r21, 0x41	; 65
     bb6:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	bc 01       	movw	r22, r24
     bc0:	cd 01       	movw	r24, r26
     bc2:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	9e 83       	std	Y+6, r25	; 0x06
     bcc:	8d 83       	std	Y+5, r24	; 0x05
     bce:	0f c0       	rjmp	.+30     	; 0xbee <lcd_init+0xc6>
     bd0:	80 e7       	ldi	r24, 0x70	; 112
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <lcd_init+0xb4>
     be0:	9c 83       	std	Y+4, r25	; 0x04
     be2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	9e 81       	ldd	r25, Y+6	; 0x06
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bee:	8d 81       	ldd	r24, Y+5	; 0x05
     bf0:	9e 81       	ldd	r25, Y+6	; 0x06
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	69 f7       	brne	.-38     	; 0xbd0 <lcd_init+0xa8>
     bf6:	14 c0       	rjmp	.+40     	; 0xc20 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf8:	6f 81       	ldd	r22, Y+7	; 0x07
     bfa:	78 85       	ldd	r23, Y+8	; 0x08
     bfc:	89 85       	ldd	r24, Y+9	; 0x09
     bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     c00:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <lcd_init+0xf0>
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     c20:	88 e2       	ldi	r24, 0x28	; 40
     c22:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x01);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x06);
     c2c:	86 e0       	ldi	r24, 0x06	; 6
     c2e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x0E);
     c32:	8e e0       	ldi	r24, 0x0E	; 14
     c34:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x80);
     c38:	80 e8       	ldi	r24, 0x80	; 128
     c3a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		
}
     c3e:	2e 96       	adiw	r28, 0x0e	; 14
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	6e 97       	sbiw	r28, 0x1e	; 30
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     c66:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c68:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c6c:	80 7f       	andi	r24, 0xF0	; 240
     c6e:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     c70:	a8 e2       	ldi	r26, 0x28	; 40
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e8 e2       	ldi	r30, 0x28	; 40
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8f 70       	andi	r24, 0x0F	; 15
     c7c:	8c 93       	st	X, r24
	lcd_port |= temp;
     c7e:	a8 e2       	ldi	r26, 0x28	; 40
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 e2       	ldi	r30, 0x28	; 40
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	90 81       	ld	r25, Z
     c88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c8a:	89 2b       	or	r24, r25
     c8c:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     c8e:	a8 e2       	ldi	r26, 0x28	; 40
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e8 e2       	ldi	r30, 0x28	; 40
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     c9c:	a8 e2       	ldi	r26, 0x28	; 40
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e8 e2       	ldi	r30, 0x28	; 40
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     caa:	a8 e2       	ldi	r26, 0x28	; 40
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e8 e2       	ldi	r30, 0x28	; 40
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	84 60       	ori	r24, 0x04	; 4
     cb6:	8c 93       	st	X, r24
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 ea       	ldi	r26, 0xA0	; 160
     cbe:	b0 e4       	ldi	r27, 0x40	; 64
     cc0:	89 8f       	std	Y+25, r24	; 0x19
     cc2:	9a 8f       	std	Y+26, r25	; 0x1a
     cc4:	ab 8f       	std	Y+27, r26	; 0x1b
     cc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc8:	69 8d       	ldd	r22, Y+25	; 0x19
     cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd0:	26 e6       	ldi	r18, 0x66	; 102
     cd2:	36 e6       	ldi	r19, 0x66	; 102
     cd4:	46 e6       	ldi	r20, 0x66	; 102
     cd6:	55 e4       	ldi	r21, 0x45	; 69
     cd8:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	8d 8b       	std	Y+21, r24	; 0x15
     ce2:	9e 8b       	std	Y+22, r25	; 0x16
     ce4:	af 8b       	std	Y+23, r26	; 0x17
     ce6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ce8:	6d 89       	ldd	r22, Y+21	; 0x15
     cea:	7e 89       	ldd	r23, Y+22	; 0x16
     cec:	8f 89       	ldd	r24, Y+23	; 0x17
     cee:	98 8d       	ldd	r25, Y+24	; 0x18
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	0e 94 97 1b 	call	0x372e	; 0x372e <__ltsf2>
     cfc:	88 23       	and	r24, r24
     cfe:	2c f4       	brge	.+10     	; 0xd0a <lcd_wr_command+0xba>
		__ticks = 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9c 8b       	std	Y+20, r25	; 0x14
     d06:	8b 8b       	std	Y+19, r24	; 0x13
     d08:	3f c0       	rjmp	.+126    	; 0xd88 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d0a:	6d 89       	ldd	r22, Y+21	; 0x15
     d0c:	7e 89       	ldd	r23, Y+22	; 0x16
     d0e:	8f 89       	ldd	r24, Y+23	; 0x17
     d10:	98 8d       	ldd	r25, Y+24	; 0x18
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	3f ef       	ldi	r19, 0xFF	; 255
     d16:	4f e7       	ldi	r20, 0x7F	; 127
     d18:	57 e4       	ldi	r21, 0x47	; 71
     d1a:	0e 94 37 1b 	call	0x366e	; 0x366e <__gtsf2>
     d1e:	18 16       	cp	r1, r24
     d20:	4c f5       	brge	.+82     	; 0xd74 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d22:	69 8d       	ldd	r22, Y+25	; 0x19
     d24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e2       	ldi	r20, 0x20	; 32
     d30:	51 e4       	ldi	r21, 0x41	; 65
     d32:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	9c 8b       	std	Y+20, r25	; 0x14
     d48:	8b 8b       	std	Y+19, r24	; 0x13
     d4a:	0f c0       	rjmp	.+30     	; 0xd6a <lcd_wr_command+0x11a>
     d4c:	80 e7       	ldi	r24, 0x70	; 112
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	9a 8b       	std	Y+18, r25	; 0x12
     d52:	89 8b       	std	Y+17, r24	; 0x11
     d54:	89 89       	ldd	r24, Y+17	; 0x11
     d56:	9a 89       	ldd	r25, Y+18	; 0x12
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <lcd_wr_command+0x108>
     d5c:	9a 8b       	std	Y+18, r25	; 0x12
     d5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d60:	8b 89       	ldd	r24, Y+19	; 0x13
     d62:	9c 89       	ldd	r25, Y+20	; 0x14
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	9c 8b       	std	Y+20, r25	; 0x14
     d68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6a:	8b 89       	ldd	r24, Y+19	; 0x13
     d6c:	9c 89       	ldd	r25, Y+20	; 0x14
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	69 f7       	brne	.-38     	; 0xd4c <lcd_wr_command+0xfc>
     d72:	14 c0       	rjmp	.+40     	; 0xd9c <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d74:	6d 89       	ldd	r22, Y+21	; 0x15
     d76:	7e 89       	ldd	r23, Y+22	; 0x16
     d78:	8f 89       	ldd	r24, Y+23	; 0x17
     d7a:	98 8d       	ldd	r25, Y+24	; 0x18
     d7c:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	9c 8b       	std	Y+20, r25	; 0x14
     d86:	8b 8b       	std	Y+19, r24	; 0x13
     d88:	8b 89       	ldd	r24, Y+19	; 0x13
     d8a:	9c 89       	ldd	r25, Y+20	; 0x14
     d8c:	98 8b       	std	Y+16, r25	; 0x10
     d8e:	8f 87       	std	Y+15, r24	; 0x0f
     d90:	8f 85       	ldd	r24, Y+15	; 0x0f
     d92:	98 89       	ldd	r25, Y+16	; 0x10
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <lcd_wr_command+0x144>
     d98:	98 8b       	std	Y+16, r25	; 0x10
     d9a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     d9c:	a8 e2       	ldi	r26, 0x28	; 40
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e8 e2       	ldi	r30, 0x28	; 40
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8b 7f       	andi	r24, 0xFB	; 251
     da8:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     daa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dac:	8f 70       	andi	r24, 0x0F	; 15
     dae:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     db0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db2:	82 95       	swap	r24
     db4:	80 7f       	andi	r24, 0xF0	; 240
     db6:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     db8:	a8 e2       	ldi	r26, 0x28	; 40
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e8 e2       	ldi	r30, 0x28	; 40
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8f 70       	andi	r24, 0x0F	; 15
     dc4:	8c 93       	st	X, r24
	lcd_port |= cmd;
     dc6:	a8 e2       	ldi	r26, 0x28	; 40
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e2       	ldi	r30, 0x28	; 40
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	90 81       	ld	r25, Z
     dd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd2:	89 2b       	or	r24, r25
     dd4:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     dd6:	a8 e2       	ldi	r26, 0x28	; 40
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e8 e2       	ldi	r30, 0x28	; 40
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8e 7f       	andi	r24, 0xFE	; 254
     de2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     de4:	a8 e2       	ldi	r26, 0x28	; 40
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 e2       	ldi	r30, 0x28	; 40
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8d 7f       	andi	r24, 0xFD	; 253
     df0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     df2:	a8 e2       	ldi	r26, 0x28	; 40
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e8 e2       	ldi	r30, 0x28	; 40
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	84 60       	ori	r24, 0x04	; 4
     dfe:	8c 93       	st	X, r24
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 ea       	ldi	r26, 0xA0	; 160
     e06:	b0 e4       	ldi	r27, 0x40	; 64
     e08:	8b 87       	std	Y+11, r24	; 0x0b
     e0a:	9c 87       	std	Y+12, r25	; 0x0c
     e0c:	ad 87       	std	Y+13, r26	; 0x0d
     e0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e10:	6b 85       	ldd	r22, Y+11	; 0x0b
     e12:	7c 85       	ldd	r23, Y+12	; 0x0c
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	26 e6       	ldi	r18, 0x66	; 102
     e1a:	36 e6       	ldi	r19, 0x66	; 102
     e1c:	46 e6       	ldi	r20, 0x66	; 102
     e1e:	55 e4       	ldi	r21, 0x45	; 69
     e20:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	8f 83       	std	Y+7, r24	; 0x07
     e2a:	98 87       	std	Y+8, r25	; 0x08
     e2c:	a9 87       	std	Y+9, r26	; 0x09
     e2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e30:	6f 81       	ldd	r22, Y+7	; 0x07
     e32:	78 85       	ldd	r23, Y+8	; 0x08
     e34:	89 85       	ldd	r24, Y+9	; 0x09
     e36:	9a 85       	ldd	r25, Y+10	; 0x0a
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	0e 94 97 1b 	call	0x372e	; 0x372e <__ltsf2>
     e44:	88 23       	and	r24, r24
     e46:	2c f4       	brge	.+10     	; 0xe52 <lcd_wr_command+0x202>
		__ticks = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	3f c0       	rjmp	.+126    	; 0xed0 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     e52:	6f 81       	ldd	r22, Y+7	; 0x07
     e54:	78 85       	ldd	r23, Y+8	; 0x08
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	4f e7       	ldi	r20, 0x7F	; 127
     e60:	57 e4       	ldi	r21, 0x47	; 71
     e62:	0e 94 37 1b 	call	0x366e	; 0x366e <__gtsf2>
     e66:	18 16       	cp	r1, r24
     e68:	4c f5       	brge	.+82     	; 0xebc <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <lcd_wr_command+0x262>
     e94:	80 e7       	ldi	r24, 0x70	; 112
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <lcd_wr_command+0x250>
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	69 f7       	brne	.-38     	; 0xe94 <lcd_wr_command+0x244>
     eba:	14 c0       	rjmp	.+40     	; 0xee4 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9e 83       	std	Y+6, r25	; 0x06
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <lcd_wr_command+0x28c>
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     ee4:	a8 e2       	ldi	r26, 0x28	; 40
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e8 e2       	ldi	r30, 0x28	; 40
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8b 7f       	andi	r24, 0xFB	; 251
     ef0:	8c 93       	st	X, r24
}
     ef2:	6e 96       	adiw	r28, 0x1e	; 30
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	6e 97       	sbiw	r28, 0x1e	; 30
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f1c:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     f1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f20:	80 7f       	andi	r24, 0xF0	; 240
     f22:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f24:	a8 e2       	ldi	r26, 0x28	; 40
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 e2       	ldi	r30, 0x28	; 40
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 70       	andi	r24, 0x0F	; 15
     f30:	8c 93       	st	X, r24
	lcd_port |= temp;
     f32:	a8 e2       	ldi	r26, 0x28	; 40
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e8 e2       	ldi	r30, 0x28	; 40
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	90 81       	ld	r25, Z
     f3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f3e:	89 2b       	or	r24, r25
     f40:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     f42:	a8 e2       	ldi	r26, 0x28	; 40
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e2       	ldi	r30, 0x28	; 40
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	81 60       	ori	r24, 0x01	; 1
     f4e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f50:	a8 e2       	ldi	r26, 0x28	; 40
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e8 e2       	ldi	r30, 0x28	; 40
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     f5e:	a8 e2       	ldi	r26, 0x28	; 40
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e8 e2       	ldi	r30, 0x28	; 40
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	8c 93       	st	X, r24
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	a0 ea       	ldi	r26, 0xA0	; 160
     f72:	b0 e4       	ldi	r27, 0x40	; 64
     f74:	89 8f       	std	Y+25, r24	; 0x19
     f76:	9a 8f       	std	Y+26, r25	; 0x1a
     f78:	ab 8f       	std	Y+27, r26	; 0x1b
     f7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	69 8d       	ldd	r22, Y+25	; 0x19
     f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f84:	26 e6       	ldi	r18, 0x66	; 102
     f86:	36 e6       	ldi	r19, 0x66	; 102
     f88:	46 e6       	ldi	r20, 0x66	; 102
     f8a:	55 e4       	ldi	r21, 0x45	; 69
     f8c:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	8d 8b       	std	Y+21, r24	; 0x15
     f96:	9e 8b       	std	Y+22, r25	; 0x16
     f98:	af 8b       	std	Y+23, r26	; 0x17
     f9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f9c:	6d 89       	ldd	r22, Y+21	; 0x15
     f9e:	7e 89       	ldd	r23, Y+22	; 0x16
     fa0:	8f 89       	ldd	r24, Y+23	; 0x17
     fa2:	98 8d       	ldd	r25, Y+24	; 0x18
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	0e 94 97 1b 	call	0x372e	; 0x372e <__ltsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	2c f4       	brge	.+10     	; 0xfbe <lcd_wr_char+0xba>
		__ticks = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	3f c0       	rjmp	.+126    	; 0x103c <lcd_wr_char+0x138>
	else if (__tmp > 65535)
     fbe:	6d 89       	ldd	r22, Y+21	; 0x15
     fc0:	7e 89       	ldd	r23, Y+22	; 0x16
     fc2:	8f 89       	ldd	r24, Y+23	; 0x17
     fc4:	98 8d       	ldd	r25, Y+24	; 0x18
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 37 1b 	call	0x366e	; 0x366e <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	4c f5       	brge	.+82     	; 0x1028 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd6:	69 8d       	ldd	r22, Y+25	; 0x19
     fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <lcd_wr_char+0x11a>
    1000:	80 e7       	ldi	r24, 0x70	; 112
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	9a 8b       	std	Y+18, r25	; 0x12
    1006:	89 8b       	std	Y+17, r24	; 0x11
    1008:	89 89       	ldd	r24, Y+17	; 0x11
    100a:	9a 89       	ldd	r25, Y+18	; 0x12
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <lcd_wr_char+0x108>
    1010:	9a 8b       	std	Y+18, r25	; 0x12
    1012:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8b 89       	ldd	r24, Y+19	; 0x13
    1016:	9c 89       	ldd	r25, Y+20	; 0x14
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9c 8b       	std	Y+20, r25	; 0x14
    101c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	9c 89       	ldd	r25, Y+20	; 0x14
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f7       	brne	.-38     	; 0x1000 <lcd_wr_char+0xfc>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	6d 89       	ldd	r22, Y+21	; 0x15
    102a:	7e 89       	ldd	r23, Y+22	; 0x16
    102c:	8f 89       	ldd	r24, Y+23	; 0x17
    102e:	98 8d       	ldd	r25, Y+24	; 0x18
    1030:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9c 8b       	std	Y+20, r25	; 0x14
    103a:	8b 8b       	std	Y+19, r24	; 0x13
    103c:	8b 89       	ldd	r24, Y+19	; 0x13
    103e:	9c 89       	ldd	r25, Y+20	; 0x14
    1040:	98 8b       	std	Y+16, r25	; 0x10
    1042:	8f 87       	std	Y+15, r24	; 0x0f
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	98 89       	ldd	r25, Y+16	; 0x10
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <lcd_wr_char+0x144>
    104c:	98 8b       	std	Y+16, r25	; 0x10
    104e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1050:	a8 e2       	ldi	r26, 0x28	; 40
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 e2       	ldi	r30, 0x28	; 40
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8b 7f       	andi	r24, 0xFB	; 251
    105c:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    105e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1060:	8f 70       	andi	r24, 0x0F	; 15
    1062:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1064:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1066:	82 95       	swap	r24
    1068:	80 7f       	andi	r24, 0xF0	; 240
    106a:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    106c:	a8 e2       	ldi	r26, 0x28	; 40
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e2       	ldi	r30, 0x28	; 40
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	8c 93       	st	X, r24
	lcd_port |= letter;
    107a:	a8 e2       	ldi	r26, 0x28	; 40
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e8 e2       	ldi	r30, 0x28	; 40
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	90 81       	ld	r25, Z
    1084:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1086:	89 2b       	or	r24, r25
    1088:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    108a:	a8 e2       	ldi	r26, 0x28	; 40
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e8 e2       	ldi	r30, 0x28	; 40
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1098:	a8 e2       	ldi	r26, 0x28	; 40
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e2       	ldi	r30, 0x28	; 40
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8d 7f       	andi	r24, 0xFD	; 253
    10a4:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10a6:	a8 e2       	ldi	r26, 0x28	; 40
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e2       	ldi	r30, 0x28	; 40
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	84 60       	ori	r24, 0x04	; 4
    10b2:	8c 93       	st	X, r24
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a0 ea       	ldi	r26, 0xA0	; 160
    10ba:	b0 e4       	ldi	r27, 0x40	; 64
    10bc:	8b 87       	std	Y+11, r24	; 0x0b
    10be:	9c 87       	std	Y+12, r25	; 0x0c
    10c0:	ad 87       	std	Y+13, r26	; 0x0d
    10c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    10cc:	26 e6       	ldi	r18, 0x66	; 102
    10ce:	36 e6       	ldi	r19, 0x66	; 102
    10d0:	46 e6       	ldi	r20, 0x66	; 102
    10d2:	55 e4       	ldi	r21, 0x45	; 69
    10d4:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	8f 83       	std	Y+7, r24	; 0x07
    10de:	98 87       	std	Y+8, r25	; 0x08
    10e0:	a9 87       	std	Y+9, r26	; 0x09
    10e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e4:	6f 81       	ldd	r22, Y+7	; 0x07
    10e6:	78 85       	ldd	r23, Y+8	; 0x08
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e8       	ldi	r20, 0x80	; 128
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	0e 94 97 1b 	call	0x372e	; 0x372e <__ltsf2>
    10f8:	88 23       	and	r24, r24
    10fa:	2c f4       	brge	.+10     	; 0x1106 <lcd_wr_char+0x202>
		__ticks = 1;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9e 83       	std	Y+6, r25	; 0x06
    1102:	8d 83       	std	Y+5, r24	; 0x05
    1104:	3f c0       	rjmp	.+126    	; 0x1184 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	3f ef       	ldi	r19, 0xFF	; 255
    1112:	4f e7       	ldi	r20, 0x7F	; 127
    1114:	57 e4       	ldi	r21, 0x47	; 71
    1116:	0e 94 37 1b 	call	0x366e	; 0x366e <__gtsf2>
    111a:	18 16       	cp	r1, r24
    111c:	4c f5       	brge	.+82     	; 0x1170 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1120:	7c 85       	ldd	r23, Y+12	; 0x0c
    1122:	8d 85       	ldd	r24, Y+13	; 0x0d
    1124:	9e 85       	ldd	r25, Y+14	; 0x0e
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <lcd_wr_char+0x262>
    1148:	80 e7       	ldi	r24, 0x70	; 112
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <lcd_wr_char+0x250>
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	69 f7       	brne	.-38     	; 0x1148 <lcd_wr_char+0x244>
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1170:	6f 81       	ldd	r22, Y+7	; 0x07
    1172:	78 85       	ldd	r23, Y+8	; 0x08
    1174:	89 85       	ldd	r24, Y+9	; 0x09
    1176:	9a 85       	ldd	r25, Y+10	; 0x0a
    1178:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <lcd_wr_char+0x28c>
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1198:	a8 e2       	ldi	r26, 0x28	; 40
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e8 e2       	ldi	r30, 0x28	; 40
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8b 7f       	andi	r24, 0xFB	; 251
    11a4:	8c 93       	st	X, r24
}
    11a6:	6e 96       	adiw	r28, 0x1e	; 30
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <lcd_home>:


void lcd_home()
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    11c0:	80 e8       	ldi	r24, 0x80	; 128
    11c2:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	0f 92       	push	r0
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	0a c0       	rjmp	.+20     	; 0x11f2 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    11de:	e9 81       	ldd	r30, Y+1	; 0x01
    11e0:	fa 81       	ldd	r31, Y+2	; 0x02
    11e2:	80 81       	ld	r24, Z
    11e4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		str++;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	80 81       	ld	r24, Z
    11f8:	88 23       	and	r24, r24
    11fa:	89 f7       	brne	.-30     	; 0x11de <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <lcd_cursor+0x6>
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3c 83       	std	Y+4, r19	; 0x04
    121e:	2b 83       	std	Y+3, r18	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	91 05       	cpc	r25, r1
    1228:	d9 f0       	breq	.+54     	; 0x1260 <lcd_cursor+0x5a>
    122a:	2b 81       	ldd	r18, Y+3	; 0x03
    122c:	3c 81       	ldd	r19, Y+4	; 0x04
    122e:	23 30       	cpi	r18, 0x03	; 3
    1230:	31 05       	cpc	r19, r1
    1232:	34 f4       	brge	.+12     	; 0x1240 <lcd_cursor+0x3a>
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	61 f0       	breq	.+24     	; 0x1256 <lcd_cursor+0x50>
    123e:	1e c0       	rjmp	.+60     	; 0x127c <lcd_cursor+0x76>
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	3c 81       	ldd	r19, Y+4	; 0x04
    1244:	23 30       	cpi	r18, 0x03	; 3
    1246:	31 05       	cpc	r19, r1
    1248:	81 f0       	breq	.+32     	; 0x126a <lcd_cursor+0x64>
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	91 05       	cpc	r25, r1
    1252:	81 f0       	breq	.+32     	; 0x1274 <lcd_cursor+0x6e>
    1254:	13 c0       	rjmp	.+38     	; 0x127c <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	81 58       	subi	r24, 0x81	; 129
    125a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    125e:	0e c0       	rjmp	.+28     	; 0x127c <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	81 54       	subi	r24, 0x41	; 65
    1264:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1268:	09 c0       	rjmp	.+18     	; 0x127c <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	8d 56       	subi	r24, 0x6D	; 109
    126e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	8d 52       	subi	r24, 0x2D	; 45
    1278:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		default: break;
	}
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	27 97       	sbiw	r28, 0x07	; 7
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	8a 83       	std	Y+2, r24	; 0x02
    12a0:	6b 83       	std	Y+3, r22	; 0x03
    12a2:	5d 83       	std	Y+5, r21	; 0x05
    12a4:	4c 83       	std	Y+4, r20	; 0x04
    12a6:	3f 83       	std	Y+7, r19	; 0x07
    12a8:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    12aa:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	88 23       	and	r24, r24
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <lcd_print+0x2e>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	88 23       	and	r24, r24
    12b6:	19 f4       	brne	.+6      	; 0x12be <lcd_print+0x34>
	{
		lcd_home();
    12b8:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <lcd_home>
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	6b 81       	ldd	r22, Y+3	; 0x03
    12c2:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	85 30       	cpi	r24, 0x05	; 5
    12cc:	91 05       	cpc	r25, r1
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <lcd_print+0x4c>
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	a9 f4       	brne	.+42     	; 0x1300 <lcd_print+0x76>
	{
		million=value/10000+48;
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	20 e1       	ldi	r18, 0x10	; 16
    12dc:	37 e2       	ldi	r19, 0x27	; 39
    12de:	b9 01       	movw	r22, r18
    12e0:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__udivmodhi4>
    12e4:	cb 01       	movw	r24, r22
    12e6:	c0 96       	adiw	r24, 0x30	; 48
    12e8:	90 93 3b 03 	sts	0x033B, r25
    12ec:	80 93 3a 03 	sts	0x033A, r24
		lcd_wr_char(million);
    12f0:	80 91 3a 03 	lds	r24, 0x033A
    12f4:	90 91 3b 03 	lds	r25, 0x033B
    12f8:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	9f 81       	ldd	r25, Y+7	; 0x07
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	91 05       	cpc	r25, r1
    1308:	19 f0       	breq	.+6      	; 0x1310 <lcd_print+0x86>
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	11 f5       	brne	.+68     	; 0x1354 <lcd_print+0xca>
	{
		temp = value/1000;
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	28 ee       	ldi	r18, 0xE8	; 232
    1316:	33 e0       	ldi	r19, 0x03	; 3
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__udivmodhi4>
    131e:	cb 01       	movw	r24, r22
    1320:	90 93 3d 03 	sts	0x033D, r25
    1324:	80 93 3c 03 	sts	0x033C, r24
		thousand = temp%10 + 48;
    1328:	80 91 3c 03 	lds	r24, 0x033C
    132c:	90 91 3d 03 	lds	r25, 0x033D
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	b9 01       	movw	r22, r18
    1336:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__udivmodhi4>
    133a:	c0 96       	adiw	r24, 0x30	; 48
    133c:	90 93 4b 03 	sts	0x034B, r25
    1340:	80 93 4a 03 	sts	0x034A, r24
		lcd_wr_char(thousand);
    1344:	80 91 4a 03 	lds	r24, 0x034A
    1348:	90 91 4b 03 	lds	r25, 0x034B
    134c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1354:	8e 81       	ldd	r24, Y+6	; 0x06
    1356:	9f 81       	ldd	r25, Y+7	; 0x07
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	19 f0       	breq	.+6      	; 0x1364 <lcd_print+0xda>
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	11 f5       	brne	.+68     	; 0x13a8 <lcd_print+0x11e>
	{
		temp = value/100;
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	24 e6       	ldi	r18, 0x64	; 100
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__udivmodhi4>
    1372:	cb 01       	movw	r24, r22
    1374:	90 93 3d 03 	sts	0x033D, r25
    1378:	80 93 3c 03 	sts	0x033C, r24
		hundred = temp%10 + 48;
    137c:	80 91 3c 03 	lds	r24, 0x033C
    1380:	90 91 3d 03 	lds	r25, 0x033D
    1384:	2a e0       	ldi	r18, 0x0A	; 10
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	b9 01       	movw	r22, r18
    138a:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__udivmodhi4>
    138e:	c0 96       	adiw	r24, 0x30	; 48
    1390:	90 93 47 03 	sts	0x0347, r25
    1394:	80 93 46 03 	sts	0x0346, r24
		lcd_wr_char(hundred);
    1398:	80 91 46 03 	lds	r24, 0x0346
    139c:	90 91 47 03 	lds	r25, 0x0347
    13a0:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	91 05       	cpc	r25, r1
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <lcd_print+0x12e>
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	11 f5       	brne	.+68     	; 0x13fc <lcd_print+0x172>
	{
		temp = value/10;
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	9d 81       	ldd	r25, Y+5	; 0x05
    13bc:	2a e0       	ldi	r18, 0x0A	; 10
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	b9 01       	movw	r22, r18
    13c2:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__udivmodhi4>
    13c6:	cb 01       	movw	r24, r22
    13c8:	90 93 3d 03 	sts	0x033D, r25
    13cc:	80 93 3c 03 	sts	0x033C, r24
		tens = temp%10 + 48;
    13d0:	80 91 3c 03 	lds	r24, 0x033C
    13d4:	90 91 3d 03 	lds	r25, 0x033D
    13d8:	2a e0       	ldi	r18, 0x0A	; 10
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	b9 01       	movw	r22, r18
    13de:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__udivmodhi4>
    13e2:	c0 96       	adiw	r24, 0x30	; 48
    13e4:	90 93 41 03 	sts	0x0341, r25
    13e8:	80 93 40 03 	sts	0x0340, r24
		lcd_wr_char(tens);
    13ec:	80 91 40 03 	lds	r24, 0x0340
    13f0:	90 91 41 03 	lds	r25, 0x0341
    13f4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	19 f0       	breq	.+6      	; 0x140c <lcd_print+0x182>
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 f4       	brne	.+36     	; 0x1430 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	2a e0       	ldi	r18, 0x0A	; 10
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	b9 01       	movw	r22, r18
    1416:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__udivmodhi4>
    141a:	c0 96       	adiw	r24, 0x30	; 48
    141c:	90 93 49 03 	sts	0x0349, r25
    1420:	80 93 48 03 	sts	0x0348, r24
		lcd_wr_char(unit);
    1424:	80 91 48 03 	lds	r24, 0x0348
    1428:	90 91 49 03 	lds	r25, 0x0349
    142c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	if(digits>5)
    1430:	8e 81       	ldd	r24, Y+6	; 0x06
    1432:	9f 81       	ldd	r25, Y+7	; 0x07
    1434:	86 30       	cpi	r24, 0x06	; 6
    1436:	91 05       	cpc	r25, r1
    1438:	1c f0       	brlt	.+6      	; 0x1440 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    143a:	85 e4       	ldi	r24, 0x45	; 69
    143c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	
}
    1440:	27 96       	adiw	r28, 0x07	; 7
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <timer1_init>:
int zleft=0;zright=0,zldiff=0,zrdiff=0,rad,mode=0;
int flagm3=0;

//config
void timer1_init(void)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
 	TCCR1B = 0x00; 				//stop
    145a:	e1 e8       	ldi	r30, 0x81	; 129
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	10 82       	st	Z, r1
 	TCNT1H = 0xFC; 				//Counter high value to which OCR1xH value is to be compared with
    1460:	e5 e8       	ldi	r30, 0x85	; 133
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	8c ef       	ldi	r24, 0xFC	; 252
    1466:	80 83       	st	Z, r24
 	TCNT1L = 0x01;				//Counter low value to which OCR1xH value is to be compared with
    1468:	e4 e8       	ldi	r30, 0x84	; 132
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	80 83       	st	Z, r24
 	OCR1AH = 0x03;				//Output compare eegister high value for servo 1
    1470:	e9 e8       	ldi	r30, 0x89	; 137
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	83 e0       	ldi	r24, 0x03	; 3
    1476:	80 83       	st	Z, r24
 	OCR1AL = 0xFF;				//Output Compare Register low Value For servo 1
    1478:	e8 e8       	ldi	r30, 0x88	; 136
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	8f ef       	ldi	r24, 0xFF	; 255
    147e:	80 83       	st	Z, r24
 	OCR1BH = 0x03;				//Output compare eegister high value for servo 2
    1480:	eb e8       	ldi	r30, 0x8B	; 139
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	83 e0       	ldi	r24, 0x03	; 3
    1486:	80 83       	st	Z, r24
 	OCR1BL = 0xFF;				//Output Compare Register low Value For servo 2
    1488:	ea e8       	ldi	r30, 0x8A	; 138
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	8f ef       	ldi	r24, 0xFF	; 255
    148e:	80 83       	st	Z, r24
 	OCR1CH = 0x03;				///Output compare eegister high value for servo 3
    1490:	ed e8       	ldi	r30, 0x8D	; 141
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	83 e0       	ldi	r24, 0x03	; 3
    1496:	80 83       	st	Z, r24
 	OCR1CL = 0xFF;				//Output Compare Register low Value For servo 3
    1498:	ec e8       	ldi	r30, 0x8C	; 140
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	8f ef       	ldi	r24, 0xFF	; 255
    149e:	80 83       	st	Z, r24
 	ICR1H  = 0x03;	
    14a0:	e7 e8       	ldi	r30, 0x87	; 135
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	83 e0       	ldi	r24, 0x03	; 3
    14a6:	80 83       	st	Z, r24
 	ICR1L  = 0xFF;
    14a8:	e6 e8       	ldi	r30, 0x86	; 134
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	8f ef       	ldi	r24, 0xFF	; 255
    14ae:	80 83       	st	Z, r24
 	TCCR1A = 0xAB; 				/*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    14b0:	e0 e8       	ldi	r30, 0x80	; 128
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	8b ea       	ldi	r24, 0xAB	; 171
    14b6:	80 83       	st	Z, r24
 									For Overriding normal port functionalit to OCRnA outputs.
				  				{WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 	TCCR1C = 0x00;
    14b8:	e2 e8       	ldi	r30, 0x82	; 130
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	10 82       	st	Z, r1
 	TCCR1B = 0x0C; 				//WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    14be:	e1 e8       	ldi	r30, 0x81	; 129
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	8c e0       	ldi	r24, 0x0C	; 12
    14c4:	80 83       	st	Z, r24
}
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <timer5_init>:


void timer5_init()
{
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00; //Stop
    14d4:	e1 e2       	ldi	r30, 0x21	; 33
    14d6:	f1 e0       	ldi	r31, 0x01	; 1
    14d8:	10 82       	st	Z, r1
	TCNT5H = 0xFF; //Ctr higher 8-bit val to which OCR5xH value is cmp with
    14da:	e5 e2       	ldi	r30, 0x25	; 37
    14dc:	f1 e0       	ldi	r31, 0x01	; 1
    14de:	8f ef       	ldi	r24, 0xFF	; 255
    14e0:	80 83       	st	Z, r24
	TCNT5L = 0x01; //Ctr lower 8-bit val to which OCR5xH value is cmp with
    14e2:	e4 e2       	ldi	r30, 0x24	; 36
    14e4:	f1 e0       	ldi	r31, 0x01	; 1
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	80 83       	st	Z, r24
	OCR5AH = 0x00; //Output compare register high value for Left Motor
    14ea:	e9 e2       	ldi	r30, 0x29	; 41
    14ec:	f1 e0       	ldi	r31, 0x01	; 1
    14ee:	10 82       	st	Z, r1
	OCR5AL = 0xFF; //Output compare register low value for Left Motor
    14f0:	e8 e2       	ldi	r30, 0x28	; 40
    14f2:	f1 e0       	ldi	r31, 0x01	; 1
    14f4:	8f ef       	ldi	r24, 0xFF	; 255
    14f6:	80 83       	st	Z, r24
	OCR5BH = 0x00; //Output compare register high value for Right Motor
    14f8:	eb e2       	ldi	r30, 0x2B	; 43
    14fa:	f1 e0       	ldi	r31, 0x01	; 1
    14fc:	10 82       	st	Z, r1
	OCR5BL = 0xFF; //Output compare register low value for Right Motor
    14fe:	ea e2       	ldi	r30, 0x2A	; 42
    1500:	f1 e0       	ldi	r31, 0x01	; 1
    1502:	8f ef       	ldi	r24, 0xFF	; 255
    1504:	80 83       	st	Z, r24
	OCR5CH = 0x00; //Output compare register high value for Motor C1
    1506:	ed e2       	ldi	r30, 0x2D	; 45
    1508:	f1 e0       	ldi	r31, 0x01	; 1
    150a:	10 82       	st	Z, r1
	OCR5CL = 0xFF; //Output compare register low value for Motor C1
    150c:	ec e2       	ldi	r30, 0x2C	; 44
    150e:	f1 e0       	ldi	r31, 0x01	; 1
    1510:	8f ef       	ldi	r24, 0xFF	; 255
    1512:	80 83       	st	Z, r24
	TCCR5A = 0xA9; /*{COM5A1=1,COM5A0=0;COM5B1=1,COM5B0=0;COM5C1=1
    1514:	e0 e2       	ldi	r30, 0x20	; 32
    1516:	f1 e0       	ldi	r31, 0x01	; 1
    1518:	89 ea       	ldi	r24, 0xA9	; 169
    151a:	80 83       	st	Z, r24
					COM5C0=0}
					For Overriding normal port functionality to OCRnA outputs.
					{WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for
					selecting FAST PWM 8-bit Mode*/
	TCCR5B = 0x0B; //WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    151c:	e1 e2       	ldi	r30, 0x21	; 33
    151e:	f1 e0       	ldi	r31, 0x01	; 1
    1520:	8b e0       	ldi	r24, 0x0B	; 11
    1522:	80 83       	st	Z, r24
}
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <velocity>:



void velocity (unsigned char left_motor,unsigned char right_motor)
{
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	0f 92       	push	r0
    1530:	0f 92       	push	r0
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    153a:	e8 e2       	ldi	r30, 0x28	; 40
    153c:	f1 e0       	ldi	r31, 0x01	; 1
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    1542:	ea e2       	ldi	r30, 0x2A	; 42
    1544:	f1 e0       	ldi	r31, 0x01	; 1
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	80 83       	st	Z, r24
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <servo1_pin_config>:


void servo1_pin_config (void)
{
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
 	DDRB  = DDRB | 0x20;  		//making PORTB 5 pin output
    155c:	a4 e2       	ldi	r26, 0x24	; 36
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e4 e2       	ldi	r30, 0x24	; 36
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	80 62       	ori	r24, 0x20	; 32
    1568:	8c 93       	st	X, r24
 	PORTB = PORTB | 0x20; 		//setting PORTB 5 pin to logic 1
    156a:	a5 e2       	ldi	r26, 0x25	; 37
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e5 e2       	ldi	r30, 0x25	; 37
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	80 62       	ori	r24, 0x20	; 32
    1576:	8c 93       	st	X, r24
}
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
 	DDRB  = DDRB | 0x40;  		//making PORTB 6 pin output
    1586:	a4 e2       	ldi	r26, 0x24	; 36
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e4 e2       	ldi	r30, 0x24	; 36
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	80 64       	ori	r24, 0x40	; 64
    1592:	8c 93       	st	X, r24
 	PORTB = PORTB | 0x40; 		//setting PORTB 6 pin to logic 1
    1594:	a5 e2       	ldi	r26, 0x25	; 37
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e5 e2       	ldi	r30, 0x25	; 37
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	80 64       	ori	r24, 0x40	; 64
    15a0:	8c 93       	st	X, r24
}
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <servo3_pin_config>:



//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
 	DDRB  = DDRB | 0x80;  		//making PORTB 7 pin output
    15b0:	a4 e2       	ldi	r26, 0x24	; 36
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e4 e2       	ldi	r30, 0x24	; 36
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	80 68       	ori	r24, 0x80	; 128
    15bc:	8c 93       	st	X, r24
 	PORTB = PORTB | 0x80; 		//setting PORTB 7 pin to logic 1
    15be:	a5 e2       	ldi	r26, 0x25	; 37
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e5 e2       	ldi	r30, 0x25	; 37
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	80 68       	ori	r24, 0x80	; 128
    15ca:	8c 93       	st	X, r24
}
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <port_init_servo>:

//Initialize the ports
void port_init_servo(void)
{ 
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
	servo1_pin_config(); 		//Configure PORTB 5 pin for servo motor 1 operation
    15da:	0e 94 aa 0a 	call	0x1554	; 0x1554 <servo1_pin_config>
 	servo2_pin_config(); 		//Configure PORTB 6 pin for servo motor 2 operation 
    15de:	0e 94 bf 0a 	call	0x157e	; 0x157e <servo2_pin_config>
 	servo3_pin_config(); 		//Configure PORTB 7 pin for servo motor 3 operation  
    15e2:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <servo3_pin_config>
}
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <servo_1>:


//Function to rotate Servo 1 by a specified angle in the multiples of 2.25 degrees
void servo_1(unsigned char degrees)  
{
    15ec:	0f 93       	push	r16
    15ee:	1f 93       	push	r17
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <servo_1+0xa>
    15f6:	0f 92       	push	r0
    15f8:	0f 92       	push	r0
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	8d 83       	std	Y+5, r24	; 0x05
 	float PositionPanServo = 0;
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	a0 e0       	ldi	r26, 0x00	; 0
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	9a 83       	std	Y+2, r25	; 0x02
    160c:	ab 83       	std	Y+3, r26	; 0x03
    160e:	bc 83       	std	Y+4, r27	; 0x04
 	PositionPanServo = ((float)degrees / 2.25) + 21.0;
    1610:	8d 81       	ldd	r24, Y+5	; 0x05
    1612:	88 2f       	mov	r24, r24
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	a0 e0       	ldi	r26, 0x00	; 0
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	bc 01       	movw	r22, r24
    161c:	cd 01       	movw	r24, r26
    161e:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <__floatunsisf>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	bc 01       	movw	r22, r24
    1628:	cd 01       	movw	r24, r26
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 e1       	ldi	r20, 0x10	; 16
    1630:	50 e4       	ldi	r21, 0x40	; 64
    1632:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__divsf3>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	bc 01       	movw	r22, r24
    163c:	cd 01       	movw	r24, r26
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	48 ea       	ldi	r20, 0xA8	; 168
    1644:	51 e4       	ldi	r21, 0x41	; 65
    1646:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__addsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	9a 83       	std	Y+2, r25	; 0x02
    1652:	ab 83       	std	Y+3, r26	; 0x03
    1654:	bc 83       	std	Y+4, r27	; 0x04
 	OCR1AH = 0x00;
    1656:	e9 e8       	ldi	r30, 0x89	; 137
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	10 82       	st	Z, r1
 	OCR1AL = (unsigned char) PositionPanServo;
    165c:	08 e8       	ldi	r16, 0x88	; 136
    165e:	10 e0       	ldi	r17, 0x00	; 0
    1660:	69 81       	ldd	r22, Y+1	; 0x01
    1662:	7a 81       	ldd	r23, Y+2	; 0x02
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	f8 01       	movw	r30, r16
    1672:	80 83       	st	Z, r24
}
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	08 95       	ret

00001688 <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 2.25 degrees
void servo_2(unsigned char degrees)
{
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	00 d0       	rcall	.+0      	; 0x1692 <servo_2+0xa>
    1692:	0f 92       	push	r0
    1694:	0f 92       	push	r0
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	8d 83       	std	Y+5, r24	; 0x05
 	float PositionTiltServo = 0;
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	a0 e0       	ldi	r26, 0x00	; 0
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	9a 83       	std	Y+2, r25	; 0x02
    16a8:	ab 83       	std	Y+3, r26	; 0x03
    16aa:	bc 83       	std	Y+4, r27	; 0x04
 	PositionTiltServo = ((float)degrees / 2.25) + 21.0;
    16ac:	8d 81       	ldd	r24, Y+5	; 0x05
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	a0 e0       	ldi	r26, 0x00	; 0
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	bc 01       	movw	r22, r24
    16b8:	cd 01       	movw	r24, r26
    16ba:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <__floatunsisf>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	bc 01       	movw	r22, r24
    16c4:	cd 01       	movw	r24, r26
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e1       	ldi	r20, 0x10	; 16
    16cc:	50 e4       	ldi	r21, 0x40	; 64
    16ce:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__divsf3>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	bc 01       	movw	r22, r24
    16d8:	cd 01       	movw	r24, r26
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	48 ea       	ldi	r20, 0xA8	; 168
    16e0:	51 e4       	ldi	r21, 0x41	; 65
    16e2:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__addsf3>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	9a 83       	std	Y+2, r25	; 0x02
    16ee:	ab 83       	std	Y+3, r26	; 0x03
    16f0:	bc 83       	std	Y+4, r27	; 0x04
 	OCR1BH = 0x00;
    16f2:	eb e8       	ldi	r30, 0x8B	; 139
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	10 82       	st	Z, r1
 	OCR1BL = (unsigned char) PositionTiltServo;
    16f8:	0a e8       	ldi	r16, 0x8A	; 138
    16fa:	10 e0       	ldi	r17, 0x00	; 0
    16fc:	69 81       	ldd	r22, Y+1	; 0x01
    16fe:	7a 81       	ldd	r23, Y+2	; 0x02
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	9c 81       	ldd	r25, Y+4	; 0x04
    1704:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	f8 01       	movw	r30, r16
    170e:	80 83       	st	Z, r24
}
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	08 95       	ret

00001724 <servo_3>:


//Function to rotate Servo 3 by a specified angle in the multiples of 2.25 degrees
void servo_3(unsigned char degrees)
{
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	00 d0       	rcall	.+0      	; 0x172e <servo_3+0xa>
    172e:	0f 92       	push	r0
    1730:	0f 92       	push	r0
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	8d 83       	std	Y+5, r24	; 0x05
 	float PositionTiltServo = 0;
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	a0 e0       	ldi	r26, 0x00	; 0
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	9a 83       	std	Y+2, r25	; 0x02
    1744:	ab 83       	std	Y+3, r26	; 0x03
    1746:	bc 83       	std	Y+4, r27	; 0x04
 	PositionTiltServo = ((float)degrees / 2.25) + 21.0;
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	88 2f       	mov	r24, r24
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	a0 e0       	ldi	r26, 0x00	; 0
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	bc 01       	movw	r22, r24
    1754:	cd 01       	movw	r24, r26
    1756:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <__floatunsisf>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	bc 01       	movw	r22, r24
    1760:	cd 01       	movw	r24, r26
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e1       	ldi	r20, 0x10	; 16
    1768:	50 e4       	ldi	r21, 0x40	; 64
    176a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__divsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	bc 01       	movw	r22, r24
    1774:	cd 01       	movw	r24, r26
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	48 ea       	ldi	r20, 0xA8	; 168
    177c:	51 e4       	ldi	r21, 0x41	; 65
    177e:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__addsf3>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	9a 83       	std	Y+2, r25	; 0x02
    178a:	ab 83       	std	Y+3, r26	; 0x03
    178c:	bc 83       	std	Y+4, r27	; 0x04
 	OCR1CH = 0x00;
    178e:	ed e8       	ldi	r30, 0x8D	; 141
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	10 82       	st	Z, r1
 	OCR1CL = (unsigned char) PositionTiltServo;
    1794:	0c e8       	ldi	r16, 0x8C	; 140
    1796:	10 e0       	ldi	r17, 0x00	; 0
    1798:	69 81       	ldd	r22, Y+1	; 0x01
    179a:	7a 81       	ldd	r23, Y+2	; 0x02
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	9c 81       	ldd	r25, Y+4	; 0x04
    17a0:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	f8 01       	movw	r30, r16
    17aa:	80 83       	st	Z, r24
}
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	08 95       	ret

000017c0 <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle 
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) 	//makes servo 1 free rotating
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
 	OCR1AH = 0x03; 
    17c8:	e9 e8       	ldi	r30, 0x89	; 137
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	83 e0       	ldi	r24, 0x03	; 3
    17ce:	80 83       	st	Z, r24
 	OCR1AL = 0xFF; 			//Servo 1 off
    17d0:	e8 e8       	ldi	r30, 0x88	; 136
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	8f ef       	ldi	r24, 0xFF	; 255
    17d6:	80 83       	st	Z, r24
}
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <servo_2_free>:

void servo_2_free (void) 	//makes servo 2 free rotating
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
 	OCR1BH = 0x03;
    17e6:	eb e8       	ldi	r30, 0x8B	; 139
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	83 e0       	ldi	r24, 0x03	; 3
    17ec:	80 83       	st	Z, r24
 	OCR1BL = 0xFF; 			//Servo 2 off
    17ee:	ea e8       	ldi	r30, 0x8A	; 138
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	8f ef       	ldi	r24, 0xFF	; 255
    17f4:	80 83       	st	Z, r24
}
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <servo_3_free>:

void servo_3_free (void) 	//makes servo 3 free rotating
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
 	OCR1CH = 0x03;
    1804:	ed e8       	ldi	r30, 0x8D	; 141
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	83 e0       	ldi	r24, 0x03	; 3
    180a:	80 83       	st	Z, r24
 	OCR1CL = 0xFF; 			//Servo 3 off
    180c:	ec e8       	ldi	r30, 0x8C	; 140
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	8f ef       	ldi	r24, 0xFF	; 255
    1812:	80 83       	st	Z, r24
}
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <lcd_port_config>:

void lcd_port_config (void)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    1822:	a7 e2       	ldi	r26, 0x27	; 39
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e7 e2       	ldi	r30, 0x27	; 39
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	87 6f       	ori	r24, 0xF7	; 247
    182e:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1830:	a8 e2       	ldi	r26, 0x28	; 40
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e8 e2       	ldi	r30, 0x28	; 40
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	80 78       	andi	r24, 0x80	; 128
    183c:	8c 93       	st	X, r24
}
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <buzzer_pin_config>:

void buzzer_pin_config (void)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
    184c:	a7 e2       	ldi	r26, 0x27	; 39
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e7 e2       	ldi	r30, 0x27	; 39
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	88 60       	ori	r24, 0x08	; 8
    1858:	8c 93       	st	X, r24
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    185a:	a8 e2       	ldi	r26, 0x28	; 40
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e8 e2       	ldi	r30, 0x28	; 40
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	87 7f       	andi	r24, 0xF7	; 247
    1866:	8c 93       	st	X, r24
}
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    1876:	ad e2       	ldi	r26, 0x2D	; 45
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	ed e2       	ldi	r30, 0x2D	; 45
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8f 7e       	andi	r24, 0xEF	; 239
    1882:	8c 93       	st	X, r24
 PORTE = PORTE | 0x10; //Enable internal pullup for PORTE 4 pin
    1884:	ae e2       	ldi	r26, 0x2E	; 46
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	ee e2       	ldi	r30, 0x2E	; 46
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	80 61       	ori	r24, 0x10	; 16
    1890:	8c 93       	st	X, r24
}
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    18a0:	ad e2       	ldi	r26, 0x2D	; 45
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	ed e2       	ldi	r30, 0x2D	; 45
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	8f 7d       	andi	r24, 0xDF	; 223
    18ac:	8c 93       	st	X, r24
 PORTE = PORTE | 0x20; //Enable internal pullup for PORTE 4 pin
    18ae:	ae e2       	ldi	r26, 0x2E	; 46
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	ee e2       	ldi	r30, 0x2E	; 46
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	80 62       	ori	r24, 0x20	; 32
    18ba:	8c 93       	st	X, r24
}
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <motion_pin_config>:

void motion_pin_config (void)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	0f 92       	push	r0
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    18cc:	a1 e2       	ldi	r26, 0x21	; 33
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e1 e2       	ldi	r30, 0x21	; 33
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	8f 60       	ori	r24, 0x0F	; 15
    18d8:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
    18da:	a2 e2       	ldi	r26, 0x22	; 34
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e2 e2       	ldi	r30, 0x22	; 34
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	80 7f       	andi	r24, 0xF0	; 240
    18e6:	8c 93       	st	X, r24
 DDRE = 0x0F | 0x0F;
    18e8:	ed e2       	ldi	r30, 0x2D	; 45
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	8f e0       	ldi	r24, 0x0F	; 15
    18ee:	80 83       	st	Z, r24
 PORTE = PORTE & 0x00; 
    18f0:	ee e2       	ldi	r30, 0x2E	; 46
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	ee e2       	ldi	r30, 0x2E	; 46
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	10 82       	st	Z, r1
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    18fc:	aa e0       	ldi	r26, 0x0A	; 10
    18fe:	b1 e0       	ldi	r27, 0x01	; 1
    1900:	ea e0       	ldi	r30, 0x0A	; 10
    1902:	f1 e0       	ldi	r31, 0x01	; 1
    1904:	80 81       	ld	r24, Z
    1906:	88 61       	ori	r24, 0x18	; 24
    1908:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    190a:	ab e0       	ldi	r26, 0x0B	; 11
    190c:	b1 e0       	ldi	r27, 0x01	; 1
    190e:	eb e0       	ldi	r30, 0x0B	; 11
    1910:	f1 e0       	ldi	r31, 0x01	; 1
    1912:	80 81       	ld	r24, Z
    1914:	88 61       	ori	r24, 0x18	; 24
    1916:	8c 93       	st	X, r24
}
    1918:	0f 90       	pop	r0
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <port_init>:


//Function to initialize ports
void port_init()
{
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
	
	motion_pin_config();
    1928:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <motion_pin_config>
	buzzer_pin_config();
    192c:	0e 94 22 0c 	call	0x1844	; 0x1844 <buzzer_pin_config>
	left_encoder_pin_config(); //left encoder pin config
    1930:	0e 94 37 0c 	call	0x186e	; 0x186e <left_encoder_pin_config>
	right_encoder_pin_config(); 	
    1934:	0e 94 4c 0c 	call	0x1898	; 0x1898 <right_encoder_pin_config>
	lcd_port_config();
    1938:	0e 94 0d 0c 	call	0x181a	; 0x181a <lcd_port_config>
}
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <buzzer_on>:



void buzzer_on (void)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	0f 92       	push	r0
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    194c:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    194e:	e6 e2       	ldi	r30, 0x26	; 38
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	88 60       	ori	r24, 0x08	; 8
    195a:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    195c:	e8 e2       	ldi	r30, 0x28	; 40
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	80 83       	st	Z, r24
}
    1964:	0f 90       	pop	r0
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <buzzer_off>:

void buzzer_off (void)
{
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	0f 92       	push	r0
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    1976:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    1978:	e6 e2       	ldi	r30, 0x26	; 38
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	87 7f       	andi	r24, 0xF7	; 247
    1984:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    1986:	e8 e2       	ldi	r30, 0x28	; 40
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	80 83       	st	Z, r24
}
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <uart0_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
    199e:	e1 ec       	ldi	r30, 0xC1	; 193
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    19a4:	e0 ec       	ldi	r30, 0xC0	; 192
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	10 82       	st	Z, r1
 UCSR0C = 0x06;
    19aa:	e2 ec       	ldi	r30, 0xC2	; 194
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	86 e0       	ldi	r24, 0x06	; 6
    19b0:	80 83       	st	Z, r24
 UBRR0L = 0x5F; //set baud rate lo
    19b2:	e4 ec       	ldi	r30, 0xC4	; 196
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	8f e5       	ldi	r24, 0x5F	; 95
    19b8:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
    19ba:	e5 ec       	ldi	r30, 0xC5	; 197
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	10 82       	st	Z, r1
 UCSR0B = 0x98;
    19c0:	e1 ec       	ldi	r30, 0xC1	; 193
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	88 e9       	ldi	r24, 0x98	; 152
    19c6:	80 83       	st	Z, r24
}
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init(void)
{
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
	cli();
    19d6:	f8 94       	cli
	EICRB = EICRB | 0x02;
    19d8:	aa e6       	ldi	r26, 0x6A	; 106
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	ea e6       	ldi	r30, 0x6A	; 106
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	82 60       	ori	r24, 0x02	; 2
    19e4:	8c 93       	st	X, r24
	EIMSK = EIMSK | 0x10;
    19e6:	ad e3       	ldi	r26, 0x3D	; 61
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	ed e3       	ldi	r30, 0x3D	; 61
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	80 61       	ori	r24, 0x10	; 16
    19f2:	8c 93       	st	X, r24
	sei();
    19f4:	78 94       	sei
}
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init(void)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
	cli();
    1a04:	f8 94       	cli
	EICRB = EICRB | 0x08;
    1a06:	aa e6       	ldi	r26, 0x6A	; 106
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	ea e6       	ldi	r30, 0x6A	; 106
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	88 60       	ori	r24, 0x08	; 8
    1a12:	8c 93       	st	X, r24
	EIMSK = EIMSK | 0x20;
    1a14:	ad e3       	ldi	r26, 0x3D	; 61
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	ed e3       	ldi	r30, 0x3D	; 61
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	80 62       	ori	r24, 0x20	; 32
    1a20:	8c 93       	st	X, r24
	sei();
    1a22:	78 94       	sei
}
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <get_count>:

int get_count(unsigned int angle)
{
    1a2a:	ef 92       	push	r14
    1a2c:	ff 92       	push	r15
    1a2e:	0f 93       	push	r16
    1a30:	1f 93       	push	r17
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	2c 97       	sbiw	r28, 0x0c	; 12
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
    1a46:	9c 87       	std	Y+12, r25	; 0x0c
    1a48:	8b 87       	std	Y+11, r24	; 0x0b
	float arcDist = (angle*(3.14/180)) * BotRadius; //distance travelled by the wheels = radius * angle;
    1a4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a4c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a4e:	cc 01       	movw	r24, r24
    1a50:	a0 e0       	ldi	r26, 0x00	; 0
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	bc 01       	movw	r22, r24
    1a56:	cd 01       	movw	r24, r26
    1a58:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <__floatunsisf>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	bc 01       	movw	r22, r24
    1a62:	cd 01       	movw	r24, r26
    1a64:	27 ea       	ldi	r18, 0xA7	; 167
    1a66:	37 ee       	ldi	r19, 0xE7	; 231
    1a68:	4e e8       	ldi	r20, 0x8E	; 142
    1a6a:	5c e3       	ldi	r21, 0x3C	; 60
    1a6c:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	7c 01       	movw	r14, r24
    1a76:	8d 01       	movw	r16, r26
    1a78:	80 91 00 02 	lds	r24, 0x0200
    1a7c:	90 91 01 02 	lds	r25, 0x0201
    1a80:	aa 27       	eor	r26, r26
    1a82:	97 fd       	sbrc	r25, 7
    1a84:	a0 95       	com	r26
    1a86:	ba 2f       	mov	r27, r26
    1a88:	bc 01       	movw	r22, r24
    1a8a:	cd 01       	movw	r24, r26
    1a8c:	0e 94 c7 1b 	call	0x378e	; 0x378e <__floatsisf>
    1a90:	9b 01       	movw	r18, r22
    1a92:	ac 01       	movw	r20, r24
    1a94:	c8 01       	movw	r24, r16
    1a96:	b7 01       	movw	r22, r14
    1a98:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	8f 83       	std	Y+7, r24	; 0x07
    1aa2:	98 87       	std	Y+8, r25	; 0x08
    1aa4:	a9 87       	std	Y+9, r26	; 0x09
    1aa6:	ba 87       	std	Y+10, r27	; 0x0a
	float wheelCircum = 2 * 3.14 * WheelRadius;
    1aa8:	80 91 02 02 	lds	r24, 0x0202
    1aac:	90 91 03 02 	lds	r25, 0x0203
    1ab0:	a0 91 04 02 	lds	r26, 0x0204
    1ab4:	b0 91 05 02 	lds	r27, 0x0205
    1ab8:	bc 01       	movw	r22, r24
    1aba:	cd 01       	movw	r24, r26
    1abc:	23 ec       	ldi	r18, 0xC3	; 195
    1abe:	35 ef       	ldi	r19, 0xF5	; 245
    1ac0:	48 ec       	ldi	r20, 0xC8	; 200
    1ac2:	50 e4       	ldi	r21, 0x40	; 64
    1ac4:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	8b 83       	std	Y+3, r24	; 0x03
    1ace:	9c 83       	std	Y+4, r25	; 0x04
    1ad0:	ad 83       	std	Y+5, r26	; 0x05
    1ad2:	be 83       	std	Y+6, r27	; 0x06
	int count = (30 * arcDist) / wheelCircum;
    1ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad6:	78 85       	ldd	r23, Y+8	; 0x08
    1ad8:	89 85       	ldd	r24, Y+9	; 0x09
    1ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 ef       	ldi	r20, 0xF0	; 240
    1ae2:	51 e4       	ldi	r21, 0x41	; 65
    1ae4:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	bc 01       	movw	r22, r24
    1aee:	cd 01       	movw	r24, r26
    1af0:	2b 81       	ldd	r18, Y+3	; 0x03
    1af2:	3c 81       	ldd	r19, Y+4	; 0x04
    1af4:	4d 81       	ldd	r20, Y+5	; 0x05
    1af6:	5e 81       	ldd	r21, Y+6	; 0x06
    1af8:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__divsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	0e 94 25 1c 	call	0x384a	; 0x384a <__fixsfsi>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	9a 83       	std	Y+2, r25	; 0x02
    1b0e:	89 83       	std	Y+1, r24	; 0x01
	return count;
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	9a 81       	ldd	r25, Y+2	; 0x02

}
    1b14:	2c 96       	adiw	r28, 0x0c	; 12
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	cd bf       	out	0x3d, r28	; 61
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	ff 90       	pop	r15
    1b2a:	ef 90       	pop	r14
    1b2c:	08 95       	ret

00001b2e <rotate_left_hard>:

void rotate_left_hard(unsigned int count)
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <rotate_left_hard+0x6>
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <rotate_left_hard+0x8>
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	9e 83       	std	Y+6, r25	; 0x06
    1b3c:	8d 83       	std	Y+5, r24	; 0x05
	//float ArcLength = BotRadius * angle;
	//float RequiredShaftCount = ArcLength/
	unsigned long int ReqdShaftCount = 0;
    1b3e:	19 82       	std	Y+1, r1	; 0x01
    1b40:	1a 82       	std	Y+2, r1	; 0x02
    1b42:	1b 82       	std	Y+3, r1	; 0x03
    1b44:	1c 82       	std	Y+4, r1	; 0x04
	ReqdShaftCount = (unsigned long int)count;
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4a:	cc 01       	movw	r24, r24
    1b4c:	a0 e0       	ldi	r26, 0x00	; 0
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	9a 83       	std	Y+2, r25	; 0x02
    1b54:	ab 83       	std	Y+3, r26	; 0x03
    1b56:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountLeft = ShaftCountRight = 0;
    1b58:	10 92 14 03 	sts	0x0314, r1
    1b5c:	10 92 15 03 	sts	0x0315, r1
    1b60:	10 92 16 03 	sts	0x0316, r1
    1b64:	10 92 17 03 	sts	0x0317, r1
    1b68:	80 91 14 03 	lds	r24, 0x0314
    1b6c:	90 91 15 03 	lds	r25, 0x0315
    1b70:	a0 91 16 03 	lds	r26, 0x0316
    1b74:	b0 91 17 03 	lds	r27, 0x0317
    1b78:	80 93 10 03 	sts	0x0310, r24
    1b7c:	90 93 11 03 	sts	0x0311, r25
    1b80:	a0 93 12 03 	sts	0x0312, r26
    1b84:	b0 93 13 03 	sts	0x0313, r27
	PORTA = 0x05;
    1b88:	e2 e2       	ldi	r30, 0x22	; 34
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	85 e0       	ldi	r24, 0x05	; 5
    1b8e:	80 83       	st	Z, r24
	while(1){
	lcd_print(1,1,ShaftCountLeft,4);
    1b90:	80 91 10 03 	lds	r24, 0x0310
    1b94:	90 91 11 03 	lds	r25, 0x0311
    1b98:	a0 91 12 03 	lds	r26, 0x0312
    1b9c:	b0 91 13 03 	lds	r27, 0x0313
    1ba0:	9c 01       	movw	r18, r24
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	61 e0       	ldi	r22, 0x01	; 1
    1ba6:	a9 01       	movw	r20, r18
    1ba8:	24 e0       	ldi	r18, 0x04	; 4
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
		if(ShaftCountLeft > ReqdShaftCount){
    1bb0:	20 91 10 03 	lds	r18, 0x0310
    1bb4:	30 91 11 03 	lds	r19, 0x0311
    1bb8:	40 91 12 03 	lds	r20, 0x0312
    1bbc:	50 91 13 03 	lds	r21, 0x0313
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc4:	ab 81       	ldd	r26, Y+3	; 0x03
    1bc6:	bc 81       	ldd	r27, Y+4	; 0x04
    1bc8:	82 17       	cp	r24, r18
    1bca:	93 07       	cpc	r25, r19
    1bcc:	a4 07       	cpc	r26, r20
    1bce:	b5 07       	cpc	r27, r21
    1bd0:	f8 f6       	brcc	.-66     	; 0x1b90 <rotate_left_hard+0x62>
			break;
		}
	}
	PORTA=0x00;
    1bd2:	e2 e2       	ldi	r30, 0x22	; 34
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	10 82       	st	Z, r1
	flag4=0;
    1bd8:	10 92 1b 03 	sts	0x031B, r1
    1bdc:	10 92 1a 03 	sts	0x031A, r1
}
    1be0:	26 96       	adiw	r28, 0x06	; 6
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	cf 91       	pop	r28
    1bee:	df 91       	pop	r29
    1bf0:	08 95       	ret

00001bf2 <rotate_left_soft>:

void rotate_left_soft(unsigned int count)
{
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <rotate_left_soft+0x6>
    1bf8:	00 d0       	rcall	.+0      	; 0x1bfa <rotate_left_soft+0x8>
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	9e 83       	std	Y+6, r25	; 0x06
    1c00:	8d 83       	std	Y+5, r24	; 0x05
	//float ArcLength = BotRadius * angle;
	//float RequiredShaftCount = ArcLength/
	unsigned long int ReqdShaftCount = 0;
    1c02:	19 82       	std	Y+1, r1	; 0x01
    1c04:	1a 82       	std	Y+2, r1	; 0x02
    1c06:	1b 82       	std	Y+3, r1	; 0x03
    1c08:	1c 82       	std	Y+4, r1	; 0x04
	ReqdShaftCount = (unsigned long int)count;
    1c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0e:	cc 01       	movw	r24, r24
    1c10:	a0 e0       	ldi	r26, 0x00	; 0
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	9a 83       	std	Y+2, r25	; 0x02
    1c18:	ab 83       	std	Y+3, r26	; 0x03
    1c1a:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountLeft = ShaftCountRight = 0;
    1c1c:	10 92 14 03 	sts	0x0314, r1
    1c20:	10 92 15 03 	sts	0x0315, r1
    1c24:	10 92 16 03 	sts	0x0316, r1
    1c28:	10 92 17 03 	sts	0x0317, r1
    1c2c:	80 91 14 03 	lds	r24, 0x0314
    1c30:	90 91 15 03 	lds	r25, 0x0315
    1c34:	a0 91 16 03 	lds	r26, 0x0316
    1c38:	b0 91 17 03 	lds	r27, 0x0317
    1c3c:	80 93 10 03 	sts	0x0310, r24
    1c40:	90 93 11 03 	sts	0x0311, r25
    1c44:	a0 93 12 03 	sts	0x0312, r26
    1c48:	b0 93 13 03 	sts	0x0313, r27
	PORTA = 0x04;
    1c4c:	e2 e2       	ldi	r30, 0x22	; 34
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	84 e0       	ldi	r24, 0x04	; 4
    1c52:	80 83       	st	Z, r24
	while(1){
		lcd_print(1,1,angledata,4);
    1c54:	20 91 18 03 	lds	r18, 0x0318
    1c58:	30 91 19 03 	lds	r19, 0x0319
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	61 e0       	ldi	r22, 0x01	; 1
    1c60:	a9 01       	movw	r20, r18
    1c62:	24 e0       	ldi	r18, 0x04	; 4
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
		if(ShaftCountRight > ReqdShaftCount){
    1c6a:	20 91 14 03 	lds	r18, 0x0314
    1c6e:	30 91 15 03 	lds	r19, 0x0315
    1c72:	40 91 16 03 	lds	r20, 0x0316
    1c76:	50 91 17 03 	lds	r21, 0x0317
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7e:	ab 81       	ldd	r26, Y+3	; 0x03
    1c80:	bc 81       	ldd	r27, Y+4	; 0x04
    1c82:	82 17       	cp	r24, r18
    1c84:	93 07       	cpc	r25, r19
    1c86:	a4 07       	cpc	r26, r20
    1c88:	b5 07       	cpc	r27, r21
    1c8a:	20 f7       	brcc	.-56     	; 0x1c54 <rotate_left_soft+0x62>
			break;
		}
	}
	PORTA=0x00;
    1c8c:	e2 e2       	ldi	r30, 0x22	; 34
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	10 82       	st	Z, r1
	flag7=0;
    1c92:	10 92 1f 03 	sts	0x031F, r1
    1c96:	10 92 1e 03 	sts	0x031E, r1
}
    1c9a:	26 96       	adiw	r28, 0x06	; 6
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <rotate_right_hard>:

void rotate_right_hard(unsigned int count)
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <rotate_right_hard+0x6>
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <rotate_right_hard+0x8>
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	9e 83       	std	Y+6, r25	; 0x06
    1cba:	8d 83       	std	Y+5, r24	; 0x05
	//float ArcLength = BotRadius * angle;
	//float RequiredShaftCount = ArcLength/
	unsigned long int ReqdShaftCount = 0;
    1cbc:	19 82       	std	Y+1, r1	; 0x01
    1cbe:	1a 82       	std	Y+2, r1	; 0x02
    1cc0:	1b 82       	std	Y+3, r1	; 0x03
    1cc2:	1c 82       	std	Y+4, r1	; 0x04
	ReqdShaftCount = (unsigned long int) count;
    1cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc8:	cc 01       	movw	r24, r24
    1cca:	a0 e0       	ldi	r26, 0x00	; 0
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	9a 83       	std	Y+2, r25	; 0x02
    1cd2:	ab 83       	std	Y+3, r26	; 0x03
    1cd4:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountLeft = ShaftCountRight = 0;
    1cd6:	10 92 14 03 	sts	0x0314, r1
    1cda:	10 92 15 03 	sts	0x0315, r1
    1cde:	10 92 16 03 	sts	0x0316, r1
    1ce2:	10 92 17 03 	sts	0x0317, r1
    1ce6:	80 91 14 03 	lds	r24, 0x0314
    1cea:	90 91 15 03 	lds	r25, 0x0315
    1cee:	a0 91 16 03 	lds	r26, 0x0316
    1cf2:	b0 91 17 03 	lds	r27, 0x0317
    1cf6:	80 93 10 03 	sts	0x0310, r24
    1cfa:	90 93 11 03 	sts	0x0311, r25
    1cfe:	a0 93 12 03 	sts	0x0312, r26
    1d02:	b0 93 13 03 	sts	0x0313, r27
	PORTA = 0x0A;
    1d06:	e2 e2       	ldi	r30, 0x22	; 34
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	8a e0       	ldi	r24, 0x0A	; 10
    1d0c:	80 83       	st	Z, r24
	while(1){
	lcd_print(1,1,angledata,4);
    1d0e:	20 91 18 03 	lds	r18, 0x0318
    1d12:	30 91 19 03 	lds	r19, 0x0319
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	61 e0       	ldi	r22, 0x01	; 1
    1d1a:	a9 01       	movw	r20, r18
    1d1c:	24 e0       	ldi	r18, 0x04	; 4
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
		if(ShaftCountLeft > ReqdShaftCount){
    1d24:	20 91 10 03 	lds	r18, 0x0310
    1d28:	30 91 11 03 	lds	r19, 0x0311
    1d2c:	40 91 12 03 	lds	r20, 0x0312
    1d30:	50 91 13 03 	lds	r21, 0x0313
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	ab 81       	ldd	r26, Y+3	; 0x03
    1d3a:	bc 81       	ldd	r27, Y+4	; 0x04
    1d3c:	82 17       	cp	r24, r18
    1d3e:	93 07       	cpc	r25, r19
    1d40:	a4 07       	cpc	r26, r20
    1d42:	b5 07       	cpc	r27, r21
    1d44:	20 f7       	brcc	.-56     	; 0x1d0e <rotate_right_hard+0x62>
			break;
		}
	}
		PORTA=0x00;
    1d46:	e2 e2       	ldi	r30, 0x22	; 34
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	10 82       	st	Z, r1
		flag6=0;
    1d4c:	10 92 1d 03 	sts	0x031D, r1
    1d50:	10 92 1c 03 	sts	0x031C, r1
}
    1d54:	26 96       	adiw	r28, 0x06	; 6
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	de bf       	out	0x3e, r29	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	cd bf       	out	0x3d, r28	; 61
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <rotate_right_soft>:

void rotate_right_soft(unsigned int count)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <rotate_right_soft+0x6>
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <rotate_right_soft+0x8>
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    1d72:	9e 83       	std	Y+6, r25	; 0x06
    1d74:	8d 83       	std	Y+5, r24	; 0x05
	//float ArcLength = BotRadius * angle;
	//float RequiredShaftCount = ArcLength/
	unsigned long int ReqdShaftCount = 0;
    1d76:	19 82       	std	Y+1, r1	; 0x01
    1d78:	1a 82       	std	Y+2, r1	; 0x02
    1d7a:	1b 82       	std	Y+3, r1	; 0x03
    1d7c:	1c 82       	std	Y+4, r1	; 0x04
	ReqdShaftCount = (unsigned long int)count;
    1d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d80:	9e 81       	ldd	r25, Y+6	; 0x06
    1d82:	cc 01       	movw	r24, r24
    1d84:	a0 e0       	ldi	r26, 0x00	; 0
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	89 83       	std	Y+1, r24	; 0x01
    1d8a:	9a 83       	std	Y+2, r25	; 0x02
    1d8c:	ab 83       	std	Y+3, r26	; 0x03
    1d8e:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountLeft = ShaftCountRight = 0;
    1d90:	10 92 14 03 	sts	0x0314, r1
    1d94:	10 92 15 03 	sts	0x0315, r1
    1d98:	10 92 16 03 	sts	0x0316, r1
    1d9c:	10 92 17 03 	sts	0x0317, r1
    1da0:	80 91 14 03 	lds	r24, 0x0314
    1da4:	90 91 15 03 	lds	r25, 0x0315
    1da8:	a0 91 16 03 	lds	r26, 0x0316
    1dac:	b0 91 17 03 	lds	r27, 0x0317
    1db0:	80 93 10 03 	sts	0x0310, r24
    1db4:	90 93 11 03 	sts	0x0311, r25
    1db8:	a0 93 12 03 	sts	0x0312, r26
    1dbc:	b0 93 13 03 	sts	0x0313, r27
	PORTA = 0x02;
    1dc0:	e2 e2       	ldi	r30, 0x22	; 34
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
    1dc6:	80 83       	st	Z, r24
	while(1){
		lcd_print(1,1,ShaftCountLeft,4);
    1dc8:	80 91 10 03 	lds	r24, 0x0310
    1dcc:	90 91 11 03 	lds	r25, 0x0311
    1dd0:	a0 91 12 03 	lds	r26, 0x0312
    1dd4:	b0 91 13 03 	lds	r27, 0x0313
    1dd8:	9c 01       	movw	r18, r24
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	61 e0       	ldi	r22, 0x01	; 1
    1dde:	a9 01       	movw	r20, r18
    1de0:	24 e0       	ldi	r18, 0x04	; 4
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
		if(ShaftCountLeft > ReqdShaftCount){
    1de8:	20 91 10 03 	lds	r18, 0x0310
    1dec:	30 91 11 03 	lds	r19, 0x0311
    1df0:	40 91 12 03 	lds	r20, 0x0312
    1df4:	50 91 13 03 	lds	r21, 0x0313
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfc:	ab 81       	ldd	r26, Y+3	; 0x03
    1dfe:	bc 81       	ldd	r27, Y+4	; 0x04
    1e00:	82 17       	cp	r24, r18
    1e02:	93 07       	cpc	r25, r19
    1e04:	a4 07       	cpc	r26, r20
    1e06:	b5 07       	cpc	r27, r21
    1e08:	f8 f6       	brcc	.-66     	; 0x1dc8 <rotate_right_soft+0x62>
			break;
		}
	}
	PORTA=0x00;
    1e0a:	e2 e2       	ldi	r30, 0x22	; 34
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	10 82       	st	Z, r1
//	flag9=0;
}
    1e10:	26 96       	adiw	r28, 0x06	; 6
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	f8 94       	cli
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <move>:




void move(){
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	66 97       	sbiw	r28, 0x16	; 22
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	de bf       	out	0x3e, r29	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	cd bf       	out	0x3d, r28	; 61
	zrdiff-=10;
    1e36:	80 91 34 03 	lds	r24, 0x0334
    1e3a:	90 91 35 03 	lds	r25, 0x0335
    1e3e:	0a 97       	sbiw	r24, 0x0a	; 10
    1e40:	90 93 35 03 	sts	0x0335, r25
    1e44:	80 93 34 03 	sts	0x0334, r24
	zldiff-=10;
    1e48:	80 91 32 03 	lds	r24, 0x0332
    1e4c:	90 91 33 03 	lds	r25, 0x0333
    1e50:	0a 97       	sbiw	r24, 0x0a	; 10
    1e52:	90 93 33 03 	sts	0x0333, r25
    1e56:	80 93 32 03 	sts	0x0332, r24
	if(zrdiff==0 && zldiff ==0){
    1e5a:	80 91 34 03 	lds	r24, 0x0334
    1e5e:	90 91 35 03 	lds	r25, 0x0335
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	71 f4       	brne	.+28     	; 0x1e82 <move+0x60>
    1e66:	80 91 32 03 	lds	r24, 0x0332
    1e6a:	90 91 33 03 	lds	r25, 0x0333
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	41 f4       	brne	.+16     	; 0x1e82 <move+0x60>
		flagset=0;
    1e72:	10 92 29 03 	sts	0x0329, r1
    1e76:	10 92 28 03 	sts	0x0328, r1
		PORTA=0x00;
    1e7a:	e2 e2       	ldi	r30, 0x22	; 34
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	10 82       	st	Z, r1
    1e80:	75 c3       	rjmp	.+1770   	; 0x256c <__stack+0x36d>
		return;
	}
	if(zrdiff>65)zrdiff=(65-zrdiff);
    1e82:	80 91 34 03 	lds	r24, 0x0334
    1e86:	90 91 35 03 	lds	r25, 0x0335
    1e8a:	82 34       	cpi	r24, 0x42	; 66
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	74 f0       	brlt	.+28     	; 0x1eac <move+0x8a>
    1e90:	80 91 34 03 	lds	r24, 0x0334
    1e94:	90 91 35 03 	lds	r25, 0x0335
    1e98:	21 e4       	ldi	r18, 0x41	; 65
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	a9 01       	movw	r20, r18
    1e9e:	48 1b       	sub	r20, r24
    1ea0:	59 0b       	sbc	r21, r25
    1ea2:	ca 01       	movw	r24, r20
    1ea4:	90 93 35 03 	sts	0x0335, r25
    1ea8:	80 93 34 03 	sts	0x0334, r24
	if(zldiff>65)zldiff=(65-zldiff);
    1eac:	80 91 32 03 	lds	r24, 0x0332
    1eb0:	90 91 33 03 	lds	r25, 0x0333
    1eb4:	82 34       	cpi	r24, 0x42	; 66
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	74 f0       	brlt	.+28     	; 0x1ed6 <move+0xb4>
    1eba:	80 91 32 03 	lds	r24, 0x0332
    1ebe:	90 91 33 03 	lds	r25, 0x0333
    1ec2:	21 e4       	ldi	r18, 0x41	; 65
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	a9 01       	movw	r20, r18
    1ec8:	48 1b       	sub	r20, r24
    1eca:	59 0b       	sbc	r21, r25
    1ecc:	ca 01       	movw	r24, r20
    1ece:	90 93 33 03 	sts	0x0333, r25
    1ed2:	80 93 32 03 	sts	0x0332, r24
	zrdiff=3*zrdiff;
    1ed6:	20 91 34 03 	lds	r18, 0x0334
    1eda:	30 91 35 03 	lds	r19, 0x0335
    1ede:	c9 01       	movw	r24, r18
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	82 0f       	add	r24, r18
    1ee6:	93 1f       	adc	r25, r19
    1ee8:	90 93 35 03 	sts	0x0335, r25
    1eec:	80 93 34 03 	sts	0x0334, r24
	zldiff=3*zldiff;
    1ef0:	20 91 32 03 	lds	r18, 0x0332
    1ef4:	30 91 33 03 	lds	r19, 0x0333
    1ef8:	c9 01       	movw	r24, r18
    1efa:	88 0f       	add	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	82 0f       	add	r24, r18
    1f00:	93 1f       	adc	r25, r19
    1f02:	90 93 33 03 	sts	0x0333, r25
    1f06:	80 93 32 03 	sts	0x0332, r24
	int zmin;
	
	if(zrdiff>=0 && zldiff>=0){
    1f0a:	80 91 34 03 	lds	r24, 0x0334
    1f0e:	90 91 35 03 	lds	r25, 0x0335
    1f12:	99 23       	and	r25, r25
    1f14:	0c f4       	brge	.+2      	; 0x1f18 <move+0xf6>
    1f16:	c1 c0       	rjmp	.+386    	; 0x209a <move+0x278>
    1f18:	80 91 32 03 	lds	r24, 0x0332
    1f1c:	90 91 33 03 	lds	r25, 0x0333
    1f20:	99 23       	and	r25, r25
    1f22:	0c f4       	brge	.+2      	; 0x1f26 <move+0x104>
    1f24:	ba c0       	rjmp	.+372    	; 0x209a <move+0x278>
		PORTA=0x06;//both forward
    1f26:	e2 e2       	ldi	r30, 0x22	; 34
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	86 e0       	ldi	r24, 0x06	; 6
    1f2c:	80 83       	st	Z, r24
		zmin=zrdiff<zldiff?zrdiff:zldiff;
    1f2e:	80 91 32 03 	lds	r24, 0x0332
    1f32:	90 91 33 03 	lds	r25, 0x0333
    1f36:	20 91 34 03 	lds	r18, 0x0334
    1f3a:	30 91 35 03 	lds	r19, 0x0335
    1f3e:	3a 87       	std	Y+10, r19	; 0x0a
    1f40:	29 87       	std	Y+9, r18	; 0x09
    1f42:	9c 87       	std	Y+12, r25	; 0x0c
    1f44:	8b 87       	std	Y+11, r24	; 0x0b
    1f46:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f48:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f4a:	89 85       	ldd	r24, Y+9	; 0x09
    1f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4e:	84 17       	cp	r24, r20
    1f50:	95 07       	cpc	r25, r21
    1f52:	24 f4       	brge	.+8      	; 0x1f5c <move+0x13a>
    1f54:	29 85       	ldd	r18, Y+9	; 0x09
    1f56:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f58:	3c 87       	std	Y+12, r19	; 0x0c
    1f5a:	2b 87       	std	Y+11, r18	; 0x0b
    1f5c:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f5e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f60:	5a 83       	std	Y+2, r21	; 0x02
    1f62:	49 83       	std	Y+1, r20	; 0x01
		ShaftCountLeft=0;
    1f64:	10 92 10 03 	sts	0x0310, r1
    1f68:	10 92 11 03 	sts	0x0311, r1
    1f6c:	10 92 12 03 	sts	0x0312, r1
    1f70:	10 92 13 03 	sts	0x0313, r1
		while(1){
		//	lcd_print(1,1,ShaftCountLeft,4);
			if(ShaftCountLeft > zmin)
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	9a 81       	ldd	r25, Y+2	; 0x02
    1f78:	9c 01       	movw	r18, r24
    1f7a:	44 27       	eor	r20, r20
    1f7c:	37 fd       	sbrc	r19, 7
    1f7e:	40 95       	com	r20
    1f80:	54 2f       	mov	r21, r20
    1f82:	80 91 10 03 	lds	r24, 0x0310
    1f86:	90 91 11 03 	lds	r25, 0x0311
    1f8a:	a0 91 12 03 	lds	r26, 0x0312
    1f8e:	b0 91 13 03 	lds	r27, 0x0313
    1f92:	28 17       	cp	r18, r24
    1f94:	39 07       	cpc	r19, r25
    1f96:	4a 07       	cpc	r20, r26
    1f98:	5b 07       	cpc	r21, r27
    1f9a:	60 f7       	brcc	.-40     	; 0x1f74 <move+0x152>
				break;
		}
		if(zldiff<zrdiff){
    1f9c:	20 91 32 03 	lds	r18, 0x0332
    1fa0:	30 91 33 03 	lds	r19, 0x0333
    1fa4:	80 91 34 03 	lds	r24, 0x0334
    1fa8:	90 91 35 03 	lds	r25, 0x0335
    1fac:	28 17       	cp	r18, r24
    1fae:	39 07       	cpc	r19, r25
    1fb0:	74 f5       	brge	.+92     	; 0x200e <move+0x1ec>
			PORTA=0x04;//soft left
    1fb2:	e2 e2       	ldi	r30, 0x22	; 34
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	84 e0       	ldi	r24, 0x04	; 4
    1fb8:	80 83       	st	Z, r24
			zmin=zrdiff-zldiff;
    1fba:	20 91 34 03 	lds	r18, 0x0334
    1fbe:	30 91 35 03 	lds	r19, 0x0335
    1fc2:	80 91 32 03 	lds	r24, 0x0332
    1fc6:	90 91 33 03 	lds	r25, 0x0333
    1fca:	a9 01       	movw	r20, r18
    1fcc:	48 1b       	sub	r20, r24
    1fce:	59 0b       	sbc	r21, r25
    1fd0:	ca 01       	movw	r24, r20
    1fd2:	9a 83       	std	Y+2, r25	; 0x02
    1fd4:	89 83       	std	Y+1, r24	; 0x01
			ShaftCountRight=0;
    1fd6:	10 92 14 03 	sts	0x0314, r1
    1fda:	10 92 15 03 	sts	0x0315, r1
    1fde:	10 92 16 03 	sts	0x0316, r1
    1fe2:	10 92 17 03 	sts	0x0317, r1
			while(1){
			//lcd_print(1,1,ShaftCountLeft,4);		
			if(ShaftCountRight > zmin)
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fea:	9c 01       	movw	r18, r24
    1fec:	44 27       	eor	r20, r20
    1fee:	37 fd       	sbrc	r19, 7
    1ff0:	40 95       	com	r20
    1ff2:	54 2f       	mov	r21, r20
    1ff4:	80 91 14 03 	lds	r24, 0x0314
    1ff8:	90 91 15 03 	lds	r25, 0x0315
    1ffc:	a0 91 16 03 	lds	r26, 0x0316
    2000:	b0 91 17 03 	lds	r27, 0x0317
    2004:	28 17       	cp	r18, r24
    2006:	39 07       	cpc	r19, r25
    2008:	4a 07       	cpc	r20, r26
    200a:	5b 07       	cpc	r21, r27
    200c:	60 f7       	brcc	.-40     	; 0x1fe6 <move+0x1c4>
				break;
		}
		}
		if(zldiff>zrdiff){
    200e:	20 91 32 03 	lds	r18, 0x0332
    2012:	30 91 33 03 	lds	r19, 0x0333
    2016:	80 91 34 03 	lds	r24, 0x0334
    201a:	90 91 35 03 	lds	r25, 0x0335
    201e:	82 17       	cp	r24, r18
    2020:	93 07       	cpc	r25, r19
    2022:	0c f0       	brlt	.+2      	; 0x2026 <move+0x204>
    2024:	9c c2       	rjmp	.+1336   	; 0x255e <__stack+0x35f>
			PORTA=0x02;//soft right
    2026:	e2 e2       	ldi	r30, 0x22	; 34
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	82 e0       	ldi	r24, 0x02	; 2
    202c:	80 83       	st	Z, r24
			zmin=-zrdiff+zldiff;
    202e:	20 91 32 03 	lds	r18, 0x0332
    2032:	30 91 33 03 	lds	r19, 0x0333
    2036:	80 91 34 03 	lds	r24, 0x0334
    203a:	90 91 35 03 	lds	r25, 0x0335
    203e:	a9 01       	movw	r20, r18
    2040:	48 1b       	sub	r20, r24
    2042:	59 0b       	sbc	r21, r25
    2044:	ca 01       	movw	r24, r20
    2046:	9a 83       	std	Y+2, r25	; 0x02
    2048:	89 83       	std	Y+1, r24	; 0x01
			ShaftCountLeft=0;
    204a:	10 92 10 03 	sts	0x0310, r1
    204e:	10 92 11 03 	sts	0x0311, r1
    2052:	10 92 12 03 	sts	0x0312, r1
    2056:	10 92 13 03 	sts	0x0313, r1
			lcd_print(1,12,(char)zmin,3);		
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	28 2f       	mov	r18, r24
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	6c e0       	ldi	r22, 0x0C	; 12
    2064:	a9 01       	movw	r20, r18
    2066:	23 e0       	ldi	r18, 0x03	; 3
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
			while(1){
			if(ShaftCountLeft > zmin)
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	9a 81       	ldd	r25, Y+2	; 0x02
    2072:	9c 01       	movw	r18, r24
    2074:	44 27       	eor	r20, r20
    2076:	37 fd       	sbrc	r19, 7
    2078:	40 95       	com	r20
    207a:	54 2f       	mov	r21, r20
    207c:	80 91 10 03 	lds	r24, 0x0310
    2080:	90 91 11 03 	lds	r25, 0x0311
    2084:	a0 91 12 03 	lds	r26, 0x0312
    2088:	b0 91 13 03 	lds	r27, 0x0313
    208c:	28 17       	cp	r18, r24
    208e:	39 07       	cpc	r19, r25
    2090:	4a 07       	cpc	r20, r26
    2092:	5b 07       	cpc	r21, r27
    2094:	08 f4       	brcc	.+2      	; 0x2098 <move+0x276>
    2096:	63 c2       	rjmp	.+1222   	; 0x255e <__stack+0x35f>
    2098:	ea cf       	rjmp	.-44     	; 0x206e <move+0x24c>
				break;
		}
		}

	}
	else if(zrdiff<=0 && zldiff<=0){
    209a:	80 91 34 03 	lds	r24, 0x0334
    209e:	90 91 35 03 	lds	r25, 0x0335
    20a2:	18 16       	cp	r1, r24
    20a4:	19 06       	cpc	r1, r25
    20a6:	0c f4       	brge	.+2      	; 0x20aa <move+0x288>
    20a8:	b5 c0       	rjmp	.+362    	; 0x2214 <__stack+0x15>
    20aa:	80 91 32 03 	lds	r24, 0x0332
    20ae:	90 91 33 03 	lds	r25, 0x0333
    20b2:	18 16       	cp	r1, r24
    20b4:	19 06       	cpc	r1, r25
    20b6:	0c f4       	brge	.+2      	; 0x20ba <move+0x298>
    20b8:	ad c0       	rjmp	.+346    	; 0x2214 <__stack+0x15>
		PORTA=0x09;//port for backward
    20ba:	e2 e2       	ldi	r30, 0x22	; 34
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	89 e0       	ldi	r24, 0x09	; 9
    20c0:	80 83       	st	Z, r24
		zmin= zrdiff>zldiff? zrdiff:zldiff;
    20c2:	80 91 32 03 	lds	r24, 0x0332
    20c6:	90 91 33 03 	lds	r25, 0x0333
    20ca:	20 91 34 03 	lds	r18, 0x0334
    20ce:	30 91 35 03 	lds	r19, 0x0335
    20d2:	38 87       	std	Y+8, r19	; 0x08
    20d4:	2f 83       	std	Y+7, r18	; 0x07
    20d6:	9e 87       	std	Y+14, r25	; 0x0e
    20d8:	8d 87       	std	Y+13, r24	; 0x0d
    20da:	4d 85       	ldd	r20, Y+13	; 0x0d
    20dc:	5e 85       	ldd	r21, Y+14	; 0x0e
    20de:	8f 81       	ldd	r24, Y+7	; 0x07
    20e0:	98 85       	ldd	r25, Y+8	; 0x08
    20e2:	48 17       	cp	r20, r24
    20e4:	59 07       	cpc	r21, r25
    20e6:	24 f4       	brge	.+8      	; 0x20f0 <move+0x2ce>
    20e8:	2f 81       	ldd	r18, Y+7	; 0x07
    20ea:	38 85       	ldd	r19, Y+8	; 0x08
    20ec:	3e 87       	std	Y+14, r19	; 0x0e
    20ee:	2d 87       	std	Y+13, r18	; 0x0d
    20f0:	4d 85       	ldd	r20, Y+13	; 0x0d
    20f2:	5e 85       	ldd	r21, Y+14	; 0x0e
    20f4:	5a 83       	std	Y+2, r21	; 0x02
    20f6:	49 83       	std	Y+1, r20	; 0x01
		zmin=-zmin;
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	9a 81       	ldd	r25, Y+2	; 0x02
    20fc:	90 95       	com	r25
    20fe:	81 95       	neg	r24
    2100:	9f 4f       	sbci	r25, 0xFF	; 255
    2102:	9a 83       	std	Y+2, r25	; 0x02
    2104:	89 83       	std	Y+1, r24	; 0x01
		ShaftCountLeft=0;
    2106:	10 92 10 03 	sts	0x0310, r1
    210a:	10 92 11 03 	sts	0x0311, r1
    210e:	10 92 12 03 	sts	0x0312, r1
    2112:	10 92 13 03 	sts	0x0313, r1
		//lcd_print(1,12,ShaftCountLeft,4);			
		while(1){
			//
			if(ShaftCountLeft > zmin)
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	9a 81       	ldd	r25, Y+2	; 0x02
    211a:	9c 01       	movw	r18, r24
    211c:	44 27       	eor	r20, r20
    211e:	37 fd       	sbrc	r19, 7
    2120:	40 95       	com	r20
    2122:	54 2f       	mov	r21, r20
    2124:	80 91 10 03 	lds	r24, 0x0310
    2128:	90 91 11 03 	lds	r25, 0x0311
    212c:	a0 91 12 03 	lds	r26, 0x0312
    2130:	b0 91 13 03 	lds	r27, 0x0313
    2134:	28 17       	cp	r18, r24
    2136:	39 07       	cpc	r19, r25
    2138:	4a 07       	cpc	r20, r26
    213a:	5b 07       	cpc	r21, r27
    213c:	60 f7       	brcc	.-40     	; 0x2116 <move+0x2f4>
				break;
		}
		if(zldiff>zrdiff){
    213e:	20 91 32 03 	lds	r18, 0x0332
    2142:	30 91 33 03 	lds	r19, 0x0333
    2146:	80 91 34 03 	lds	r24, 0x0334
    214a:	90 91 35 03 	lds	r25, 0x0335
    214e:	82 17       	cp	r24, r18
    2150:	93 07       	cpc	r25, r19
    2152:	84 f5       	brge	.+96     	; 0x21b4 <move+0x392>
			PORTA=0x08;//rotate clockwise right
    2154:	e2 e2       	ldi	r30, 0x22	; 34
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	88 e0       	ldi	r24, 0x08	; 8
    215a:	80 83       	st	Z, r24
			zmin=zldiff-zrdiff;
    215c:	20 91 32 03 	lds	r18, 0x0332
    2160:	30 91 33 03 	lds	r19, 0x0333
    2164:	80 91 34 03 	lds	r24, 0x0334
    2168:	90 91 35 03 	lds	r25, 0x0335
    216c:	a9 01       	movw	r20, r18
    216e:	48 1b       	sub	r20, r24
    2170:	59 0b       	sbc	r21, r25
    2172:	ca 01       	movw	r24, r20
    2174:	9a 83       	std	Y+2, r25	; 0x02
    2176:	89 83       	std	Y+1, r24	; 0x01
			ShaftCountRight=0;
    2178:	10 92 14 03 	sts	0x0314, r1
    217c:	10 92 15 03 	sts	0x0315, r1
    2180:	10 92 16 03 	sts	0x0316, r1
    2184:	10 92 17 03 	sts	0x0317, r1
			while(1){
				//lcd_print(1,1,ShaftCountRight,4);			
				if(ShaftCountRight > zmin)
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	9a 81       	ldd	r25, Y+2	; 0x02
    218c:	9c 01       	movw	r18, r24
    218e:	44 27       	eor	r20, r20
    2190:	37 fd       	sbrc	r19, 7
    2192:	40 95       	com	r20
    2194:	54 2f       	mov	r21, r20
    2196:	80 91 14 03 	lds	r24, 0x0314
    219a:	90 91 15 03 	lds	r25, 0x0315
    219e:	a0 91 16 03 	lds	r26, 0x0316
    21a2:	b0 91 17 03 	lds	r27, 0x0317
    21a6:	28 17       	cp	r18, r24
    21a8:	39 07       	cpc	r19, r25
    21aa:	4a 07       	cpc	r20, r26
    21ac:	5b 07       	cpc	r21, r27
    21ae:	08 f4       	brcc	.+2      	; 0x21b2 <move+0x390>
    21b0:	d6 c1       	rjmp	.+940    	; 0x255e <__stack+0x35f>
    21b2:	ea cf       	rjmp	.-44     	; 0x2188 <move+0x366>
					break;
			}
		}
		else{
			PORTA=0x01;//rotate anticlockwise right
    21b4:	e2 e2       	ldi	r30, 0x22	; 34
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	80 83       	st	Z, r24
			zmin=zrdiff-zldiff;
    21bc:	20 91 34 03 	lds	r18, 0x0334
    21c0:	30 91 35 03 	lds	r19, 0x0335
    21c4:	80 91 32 03 	lds	r24, 0x0332
    21c8:	90 91 33 03 	lds	r25, 0x0333
    21cc:	a9 01       	movw	r20, r18
    21ce:	48 1b       	sub	r20, r24
    21d0:	59 0b       	sbc	r21, r25
    21d2:	ca 01       	movw	r24, r20
    21d4:	9a 83       	std	Y+2, r25	; 0x02
    21d6:	89 83       	std	Y+1, r24	; 0x01
			ShaftCountLeft=0;
    21d8:	10 92 10 03 	sts	0x0310, r1
    21dc:	10 92 11 03 	sts	0x0311, r1
    21e0:	10 92 12 03 	sts	0x0312, r1
    21e4:	10 92 13 03 	sts	0x0313, r1
			while(1){
				//lcd_print(1,1,ShaftCountLeft,4);			
				if(ShaftCountLeft > zmin)
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	9a 81       	ldd	r25, Y+2	; 0x02
    21ec:	9c 01       	movw	r18, r24
    21ee:	44 27       	eor	r20, r20
    21f0:	37 fd       	sbrc	r19, 7
    21f2:	40 95       	com	r20
    21f4:	54 2f       	mov	r21, r20
    21f6:	80 91 10 03 	lds	r24, 0x0310
    21fa:	90 91 11 03 	lds	r25, 0x0311
    21fe:	a0 91 12 03 	lds	r26, 0x0312
    2202:	b0 91 13 03 	lds	r27, 0x0313
    2206:	28 17       	cp	r18, r24
    2208:	39 07       	cpc	r19, r25
    220a:	4a 07       	cpc	r20, r26
    220c:	5b 07       	cpc	r21, r27
    220e:	08 f4       	brcc	.+2      	; 0x2212 <__stack+0x13>
    2210:	a6 c1       	rjmp	.+844    	; 0x255e <__stack+0x35f>
    2212:	ea cf       	rjmp	.-44     	; 0x21e8 <move+0x3c6>
			}
		}
		
	}
	
	else if(zrdiff>=0 && zldiff<=0){
    2214:	80 91 34 03 	lds	r24, 0x0334
    2218:	90 91 35 03 	lds	r25, 0x0335
    221c:	99 23       	and	r25, r25
    221e:	0c f4       	brge	.+2      	; 0x2222 <__stack+0x23>
    2220:	cd c0       	rjmp	.+410    	; 0x23bc <__stack+0x1bd>
    2222:	80 91 32 03 	lds	r24, 0x0332
    2226:	90 91 33 03 	lds	r25, 0x0333
    222a:	18 16       	cp	r1, r24
    222c:	19 06       	cpc	r1, r25
    222e:	0c f4       	brge	.+2      	; 0x2232 <__stack+0x33>
    2230:	c5 c0       	rjmp	.+394    	; 0x23bc <__stack+0x1bd>
		PORTA=0x05;//hard left
    2232:	e2 e2       	ldi	r30, 0x22	; 34
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	85 e0       	ldi	r24, 0x05	; 5
    2238:	80 83       	st	Z, r24
		zldiff=-zldiff;
    223a:	80 91 32 03 	lds	r24, 0x0332
    223e:	90 91 33 03 	lds	r25, 0x0333
    2242:	90 95       	com	r25
    2244:	81 95       	neg	r24
    2246:	9f 4f       	sbci	r25, 0xFF	; 255
    2248:	90 93 33 03 	sts	0x0333, r25
    224c:	80 93 32 03 	sts	0x0332, r24
		zmin= zrdiff>zldiff ? zldiff:zrdiff;
    2250:	80 91 34 03 	lds	r24, 0x0334
    2254:	90 91 35 03 	lds	r25, 0x0335
    2258:	20 91 32 03 	lds	r18, 0x0332
    225c:	30 91 33 03 	lds	r19, 0x0333
    2260:	3e 83       	std	Y+6, r19	; 0x06
    2262:	2d 83       	std	Y+5, r18	; 0x05
    2264:	98 8b       	std	Y+16, r25	; 0x10
    2266:	8f 87       	std	Y+15, r24	; 0x0f
    2268:	4f 85       	ldd	r20, Y+15	; 0x0f
    226a:	58 89       	ldd	r21, Y+16	; 0x10
    226c:	8d 81       	ldd	r24, Y+5	; 0x05
    226e:	9e 81       	ldd	r25, Y+6	; 0x06
    2270:	84 17       	cp	r24, r20
    2272:	95 07       	cpc	r25, r21
    2274:	24 f4       	brge	.+8      	; 0x227e <__stack+0x7f>
    2276:	2d 81       	ldd	r18, Y+5	; 0x05
    2278:	3e 81       	ldd	r19, Y+6	; 0x06
    227a:	38 8b       	std	Y+16, r19	; 0x10
    227c:	2f 87       	std	Y+15, r18	; 0x0f
    227e:	4f 85       	ldd	r20, Y+15	; 0x0f
    2280:	58 89       	ldd	r21, Y+16	; 0x10
    2282:	5a 83       	std	Y+2, r21	; 0x02
    2284:	49 83       	std	Y+1, r20	; 0x01
		zmin=zmin/2;
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	9a 81       	ldd	r25, Y+2	; 0x02
    228a:	9a 8b       	std	Y+18, r25	; 0x12
    228c:	89 8b       	std	Y+17, r24	; 0x11
    228e:	89 89       	ldd	r24, Y+17	; 0x11
    2290:	9a 89       	ldd	r25, Y+18	; 0x12
    2292:	99 23       	and	r25, r25
    2294:	34 f4       	brge	.+12     	; 0x22a2 <__stack+0xa3>
    2296:	29 89       	ldd	r18, Y+17	; 0x11
    2298:	3a 89       	ldd	r19, Y+18	; 0x12
    229a:	2f 5f       	subi	r18, 0xFF	; 255
    229c:	3f 4f       	sbci	r19, 0xFF	; 255
    229e:	3a 8b       	std	Y+18, r19	; 0x12
    22a0:	29 8b       	std	Y+17, r18	; 0x11
    22a2:	89 89       	ldd	r24, Y+17	; 0x11
    22a4:	9a 89       	ldd	r25, Y+18	; 0x12
    22a6:	95 95       	asr	r25
    22a8:	87 95       	ror	r24
    22aa:	9a 83       	std	Y+2, r25	; 0x02
    22ac:	89 83       	std	Y+1, r24	; 0x01
		ShaftCountLeft=0;
    22ae:	10 92 10 03 	sts	0x0310, r1
    22b2:	10 92 11 03 	sts	0x0311, r1
    22b6:	10 92 12 03 	sts	0x0312, r1
    22ba:	10 92 13 03 	sts	0x0313, r1
		while(1){
			//lcd_print(1,1,ShaftCountLeft,4);			
			if(ShaftCountLeft > zmin)
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	9a 81       	ldd	r25, Y+2	; 0x02
    22c2:	9c 01       	movw	r18, r24
    22c4:	44 27       	eor	r20, r20
    22c6:	37 fd       	sbrc	r19, 7
    22c8:	40 95       	com	r20
    22ca:	54 2f       	mov	r21, r20
    22cc:	80 91 10 03 	lds	r24, 0x0310
    22d0:	90 91 11 03 	lds	r25, 0x0311
    22d4:	a0 91 12 03 	lds	r26, 0x0312
    22d8:	b0 91 13 03 	lds	r27, 0x0313
    22dc:	28 17       	cp	r18, r24
    22de:	39 07       	cpc	r19, r25
    22e0:	4a 07       	cpc	r20, r26
    22e2:	5b 07       	cpc	r21, r27
    22e4:	60 f7       	brcc	.-40     	; 0x22be <__stack+0xbf>
				break;
		}
		if(zldiff<zrdiff){
    22e6:	20 91 32 03 	lds	r18, 0x0332
    22ea:	30 91 33 03 	lds	r19, 0x0333
    22ee:	80 91 34 03 	lds	r24, 0x0334
    22f2:	90 91 35 03 	lds	r25, 0x0335
    22f6:	28 17       	cp	r18, r24
    22f8:	39 07       	cpc	r19, r25
    22fa:	84 f5       	brge	.+96     	; 0x235c <__stack+0x15d>
			PORTA=0x04;//soft left rotate
    22fc:	e2 e2       	ldi	r30, 0x22	; 34
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	84 e0       	ldi	r24, 0x04	; 4
    2302:	80 83       	st	Z, r24
			zmin=zrdiff-zldiff;
    2304:	20 91 34 03 	lds	r18, 0x0334
    2308:	30 91 35 03 	lds	r19, 0x0335
    230c:	80 91 32 03 	lds	r24, 0x0332
    2310:	90 91 33 03 	lds	r25, 0x0333
    2314:	a9 01       	movw	r20, r18
    2316:	48 1b       	sub	r20, r24
    2318:	59 0b       	sbc	r21, r25
    231a:	ca 01       	movw	r24, r20
    231c:	9a 83       	std	Y+2, r25	; 0x02
    231e:	89 83       	std	Y+1, r24	; 0x01
			ShaftCountRight=0;
    2320:	10 92 14 03 	sts	0x0314, r1
    2324:	10 92 15 03 	sts	0x0315, r1
    2328:	10 92 16 03 	sts	0x0316, r1
    232c:	10 92 17 03 	sts	0x0317, r1
			while(1){
				//lcd_print(1,1,ShaftCountLeft,4);			
				if(ShaftCountRight > zmin)
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	9a 81       	ldd	r25, Y+2	; 0x02
    2334:	9c 01       	movw	r18, r24
    2336:	44 27       	eor	r20, r20
    2338:	37 fd       	sbrc	r19, 7
    233a:	40 95       	com	r20
    233c:	54 2f       	mov	r21, r20
    233e:	80 91 14 03 	lds	r24, 0x0314
    2342:	90 91 15 03 	lds	r25, 0x0315
    2346:	a0 91 16 03 	lds	r26, 0x0316
    234a:	b0 91 17 03 	lds	r27, 0x0317
    234e:	28 17       	cp	r18, r24
    2350:	39 07       	cpc	r19, r25
    2352:	4a 07       	cpc	r20, r26
    2354:	5b 07       	cpc	r21, r27
    2356:	08 f4       	brcc	.+2      	; 0x235a <__stack+0x15b>
    2358:	02 c1       	rjmp	.+516    	; 0x255e <__stack+0x35f>
    235a:	ea cf       	rjmp	.-44     	; 0x2330 <__stack+0x131>
					break;
			}
		}
		else{
			PORTA=0x01;//soft right anticlockwise
    235c:	e2 e2       	ldi	r30, 0x22	; 34
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	80 83       	st	Z, r24
			zmin=zldiff-zrdiff;
    2364:	20 91 32 03 	lds	r18, 0x0332
    2368:	30 91 33 03 	lds	r19, 0x0333
    236c:	80 91 34 03 	lds	r24, 0x0334
    2370:	90 91 35 03 	lds	r25, 0x0335
    2374:	a9 01       	movw	r20, r18
    2376:	48 1b       	sub	r20, r24
    2378:	59 0b       	sbc	r21, r25
    237a:	ca 01       	movw	r24, r20
    237c:	9a 83       	std	Y+2, r25	; 0x02
    237e:	89 83       	std	Y+1, r24	; 0x01
			ShaftCountLeft=0;
    2380:	10 92 10 03 	sts	0x0310, r1
    2384:	10 92 11 03 	sts	0x0311, r1
    2388:	10 92 12 03 	sts	0x0312, r1
    238c:	10 92 13 03 	sts	0x0313, r1
			while(1){
				//lcd_print(1,1,ShaftCountLeft,4);			
				if(ShaftCountLeft > zmin)
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	9a 81       	ldd	r25, Y+2	; 0x02
    2394:	9c 01       	movw	r18, r24
    2396:	44 27       	eor	r20, r20
    2398:	37 fd       	sbrc	r19, 7
    239a:	40 95       	com	r20
    239c:	54 2f       	mov	r21, r20
    239e:	80 91 10 03 	lds	r24, 0x0310
    23a2:	90 91 11 03 	lds	r25, 0x0311
    23a6:	a0 91 12 03 	lds	r26, 0x0312
    23aa:	b0 91 13 03 	lds	r27, 0x0313
    23ae:	28 17       	cp	r18, r24
    23b0:	39 07       	cpc	r19, r25
    23b2:	4a 07       	cpc	r20, r26
    23b4:	5b 07       	cpc	r21, r27
    23b6:	08 f4       	brcc	.+2      	; 0x23ba <__stack+0x1bb>
    23b8:	d2 c0       	rjmp	.+420    	; 0x255e <__stack+0x35f>
    23ba:	ea cf       	rjmp	.-44     	; 0x2390 <__stack+0x191>
					break;
			}
		}
	}
	else if(zrdiff<=0 && zldiff>=0){
    23bc:	80 91 34 03 	lds	r24, 0x0334
    23c0:	90 91 35 03 	lds	r25, 0x0335
    23c4:	18 16       	cp	r1, r24
    23c6:	19 06       	cpc	r1, r25
    23c8:	0c f4       	brge	.+2      	; 0x23cc <__stack+0x1cd>
    23ca:	c9 c0       	rjmp	.+402    	; 0x255e <__stack+0x35f>
    23cc:	80 91 32 03 	lds	r24, 0x0332
    23d0:	90 91 33 03 	lds	r25, 0x0333
    23d4:	99 23       	and	r25, r25
    23d6:	0c f4       	brge	.+2      	; 0x23da <__stack+0x1db>
    23d8:	c2 c0       	rjmp	.+388    	; 0x255e <__stack+0x35f>
		PORTA=0x0A;//hardright
    23da:	e2 e2       	ldi	r30, 0x22	; 34
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	8a e0       	ldi	r24, 0x0A	; 10
    23e0:	80 83       	st	Z, r24
		zrdiff=-zrdiff;
    23e2:	80 91 34 03 	lds	r24, 0x0334
    23e6:	90 91 35 03 	lds	r25, 0x0335
    23ea:	90 95       	com	r25
    23ec:	81 95       	neg	r24
    23ee:	9f 4f       	sbci	r25, 0xFF	; 255
    23f0:	90 93 35 03 	sts	0x0335, r25
    23f4:	80 93 34 03 	sts	0x0334, r24
		zmin = zldiff>zrdiff ? zrdiff:zldiff;
    23f8:	80 91 32 03 	lds	r24, 0x0332
    23fc:	90 91 33 03 	lds	r25, 0x0333
    2400:	20 91 34 03 	lds	r18, 0x0334
    2404:	30 91 35 03 	lds	r19, 0x0335
    2408:	3c 83       	std	Y+4, r19	; 0x04
    240a:	2b 83       	std	Y+3, r18	; 0x03
    240c:	9c 8b       	std	Y+20, r25	; 0x14
    240e:	8b 8b       	std	Y+19, r24	; 0x13
    2410:	4b 89       	ldd	r20, Y+19	; 0x13
    2412:	5c 89       	ldd	r21, Y+20	; 0x14
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	84 17       	cp	r24, r20
    241a:	95 07       	cpc	r25, r21
    241c:	24 f4       	brge	.+8      	; 0x2426 <__stack+0x227>
    241e:	2b 81       	ldd	r18, Y+3	; 0x03
    2420:	3c 81       	ldd	r19, Y+4	; 0x04
    2422:	3c 8b       	std	Y+20, r19	; 0x14
    2424:	2b 8b       	std	Y+19, r18	; 0x13
    2426:	4b 89       	ldd	r20, Y+19	; 0x13
    2428:	5c 89       	ldd	r21, Y+20	; 0x14
    242a:	5a 83       	std	Y+2, r21	; 0x02
    242c:	49 83       	std	Y+1, r20	; 0x01
		zmin = zmin/2;
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	9a 81       	ldd	r25, Y+2	; 0x02
    2432:	9e 8b       	std	Y+22, r25	; 0x16
    2434:	8d 8b       	std	Y+21, r24	; 0x15
    2436:	8d 89       	ldd	r24, Y+21	; 0x15
    2438:	9e 89       	ldd	r25, Y+22	; 0x16
    243a:	99 23       	and	r25, r25
    243c:	34 f4       	brge	.+12     	; 0x244a <__stack+0x24b>
    243e:	2d 89       	ldd	r18, Y+21	; 0x15
    2440:	3e 89       	ldd	r19, Y+22	; 0x16
    2442:	2f 5f       	subi	r18, 0xFF	; 255
    2444:	3f 4f       	sbci	r19, 0xFF	; 255
    2446:	3e 8b       	std	Y+22, r19	; 0x16
    2448:	2d 8b       	std	Y+21, r18	; 0x15
    244a:	8d 89       	ldd	r24, Y+21	; 0x15
    244c:	9e 89       	ldd	r25, Y+22	; 0x16
    244e:	95 95       	asr	r25
    2450:	87 95       	ror	r24
    2452:	9a 83       	std	Y+2, r25	; 0x02
    2454:	89 83       	std	Y+1, r24	; 0x01
		ShaftCountLeft=0;
    2456:	10 92 10 03 	sts	0x0310, r1
    245a:	10 92 11 03 	sts	0x0311, r1
    245e:	10 92 12 03 	sts	0x0312, r1
    2462:	10 92 13 03 	sts	0x0313, r1
		while(1){
			//lcd_print(1,1,ShaftCountLeft,4);			
			if(ShaftCountLeft > zmin)
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	9a 81       	ldd	r25, Y+2	; 0x02
    246a:	9c 01       	movw	r18, r24
    246c:	44 27       	eor	r20, r20
    246e:	37 fd       	sbrc	r19, 7
    2470:	40 95       	com	r20
    2472:	54 2f       	mov	r21, r20
    2474:	80 91 10 03 	lds	r24, 0x0310
    2478:	90 91 11 03 	lds	r25, 0x0311
    247c:	a0 91 12 03 	lds	r26, 0x0312
    2480:	b0 91 13 03 	lds	r27, 0x0313
    2484:	28 17       	cp	r18, r24
    2486:	39 07       	cpc	r19, r25
    2488:	4a 07       	cpc	r20, r26
    248a:	5b 07       	cpc	r21, r27
    248c:	60 f7       	brcc	.-40     	; 0x2466 <__stack+0x267>
				break;
		}
		if(zrdiff<zldiff){
    248e:	20 91 34 03 	lds	r18, 0x0334
    2492:	30 91 35 03 	lds	r19, 0x0335
    2496:	80 91 32 03 	lds	r24, 0x0332
    249a:	90 91 33 03 	lds	r25, 0x0333
    249e:	28 17       	cp	r18, r24
    24a0:	39 07       	cpc	r19, r25
    24a2:	7c f5       	brge	.+94     	; 0x2502 <__stack+0x303>
			PORTA=0x02;//oft right 
    24a4:	e2 e2       	ldi	r30, 0x22	; 34
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	82 e0       	ldi	r24, 0x02	; 2
    24aa:	80 83       	st	Z, r24
			zmin=zldiff-zrdiff;
    24ac:	20 91 32 03 	lds	r18, 0x0332
    24b0:	30 91 33 03 	lds	r19, 0x0333
    24b4:	80 91 34 03 	lds	r24, 0x0334
    24b8:	90 91 35 03 	lds	r25, 0x0335
    24bc:	a9 01       	movw	r20, r18
    24be:	48 1b       	sub	r20, r24
    24c0:	59 0b       	sbc	r21, r25
    24c2:	ca 01       	movw	r24, r20
    24c4:	9a 83       	std	Y+2, r25	; 0x02
    24c6:	89 83       	std	Y+1, r24	; 0x01
			ShaftCountLeft=0;
    24c8:	10 92 10 03 	sts	0x0310, r1
    24cc:	10 92 11 03 	sts	0x0311, r1
    24d0:	10 92 12 03 	sts	0x0312, r1
    24d4:	10 92 13 03 	sts	0x0313, r1
			while(1){
				//lcd_print(1,1,ShaftCountLeft,4);			
				if(ShaftCountLeft > zmin)
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	9a 81       	ldd	r25, Y+2	; 0x02
    24dc:	9c 01       	movw	r18, r24
    24de:	44 27       	eor	r20, r20
    24e0:	37 fd       	sbrc	r19, 7
    24e2:	40 95       	com	r20
    24e4:	54 2f       	mov	r21, r20
    24e6:	80 91 10 03 	lds	r24, 0x0310
    24ea:	90 91 11 03 	lds	r25, 0x0311
    24ee:	a0 91 12 03 	lds	r26, 0x0312
    24f2:	b0 91 13 03 	lds	r27, 0x0313
    24f6:	28 17       	cp	r18, r24
    24f8:	39 07       	cpc	r19, r25
    24fa:	4a 07       	cpc	r20, r26
    24fc:	5b 07       	cpc	r21, r27
    24fe:	78 f1       	brcs	.+94     	; 0x255e <__stack+0x35f>
    2500:	eb cf       	rjmp	.-42     	; 0x24d8 <__stack+0x2d9>
					break;
			}
		}
		else{
			PORTA=0x08;//soft right backwards
    2502:	e2 e2       	ldi	r30, 0x22	; 34
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	88 e0       	ldi	r24, 0x08	; 8
    2508:	80 83       	st	Z, r24
			zmin=zrdiff-zldiff;
    250a:	20 91 34 03 	lds	r18, 0x0334
    250e:	30 91 35 03 	lds	r19, 0x0335
    2512:	80 91 32 03 	lds	r24, 0x0332
    2516:	90 91 33 03 	lds	r25, 0x0333
    251a:	a9 01       	movw	r20, r18
    251c:	48 1b       	sub	r20, r24
    251e:	59 0b       	sbc	r21, r25
    2520:	ca 01       	movw	r24, r20
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	89 83       	std	Y+1, r24	; 0x01
			ShaftCountRight=0;
    2526:	10 92 14 03 	sts	0x0314, r1
    252a:	10 92 15 03 	sts	0x0315, r1
    252e:	10 92 16 03 	sts	0x0316, r1
    2532:	10 92 17 03 	sts	0x0317, r1
			while(1){
				//lcd_print(1,1,ShaftCountLeft,4);			
				if(ShaftCountRight > zmin)
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	9a 81       	ldd	r25, Y+2	; 0x02
    253a:	9c 01       	movw	r18, r24
    253c:	44 27       	eor	r20, r20
    253e:	37 fd       	sbrc	r19, 7
    2540:	40 95       	com	r20
    2542:	54 2f       	mov	r21, r20
    2544:	80 91 14 03 	lds	r24, 0x0314
    2548:	90 91 15 03 	lds	r25, 0x0315
    254c:	a0 91 16 03 	lds	r26, 0x0316
    2550:	b0 91 17 03 	lds	r27, 0x0317
    2554:	28 17       	cp	r18, r24
    2556:	39 07       	cpc	r19, r25
    2558:	4a 07       	cpc	r20, r26
    255a:	5b 07       	cpc	r21, r27
    255c:	60 f7       	brcc	.-40     	; 0x2536 <__stack+0x337>
					break;
			}
		}
	}
	flagset=0;
    255e:	10 92 29 03 	sts	0x0329, r1
    2562:	10 92 28 03 	sts	0x0328, r1
	PORTA=0x00;
    2566:	e2 e2       	ldi	r30, 0x22	; 34
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	10 82       	st	Z, r1
}
    256c:	66 96       	adiw	r28, 0x16	; 22
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <__vector_5>:

ISR(INT4_vect, ISR_NOBLOCK)
{
    257e:	78 94       	sei
    2580:	1f 92       	push	r1
    2582:	0f 92       	push	r0
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	0f 92       	push	r0
    2588:	11 24       	eor	r1, r1
    258a:	8f 93       	push	r24
    258c:	9f 93       	push	r25
    258e:	af 93       	push	r26
    2590:	bf 93       	push	r27
    2592:	df 93       	push	r29
    2594:	cf 93       	push	r28
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++;
    259a:	80 91 10 03 	lds	r24, 0x0310
    259e:	90 91 11 03 	lds	r25, 0x0311
    25a2:	a0 91 12 03 	lds	r26, 0x0312
    25a6:	b0 91 13 03 	lds	r27, 0x0313
    25aa:	01 96       	adiw	r24, 0x01	; 1
    25ac:	a1 1d       	adc	r26, r1
    25ae:	b1 1d       	adc	r27, r1
    25b0:	80 93 10 03 	sts	0x0310, r24
    25b4:	90 93 11 03 	sts	0x0311, r25
    25b8:	a0 93 12 03 	sts	0x0312, r26
    25bc:	b0 93 13 03 	sts	0x0313, r27
	
}
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	bf 91       	pop	r27
    25c6:	af 91       	pop	r26
    25c8:	9f 91       	pop	r25
    25ca:	8f 91       	pop	r24
    25cc:	0f 90       	pop	r0
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	0f 90       	pop	r0
    25d2:	1f 90       	pop	r1
    25d4:	18 95       	reti

000025d6 <__vector_6>:

ISR(INT5_vect, ISR_NOBLOCK)
{
    25d6:	78 94       	sei
    25d8:	1f 92       	push	r1
    25da:	0f 92       	push	r0
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	0f 92       	push	r0
    25e0:	11 24       	eor	r1, r1
    25e2:	8f 93       	push	r24
    25e4:	9f 93       	push	r25
    25e6:	af 93       	push	r26
    25e8:	bf 93       	push	r27
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++;
    25f2:	80 91 14 03 	lds	r24, 0x0314
    25f6:	90 91 15 03 	lds	r25, 0x0315
    25fa:	a0 91 16 03 	lds	r26, 0x0316
    25fe:	b0 91 17 03 	lds	r27, 0x0317
    2602:	01 96       	adiw	r24, 0x01	; 1
    2604:	a1 1d       	adc	r26, r1
    2606:	b1 1d       	adc	r27, r1
    2608:	80 93 14 03 	sts	0x0314, r24
    260c:	90 93 15 03 	sts	0x0315, r25
    2610:	a0 93 16 03 	sts	0x0316, r26
    2614:	b0 93 17 03 	sts	0x0317, r27

}
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	bf 91       	pop	r27
    261e:	af 91       	pop	r26
    2620:	9f 91       	pop	r25
    2622:	8f 91       	pop	r24
    2624:	0f 90       	pop	r0
    2626:	0f be       	out	0x3f, r0	; 63
    2628:	0f 90       	pop	r0
    262a:	1f 90       	pop	r1
    262c:	18 95       	reti

0000262e <__vector_25>:




ISR(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
    262e:	1f 92       	push	r1
    2630:	0f 92       	push	r0
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	0f 92       	push	r0
    2636:	00 90 5b 00 	lds	r0, 0x005B
    263a:	0f 92       	push	r0
    263c:	11 24       	eor	r1, r1
    263e:	2f 93       	push	r18
    2640:	3f 93       	push	r19
    2642:	4f 93       	push	r20
    2644:	5f 93       	push	r21
    2646:	6f 93       	push	r22
    2648:	7f 93       	push	r23
    264a:	8f 93       	push	r24
    264c:	9f 93       	push	r25
    264e:	af 93       	push	r26
    2650:	bf 93       	push	r27
    2652:	ef 93       	push	r30
    2654:	ff 93       	push	r31
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable 
    265e:	e6 ec       	ldi	r30, 0xC6	; 198
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	88 2f       	mov	r24, r24
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	90 93 43 03 	sts	0x0343, r25
    266c:	80 93 42 03 	sts	0x0342, r24
	
	UDR0 = 61; 				//echo data back to PC
    2670:	e6 ec       	ldi	r30, 0xC6	; 198
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	8d e3       	ldi	r24, 0x3D	; 61
    2676:	80 83       	st	Z, r24
	lcd_print(1,1,(char)mode,4);
    2678:	80 91 36 03 	lds	r24, 0x0336
    267c:	90 91 37 03 	lds	r25, 0x0337
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	61 e0       	ldi	r22, 0x01	; 1
    2688:	a9 01       	movw	r20, r18
    268a:	24 e0       	ldi	r18, 0x04	; 4
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
	lcd_print(2,1,(char)UDR0,4);
    2692:	e6 ec       	ldi	r30, 0xC6	; 198
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	28 2f       	mov	r18, r24
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	82 e0       	ldi	r24, 0x02	; 2
    269e:	61 e0       	ldi	r22, 0x01	; 1
    26a0:	a9 01       	movw	r20, r18
    26a2:	24 e0       	ldi	r18, 0x04	; 4
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>

		if(data == 1)
    26aa:	80 91 42 03 	lds	r24, 0x0342
    26ae:	90 91 43 03 	lds	r25, 0x0343
    26b2:	81 30       	cpi	r24, 0x01	; 1
    26b4:	91 05       	cpc	r25, r1
    26b6:	39 f4       	brne	.+14     	; 0x26c6 <__vector_25+0x98>
		{
			mode = 1;		
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	90 93 37 03 	sts	0x0337, r25
    26c0:	80 93 36 03 	sts	0x0336, r24
    26c4:	b3 c1       	rjmp	.+870    	; 0x2a2c <__vector_25+0x3fe>
		}
		else if(data == 2)
    26c6:	80 91 42 03 	lds	r24, 0x0342
    26ca:	90 91 43 03 	lds	r25, 0x0343
    26ce:	82 30       	cpi	r24, 0x02	; 2
    26d0:	91 05       	cpc	r25, r1
    26d2:	79 f4       	brne	.+30     	; 0x26f2 <__vector_25+0xc4>
		{
			mode = 2;
    26d4:	82 e0       	ldi	r24, 0x02	; 2
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	90 93 37 03 	sts	0x0337, r25
    26dc:	80 93 36 03 	sts	0x0336, r24
			flag9=0;
    26e0:	10 92 21 03 	sts	0x0321, r1
    26e4:	10 92 20 03 	sts	0x0320, r1
			flagset=0;
    26e8:	10 92 29 03 	sts	0x0329, r1
    26ec:	10 92 28 03 	sts	0x0328, r1
    26f0:	9d c1       	rjmp	.+826    	; 0x2a2c <__vector_25+0x3fe>
		}
		else if(data == 3)
    26f2:	80 91 42 03 	lds	r24, 0x0342
    26f6:	90 91 43 03 	lds	r25, 0x0343
    26fa:	83 30       	cpi	r24, 0x03	; 3
    26fc:	91 05       	cpc	r25, r1
    26fe:	79 f4       	brne	.+30     	; 0x271e <__vector_25+0xf0>
		{
			mode = 3;
    2700:	83 e0       	ldi	r24, 0x03	; 3
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	90 93 37 03 	sts	0x0337, r25
    2708:	80 93 36 03 	sts	0x0336, r24
			
			flag3=0;
    270c:	10 92 23 03 	sts	0x0323, r1
    2710:	10 92 22 03 	sts	0x0322, r1
			flagm3=0;				
    2714:	10 92 39 03 	sts	0x0339, r1
    2718:	10 92 38 03 	sts	0x0338, r1
    271c:	87 c1       	rjmp	.+782    	; 0x2a2c <__vector_25+0x3fe>
		}
		else if(data == 8 && mode==1) //ASCII value of 8
    271e:	80 91 42 03 	lds	r24, 0x0342
    2722:	90 91 43 03 	lds	r25, 0x0343
    2726:	88 30       	cpi	r24, 0x08	; 8
    2728:	91 05       	cpc	r25, r1
    272a:	61 f4       	brne	.+24     	; 0x2744 <__vector_25+0x116>
    272c:	80 91 36 03 	lds	r24, 0x0336
    2730:	90 91 37 03 	lds	r25, 0x0337
    2734:	81 30       	cpi	r24, 0x01	; 1
    2736:	91 05       	cpc	r25, r1
    2738:	29 f4       	brne	.+10     	; 0x2744 <__vector_25+0x116>
		{
			PORTA=0x06;  //forward
    273a:	e2 e2       	ldi	r30, 0x22	; 34
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	86 e0       	ldi	r24, 0x06	; 6
    2740:	80 83       	st	Z, r24
    2742:	74 c1       	rjmp	.+744    	; 0x2a2c <__vector_25+0x3fe>
			//lcd_print(1,1,data,4); 
		}

		else if(data == 9 && mode==1) //ASCII value of 2
    2744:	80 91 42 03 	lds	r24, 0x0342
    2748:	90 91 43 03 	lds	r25, 0x0343
    274c:	89 30       	cpi	r24, 0x09	; 9
    274e:	91 05       	cpc	r25, r1
    2750:	61 f4       	brne	.+24     	; 0x276a <__vector_25+0x13c>
    2752:	80 91 36 03 	lds	r24, 0x0336
    2756:	90 91 37 03 	lds	r25, 0x0337
    275a:	81 30       	cpi	r24, 0x01	; 1
    275c:	91 05       	cpc	r25, r1
    275e:	29 f4       	brne	.+10     	; 0x276a <__vector_25+0x13c>
		{
			PORTA=0x09; //back
    2760:	e2 e2       	ldi	r30, 0x22	; 34
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	89 e0       	ldi	r24, 0x09	; 9
    2766:	80 83       	st	Z, r24
    2768:	61 c1       	rjmp	.+706    	; 0x2a2c <__vector_25+0x3fe>
		}

		else if(data == 5 && mode==1) //ASCII value of 5
    276a:	80 91 42 03 	lds	r24, 0x0342
    276e:	90 91 43 03 	lds	r25, 0x0343
    2772:	85 30       	cpi	r24, 0x05	; 5
    2774:	91 05       	cpc	r25, r1
    2776:	59 f4       	brne	.+22     	; 0x278e <__vector_25+0x160>
    2778:	80 91 36 03 	lds	r24, 0x0336
    277c:	90 91 37 03 	lds	r25, 0x0337
    2780:	81 30       	cpi	r24, 0x01	; 1
    2782:	91 05       	cpc	r25, r1
    2784:	21 f4       	brne	.+8      	; 0x278e <__vector_25+0x160>
		{
			PORTA=0x00; //stop
    2786:	e2 e2       	ldi	r30, 0x22	; 34
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	10 82       	st	Z, r1
    278c:	4f c1       	rjmp	.+670    	; 0x2a2c <__vector_25+0x3fe>
		}
		else if(data > 11 && data < 55 && mode==1) //ASCII value of 4
    278e:	80 91 42 03 	lds	r24, 0x0342
    2792:	90 91 43 03 	lds	r25, 0x0343
    2796:	8c 30       	cpi	r24, 0x0C	; 12
    2798:	91 05       	cpc	r25, r1
    279a:	04 f1       	brlt	.+64     	; 0x27dc <__vector_25+0x1ae>
    279c:	80 91 42 03 	lds	r24, 0x0342
    27a0:	90 91 43 03 	lds	r25, 0x0343
    27a4:	87 33       	cpi	r24, 0x37	; 55
    27a6:	91 05       	cpc	r25, r1
    27a8:	cc f4       	brge	.+50     	; 0x27dc <__vector_25+0x1ae>
    27aa:	80 91 36 03 	lds	r24, 0x0336
    27ae:	90 91 37 03 	lds	r25, 0x0337
    27b2:	81 30       	cpi	r24, 0x01	; 1
    27b4:	91 05       	cpc	r25, r1
    27b6:	91 f4       	brne	.+36     	; 0x27dc <__vector_25+0x1ae>
		{
			flag6=1;  //hard right
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	90 93 1d 03 	sts	0x031D, r25
    27c0:	80 93 1c 03 	sts	0x031C, r24
			angledata = get_count(data - 10);
    27c4:	80 91 42 03 	lds	r24, 0x0342
    27c8:	90 91 43 03 	lds	r25, 0x0343
    27cc:	0a 97       	sbiw	r24, 0x0a	; 10
    27ce:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <get_count>
    27d2:	90 93 19 03 	sts	0x0319, r25
    27d6:	80 93 18 03 	sts	0x0318, r24
    27da:	28 c1       	rjmp	.+592    	; 0x2a2c <__vector_25+0x3fe>
		}

		else if(data >= 55 && mode==1) //ASCII value of 6
    27dc:	80 91 42 03 	lds	r24, 0x0342
    27e0:	90 91 43 03 	lds	r25, 0x0343
    27e4:	87 33       	cpi	r24, 0x37	; 55
    27e6:	91 05       	cpc	r25, r1
    27e8:	cc f0       	brlt	.+50     	; 0x281c <__vector_25+0x1ee>
    27ea:	80 91 36 03 	lds	r24, 0x0336
    27ee:	90 91 37 03 	lds	r25, 0x0337
    27f2:	81 30       	cpi	r24, 0x01	; 1
    27f4:	91 05       	cpc	r25, r1
    27f6:	91 f4       	brne	.+36     	; 0x281c <__vector_25+0x1ee>
		{
			flag4=1; //hard left
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	90 93 1b 03 	sts	0x031B, r25
    2800:	80 93 1a 03 	sts	0x031A, r24
			angledata = get_count(data-55);
    2804:	80 91 42 03 	lds	r24, 0x0342
    2808:	90 91 43 03 	lds	r25, 0x0343
    280c:	c7 97       	sbiw	r24, 0x37	; 55
    280e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <get_count>
    2812:	90 93 19 03 	sts	0x0319, r25
    2816:	80 93 18 03 	sts	0x0318, r24
    281a:	08 c1       	rjmp	.+528    	; 0x2a2c <__vector_25+0x3fe>

		}
		else if( mode==3)
    281c:	80 91 36 03 	lds	r24, 0x0336
    2820:	90 91 37 03 	lds	r25, 0x0337
    2824:	83 30       	cpi	r24, 0x03	; 3
    2826:	91 05       	cpc	r25, r1
    2828:	09 f0       	breq	.+2      	; 0x282c <__vector_25+0x1fe>
    282a:	ad c0       	rjmp	.+346    	; 0x2986 <__vector_25+0x358>
		{
			
			if (flag3==1){
    282c:	80 91 22 03 	lds	r24, 0x0322
    2830:	90 91 23 03 	lds	r25, 0x0323
    2834:	81 30       	cpi	r24, 0x01	; 1
    2836:	91 05       	cpc	r25, r1
    2838:	e9 f5       	brne	.+122    	; 0x28b4 <__vector_25+0x286>
				lcd_print(2,7,(char)data,4);
    283a:	80 91 42 03 	lds	r24, 0x0342
    283e:	90 91 43 03 	lds	r25, 0x0343
    2842:	28 2f       	mov	r18, r24
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	82 e0       	ldi	r24, 0x02	; 2
    2848:	67 e0       	ldi	r22, 0x07	; 7
    284a:	a9 01       	movw	r20, r18
    284c:	24 e0       	ldi	r18, 0x04	; 4
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
				if(angle2-data>8 || angle2-data<-8){
    2854:	20 91 2a 03 	lds	r18, 0x032A
    2858:	30 91 2b 03 	lds	r19, 0x032B
    285c:	80 91 42 03 	lds	r24, 0x0342
    2860:	90 91 43 03 	lds	r25, 0x0343
    2864:	a9 01       	movw	r20, r18
    2866:	48 1b       	sub	r20, r24
    2868:	59 0b       	sbc	r21, r25
    286a:	ca 01       	movw	r24, r20
    286c:	89 30       	cpi	r24, 0x09	; 9
    286e:	91 05       	cpc	r25, r1
    2870:	74 f4       	brge	.+28     	; 0x288e <__vector_25+0x260>
    2872:	80 91 2a 03 	lds	r24, 0x032A
    2876:	90 91 2b 03 	lds	r25, 0x032B
    287a:	20 91 42 03 	lds	r18, 0x0342
    287e:	30 91 43 03 	lds	r19, 0x0343
    2882:	82 1b       	sub	r24, r18
    2884:	93 0b       	sbc	r25, r19
    2886:	5f ef       	ldi	r21, 0xFF	; 255
    2888:	88 3f       	cpi	r24, 0xF8	; 248
    288a:	95 07       	cpc	r25, r21
    288c:	74 f4       	brge	.+28     	; 0x28aa <__vector_25+0x27c>
					angle2=data;
    288e:	80 91 42 03 	lds	r24, 0x0342
    2892:	90 91 43 03 	lds	r25, 0x0343
    2896:	90 93 2b 03 	sts	0x032B, r25
    289a:	80 93 2a 03 	sts	0x032A, r24
					servo_3(data);
    289e:	80 91 42 03 	lds	r24, 0x0342
    28a2:	90 91 43 03 	lds	r25, 0x0343
    28a6:	0e 94 92 0b 	call	0x1724	; 0x1724 <servo_3>
				
				}
				flag3 = 0;
    28aa:	10 92 23 03 	sts	0x0323, r1
    28ae:	10 92 22 03 	sts	0x0322, r1
    28b2:	bc c0       	rjmp	.+376    	; 0x2a2c <__vector_25+0x3fe>
				
			}
			
			else
			{  
				if(data*2>=150) data=75;
    28b4:	80 91 42 03 	lds	r24, 0x0342
    28b8:	90 91 43 03 	lds	r25, 0x0343
    28bc:	88 0f       	add	r24, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	86 39       	cpi	r24, 0x96	; 150
    28c2:	91 05       	cpc	r25, r1
    28c4:	34 f0       	brlt	.+12     	; 0x28d2 <__vector_25+0x2a4>
    28c6:	8b e4       	ldi	r24, 0x4B	; 75
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	90 93 43 03 	sts	0x0343, r25
    28ce:	80 93 42 03 	sts	0x0342, r24
				if(data*2<=30) data=15;
    28d2:	80 91 42 03 	lds	r24, 0x0342
    28d6:	90 91 43 03 	lds	r25, 0x0343
    28da:	88 0f       	add	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	8f 31       	cpi	r24, 0x1F	; 31
    28e0:	91 05       	cpc	r25, r1
    28e2:	34 f4       	brge	.+12     	; 0x28f0 <__vector_25+0x2c2>
    28e4:	8f e0       	ldi	r24, 0x0F	; 15
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	90 93 43 03 	sts	0x0343, r25
    28ec:	80 93 42 03 	sts	0x0342, r24
				if(angle1-data*2>10 || angle1-data*2<-10){
    28f0:	80 91 42 03 	lds	r24, 0x0342
    28f4:	90 91 43 03 	lds	r25, 0x0343
    28f8:	88 0f       	add	r24, r24
    28fa:	99 1f       	adc	r25, r25
    28fc:	22 27       	eor	r18, r18
    28fe:	33 27       	eor	r19, r19
    2900:	28 1b       	sub	r18, r24
    2902:	39 0b       	sbc	r19, r25
    2904:	80 91 06 02 	lds	r24, 0x0206
    2908:	90 91 07 02 	lds	r25, 0x0207
    290c:	82 0f       	add	r24, r18
    290e:	93 1f       	adc	r25, r19
    2910:	8b 30       	cpi	r24, 0x0B	; 11
    2912:	91 05       	cpc	r25, r1
    2914:	a4 f4       	brge	.+40     	; 0x293e <__vector_25+0x310>
    2916:	80 91 42 03 	lds	r24, 0x0342
    291a:	90 91 43 03 	lds	r25, 0x0343
    291e:	88 0f       	add	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	22 27       	eor	r18, r18
    2924:	33 27       	eor	r19, r19
    2926:	28 1b       	sub	r18, r24
    2928:	39 0b       	sbc	r19, r25
    292a:	80 91 06 02 	lds	r24, 0x0206
    292e:	90 91 07 02 	lds	r25, 0x0207
    2932:	82 0f       	add	r24, r18
    2934:	93 1f       	adc	r25, r19
    2936:	2f ef       	ldi	r18, 0xFF	; 255
    2938:	86 3f       	cpi	r24, 0xF6	; 246
    293a:	92 07       	cpc	r25, r18
    293c:	ec f4       	brge	.+58     	; 0x2978 <__vector_25+0x34a>
					lcd_print(1,7,(char)data,4);
    293e:	80 91 42 03 	lds	r24, 0x0342
    2942:	90 91 43 03 	lds	r25, 0x0343
    2946:	28 2f       	mov	r18, r24
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	67 e0       	ldi	r22, 0x07	; 7
    294e:	a9 01       	movw	r20, r18
    2950:	24 e0       	ldi	r18, 0x04	; 4
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
					//angle1=2*data;
					//servo_2(0);
					angle1=data*2;
    2958:	80 91 42 03 	lds	r24, 0x0342
    295c:	90 91 43 03 	lds	r25, 0x0343
    2960:	88 0f       	add	r24, r24
    2962:	99 1f       	adc	r25, r25
    2964:	90 93 07 02 	sts	0x0207, r25
    2968:	80 93 06 02 	sts	0x0206, r24
					flagm3=1;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	90 93 39 03 	sts	0x0339, r25
    2974:	80 93 38 03 	sts	0x0338, r24
				}
				flag3 = 1;
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	90 93 23 03 	sts	0x0323, r25
    2980:	80 93 22 03 	sts	0x0322, r24
    2984:	53 c0       	rjmp	.+166    	; 0x2a2c <__vector_25+0x3fe>
			}
			
			
		}
		
		else if(mode==2) //ASCII value of 9
    2986:	80 91 36 03 	lds	r24, 0x0336
    298a:	90 91 37 03 	lds	r25, 0x0337
    298e:	82 30       	cpi	r24, 0x02	; 2
    2990:	91 05       	cpc	r25, r1
    2992:	09 f0       	breq	.+2      	; 0x2996 <__vector_25+0x368>
    2994:	43 c0       	rjmp	.+134    	; 0x2a1c <__vector_25+0x3ee>
		{
			//right

			if(flag9==1){
    2996:	80 91 20 03 	lds	r24, 0x0320
    299a:	90 91 21 03 	lds	r25, 0x0321
    299e:	81 30       	cpi	r24, 0x01	; 1
    29a0:	91 05       	cpc	r25, r1
    29a2:	01 f5       	brne	.+64     	; 0x29e4 <__vector_25+0x3b6>
				lcd_print(2,7,(char)data,4);
    29a4:	80 91 42 03 	lds	r24, 0x0342
    29a8:	90 91 43 03 	lds	r25, 0x0343
    29ac:	28 2f       	mov	r18, r24
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	82 e0       	ldi	r24, 0x02	; 2
    29b2:	67 e0       	ldi	r22, 0x07	; 7
    29b4:	a9 01       	movw	r20, r18
    29b6:	24 e0       	ldi	r18, 0x04	; 4
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
				zldiff=data;
    29be:	80 91 42 03 	lds	r24, 0x0342
    29c2:	90 91 43 03 	lds	r25, 0x0343
    29c6:	90 93 33 03 	sts	0x0333, r25
    29ca:	80 93 32 03 	sts	0x0332, r24
				flag9=0;
    29ce:	10 92 21 03 	sts	0x0321, r1
    29d2:	10 92 20 03 	sts	0x0320, r1
				flagset=1;
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	90 93 29 03 	sts	0x0329, r25
    29de:	80 93 28 03 	sts	0x0328, r24
    29e2:	24 c0       	rjmp	.+72     	; 0x2a2c <__vector_25+0x3fe>
		
			}
			else{
				lcd_print(1,7,(char)data,4);
    29e4:	80 91 42 03 	lds	r24, 0x0342
    29e8:	90 91 43 03 	lds	r25, 0x0343
    29ec:	28 2f       	mov	r18, r24
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	67 e0       	ldi	r22, 0x07	; 7
    29f4:	a9 01       	movw	r20, r18
    29f6:	24 e0       	ldi	r18, 0x04	; 4
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
				zrdiff=data;
    29fe:	80 91 42 03 	lds	r24, 0x0342
    2a02:	90 91 43 03 	lds	r25, 0x0343
    2a06:	90 93 35 03 	sts	0x0335, r25
    2a0a:	80 93 34 03 	sts	0x0334, r24
				flag9=1;
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	90 93 21 03 	sts	0x0321, r25
    2a16:	80 93 20 03 	sts	0x0320, r24
    2a1a:	08 c0       	rjmp	.+16     	; 0x2a2c <__vector_25+0x3fe>
				
			}
			//left
		}
		else{
			flagm3=0;
    2a1c:	10 92 39 03 	sts	0x0339, r1
    2a20:	10 92 38 03 	sts	0x0338, r1
			flag3=0;
    2a24:	10 92 23 03 	sts	0x0323, r1
    2a28:	10 92 22 03 	sts	0x0322, r1
		}
}
    2a2c:	cf 91       	pop	r28
    2a2e:	df 91       	pop	r29
    2a30:	ff 91       	pop	r31
    2a32:	ef 91       	pop	r30
    2a34:	bf 91       	pop	r27
    2a36:	af 91       	pop	r26
    2a38:	9f 91       	pop	r25
    2a3a:	8f 91       	pop	r24
    2a3c:	7f 91       	pop	r23
    2a3e:	6f 91       	pop	r22
    2a40:	5f 91       	pop	r21
    2a42:	4f 91       	pop	r20
    2a44:	3f 91       	pop	r19
    2a46:	2f 91       	pop	r18
    2a48:	0f 90       	pop	r0
    2a4a:	00 92 5b 00 	sts	0x005B, r0
    2a4e:	0f 90       	pop	r0
    2a50:	0f be       	out	0x3f, r0	; 63
    2a52:	0f 90       	pop	r0
    2a54:	1f 90       	pop	r1
    2a56:	18 95       	reti

00002a58 <init_devices>:


//Function To Initialize all The Devices
void init_devices()
{
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    2a60:	f8 94       	cli
 
 port_init();  //Initializes all the ports
    2a62:	0e 94 90 0c 	call	0x1920	; 0x1920 <port_init>
 uart0_init(); //Initailize UART1 for serial communiaction
    2a66:	0e 94 cb 0c 	call	0x1996	; 0x1996 <uart0_init>
 left_position_encoder_interrupt_init();
    2a6a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
    2a6e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <right_position_encoder_interrupt_init>
 port_init_servo();
    2a72:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <port_init_servo>
 timer1_init();
    2a76:	0e 94 29 0a 	call	0x1452	; 0x1452 <timer1_init>
 timer5_init();
    2a7a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <timer5_init>
 sei();   //Enables the global interrupts
    2a7e:	78 94       	sei
}
    2a80:	cf 91       	pop	r28
    2a82:	df 91       	pop	r29
    2a84:	08 95       	ret

00002a86 <main>:



//Main Function
int main(void)
{
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
    2a8e:	ea 97       	sbiw	r28, 0x3a	; 58
    2a90:	0f b6       	in	r0, 0x3f	; 63
    2a92:	f8 94       	cli
    2a94:	de bf       	out	0x3e, r29	; 62
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	cd bf       	out	0x3d, r28	; 61
	init_devices();
    2a9a:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <init_devices>
	lcd_set_4bit();
    2a9e:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
    2aa2:	0e 94 94 05 	call	0xb28	; 0xb28 <lcd_init>
	velocity(150,150);
    2aa6:	86 e9       	ldi	r24, 0x96	; 150
    2aa8:	66 e9       	ldi	r22, 0x96	; 150
    2aaa:	0e 94 95 0a 	call	0x152a	; 0x152a <velocity>
	while(1){
		if(flag4==1) {rotate_left_hard(angledata); angledata = 0;} 
    2aae:	80 91 1a 03 	lds	r24, 0x031A
    2ab2:	90 91 1b 03 	lds	r25, 0x031B
    2ab6:	81 30       	cpi	r24, 0x01	; 1
    2ab8:	91 05       	cpc	r25, r1
    2aba:	51 f4       	brne	.+20     	; 0x2ad0 <main+0x4a>
    2abc:	80 91 18 03 	lds	r24, 0x0318
    2ac0:	90 91 19 03 	lds	r25, 0x0319
    2ac4:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <rotate_left_hard>
    2ac8:	10 92 19 03 	sts	0x0319, r1
    2acc:	10 92 18 03 	sts	0x0318, r1
		if(flag6==1) {rotate_right_hard(angledata); angledata = 0;}
    2ad0:	80 91 1c 03 	lds	r24, 0x031C
    2ad4:	90 91 1d 03 	lds	r25, 0x031D
    2ad8:	81 30       	cpi	r24, 0x01	; 1
    2ada:	91 05       	cpc	r25, r1
    2adc:	51 f4       	brne	.+20     	; 0x2af2 <main+0x6c>
    2ade:	80 91 18 03 	lds	r24, 0x0318
    2ae2:	90 91 19 03 	lds	r25, 0x0319
    2ae6:	0e 94 56 0e 	call	0x1cac	; 0x1cac <rotate_right_hard>
    2aea:	10 92 19 03 	sts	0x0319, r1
    2aee:	10 92 18 03 	sts	0x0318, r1
		if(flag7==1) {rotate_left_soft(angledata); angledata = 0;}
    2af2:	80 91 1e 03 	lds	r24, 0x031E
    2af6:	90 91 1f 03 	lds	r25, 0x031F
    2afa:	81 30       	cpi	r24, 0x01	; 1
    2afc:	91 05       	cpc	r25, r1
    2afe:	51 f4       	brne	.+20     	; 0x2b14 <main+0x8e>
    2b00:	80 91 18 03 	lds	r24, 0x0318
    2b04:	90 91 19 03 	lds	r25, 0x0319
    2b08:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <rotate_left_soft>
    2b0c:	10 92 19 03 	sts	0x0319, r1
    2b10:	10 92 18 03 	sts	0x0318, r1
		if(flagset==1) {move();}
    2b14:	80 91 28 03 	lds	r24, 0x0328
    2b18:	90 91 29 03 	lds	r25, 0x0329
    2b1c:	81 30       	cpi	r24, 0x01	; 1
    2b1e:	91 05       	cpc	r25, r1
    2b20:	11 f4       	brne	.+4      	; 0x2b26 <main+0xa0>
    2b22:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <move>
		if(flagm3==1){
    2b26:	80 91 38 03 	lds	r24, 0x0338
    2b2a:	90 91 39 03 	lds	r25, 0x0339
    2b2e:	81 30       	cpi	r24, 0x01	; 1
    2b30:	91 05       	cpc	r25, r1
    2b32:	09 f0       	breq	.+2      	; 0x2b36 <main+0xb0>
    2b34:	bc cf       	rjmp	.-136    	; 0x2aae <main+0x28>
				int i;
				
					if(angle1p>angle1)
    2b36:	20 91 2c 03 	lds	r18, 0x032C
    2b3a:	30 91 2d 03 	lds	r19, 0x032D
    2b3e:	80 91 06 02 	lds	r24, 0x0206
    2b42:	90 91 07 02 	lds	r25, 0x0207
    2b46:	82 17       	cp	r24, r18
    2b48:	93 07       	cpc	r25, r19
    2b4a:	0c f0       	brlt	.+2      	; 0x2b4e <main+0xc8>
    2b4c:	04 c1       	rjmp	.+520    	; 0x2d56 <main+0x2d0>
						for(i=angle1p-1;i>=angle1;i-=4){
    2b4e:	80 91 2c 03 	lds	r24, 0x032C
    2b52:	90 91 2d 03 	lds	r25, 0x032D
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	9a af       	std	Y+58, r25	; 0x3a
    2b5a:	89 af       	std	Y+57, r24	; 0x39
    2b5c:	f1 c0       	rjmp	.+482    	; 0x2d40 <main+0x2ba>
							servo_1(i);
    2b5e:	89 ad       	ldd	r24, Y+57	; 0x39
    2b60:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <servo_1>
    2b64:	80 e0       	ldi	r24, 0x00	; 0
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	a0 e0       	ldi	r26, 0x00	; 0
    2b6a:	b0 e4       	ldi	r27, 0x40	; 64
    2b6c:	8d ab       	std	Y+53, r24	; 0x35
    2b6e:	9e ab       	std	Y+54, r25	; 0x36
    2b70:	af ab       	std	Y+55, r26	; 0x37
    2b72:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b74:	6d a9       	ldd	r22, Y+53	; 0x35
    2b76:	7e a9       	ldd	r23, Y+54	; 0x36
    2b78:	8f a9       	ldd	r24, Y+55	; 0x37
    2b7a:	98 ad       	ldd	r25, Y+56	; 0x38
    2b7c:	26 e6       	ldi	r18, 0x66	; 102
    2b7e:	36 e6       	ldi	r19, 0x66	; 102
    2b80:	46 e6       	ldi	r20, 0x66	; 102
    2b82:	55 e4       	ldi	r21, 0x45	; 69
    2b84:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	89 ab       	std	Y+49, r24	; 0x31
    2b8e:	9a ab       	std	Y+50, r25	; 0x32
    2b90:	ab ab       	std	Y+51, r26	; 0x33
    2b92:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b94:	69 a9       	ldd	r22, Y+49	; 0x31
    2b96:	7a a9       	ldd	r23, Y+50	; 0x32
    2b98:	8b a9       	ldd	r24, Y+51	; 0x33
    2b9a:	9c a9       	ldd	r25, Y+52	; 0x34
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	40 e8       	ldi	r20, 0x80	; 128
    2ba2:	5f e3       	ldi	r21, 0x3F	; 63
    2ba4:	0e 94 97 1b 	call	0x372e	; 0x372e <__ltsf2>
    2ba8:	88 23       	and	r24, r24
    2baa:	2c f4       	brge	.+10     	; 0x2bb6 <main+0x130>
		__ticks = 1;
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	98 ab       	std	Y+48, r25	; 0x30
    2bb2:	8f a7       	std	Y+47, r24	; 0x2f
    2bb4:	3f c0       	rjmp	.+126    	; 0x2c34 <main+0x1ae>
	else if (__tmp > 65535)
    2bb6:	69 a9       	ldd	r22, Y+49	; 0x31
    2bb8:	7a a9       	ldd	r23, Y+50	; 0x32
    2bba:	8b a9       	ldd	r24, Y+51	; 0x33
    2bbc:	9c a9       	ldd	r25, Y+52	; 0x34
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	3f ef       	ldi	r19, 0xFF	; 255
    2bc2:	4f e7       	ldi	r20, 0x7F	; 127
    2bc4:	57 e4       	ldi	r21, 0x47	; 71
    2bc6:	0e 94 37 1b 	call	0x366e	; 0x366e <__gtsf2>
    2bca:	18 16       	cp	r1, r24
    2bcc:	4c f5       	brge	.+82     	; 0x2c20 <main+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bce:	6d a9       	ldd	r22, Y+53	; 0x35
    2bd0:	7e a9       	ldd	r23, Y+54	; 0x36
    2bd2:	8f a9       	ldd	r24, Y+55	; 0x37
    2bd4:	98 ad       	ldd	r25, Y+56	; 0x38
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	40 e2       	ldi	r20, 0x20	; 32
    2bdc:	51 e4       	ldi	r21, 0x41	; 65
    2bde:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	bc 01       	movw	r22, r24
    2be8:	cd 01       	movw	r24, r26
    2bea:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	98 ab       	std	Y+48, r25	; 0x30
    2bf4:	8f a7       	std	Y+47, r24	; 0x2f
    2bf6:	0f c0       	rjmp	.+30     	; 0x2c16 <main+0x190>
    2bf8:	80 e7       	ldi	r24, 0x70	; 112
    2bfa:	91 e0       	ldi	r25, 0x01	; 1
    2bfc:	9e a7       	std	Y+46, r25	; 0x2e
    2bfe:	8d a7       	std	Y+45, r24	; 0x2d
    2c00:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c02:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	f1 f7       	brne	.-4      	; 0x2c04 <main+0x17e>
    2c08:	9e a7       	std	Y+46, r25	; 0x2e
    2c0a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c0e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c10:	01 97       	sbiw	r24, 0x01	; 1
    2c12:	98 ab       	std	Y+48, r25	; 0x30
    2c14:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c16:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c18:	98 a9       	ldd	r25, Y+48	; 0x30
    2c1a:	00 97       	sbiw	r24, 0x00	; 0
    2c1c:	69 f7       	brne	.-38     	; 0x2bf8 <main+0x172>
    2c1e:	14 c0       	rjmp	.+40     	; 0x2c48 <main+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c20:	69 a9       	ldd	r22, Y+49	; 0x31
    2c22:	7a a9       	ldd	r23, Y+50	; 0x32
    2c24:	8b a9       	ldd	r24, Y+51	; 0x33
    2c26:	9c a9       	ldd	r25, Y+52	; 0x34
    2c28:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	98 ab       	std	Y+48, r25	; 0x30
    2c32:	8f a7       	std	Y+47, r24	; 0x2f
    2c34:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c36:	98 a9       	ldd	r25, Y+48	; 0x30
    2c38:	9c a7       	std	Y+44, r25	; 0x2c
    2c3a:	8b a7       	std	Y+43, r24	; 0x2b
    2c3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c3e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	f1 f7       	brne	.-4      	; 0x2c40 <main+0x1ba>
    2c44:	9c a7       	std	Y+44, r25	; 0x2c
    2c46:	8b a7       	std	Y+43, r24	; 0x2b
							_delay_ms(2);
							servo_2(250-(i-30));    //30-140 250-140
    2c48:	99 ad       	ldd	r25, Y+57	; 0x39
    2c4a:	88 e1       	ldi	r24, 0x18	; 24
    2c4c:	89 1b       	sub	r24, r25
    2c4e:	0e 94 44 0b 	call	0x1688	; 0x1688 <servo_2>
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	a0 e2       	ldi	r26, 0x20	; 32
    2c58:	b1 e4       	ldi	r27, 0x41	; 65
    2c5a:	8f a3       	std	Y+39, r24	; 0x27
    2c5c:	98 a7       	std	Y+40, r25	; 0x28
    2c5e:	a9 a7       	std	Y+41, r26	; 0x29
    2c60:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c62:	6f a1       	ldd	r22, Y+39	; 0x27
    2c64:	78 a5       	ldd	r23, Y+40	; 0x28
    2c66:	89 a5       	ldd	r24, Y+41	; 0x29
    2c68:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c6a:	26 e6       	ldi	r18, 0x66	; 102
    2c6c:	36 e6       	ldi	r19, 0x66	; 102
    2c6e:	46 e6       	ldi	r20, 0x66	; 102
    2c70:	55 e4       	ldi	r21, 0x45	; 69
    2c72:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	8b a3       	std	Y+35, r24	; 0x23
    2c7c:	9c a3       	std	Y+36, r25	; 0x24
    2c7e:	ad a3       	std	Y+37, r26	; 0x25
    2c80:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c82:	6b a1       	ldd	r22, Y+35	; 0x23
    2c84:	7c a1       	ldd	r23, Y+36	; 0x24
    2c86:	8d a1       	ldd	r24, Y+37	; 0x25
    2c88:	9e a1       	ldd	r25, Y+38	; 0x26
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	40 e8       	ldi	r20, 0x80	; 128
    2c90:	5f e3       	ldi	r21, 0x3F	; 63
    2c92:	0e 94 97 1b 	call	0x372e	; 0x372e <__ltsf2>
    2c96:	88 23       	and	r24, r24
    2c98:	2c f4       	brge	.+10     	; 0x2ca4 <main+0x21e>
		__ticks = 1;
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	9a a3       	std	Y+34, r25	; 0x22
    2ca0:	89 a3       	std	Y+33, r24	; 0x21
    2ca2:	3f c0       	rjmp	.+126    	; 0x2d22 <main+0x29c>
	else if (__tmp > 65535)
    2ca4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ca6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ca8:	8d a1       	ldd	r24, Y+37	; 0x25
    2caa:	9e a1       	ldd	r25, Y+38	; 0x26
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	3f ef       	ldi	r19, 0xFF	; 255
    2cb0:	4f e7       	ldi	r20, 0x7F	; 127
    2cb2:	57 e4       	ldi	r21, 0x47	; 71
    2cb4:	0e 94 37 1b 	call	0x366e	; 0x366e <__gtsf2>
    2cb8:	18 16       	cp	r1, r24
    2cba:	4c f5       	brge	.+82     	; 0x2d0e <main+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cbc:	6f a1       	ldd	r22, Y+39	; 0x27
    2cbe:	78 a5       	ldd	r23, Y+40	; 0x28
    2cc0:	89 a5       	ldd	r24, Y+41	; 0x29
    2cc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e2       	ldi	r20, 0x20	; 32
    2cca:	51 e4       	ldi	r21, 0x41	; 65
    2ccc:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	bc 01       	movw	r22, r24
    2cd6:	cd 01       	movw	r24, r26
    2cd8:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	9a a3       	std	Y+34, r25	; 0x22
    2ce2:	89 a3       	std	Y+33, r24	; 0x21
    2ce4:	0f c0       	rjmp	.+30     	; 0x2d04 <main+0x27e>
    2ce6:	80 e7       	ldi	r24, 0x70	; 112
    2ce8:	91 e0       	ldi	r25, 0x01	; 1
    2cea:	98 a3       	std	Y+32, r25	; 0x20
    2cec:	8f 8f       	std	Y+31, r24	; 0x1f
    2cee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cf0:	98 a1       	ldd	r25, Y+32	; 0x20
    2cf2:	01 97       	sbiw	r24, 0x01	; 1
    2cf4:	f1 f7       	brne	.-4      	; 0x2cf2 <main+0x26c>
    2cf6:	98 a3       	std	Y+32, r25	; 0x20
    2cf8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cfa:	89 a1       	ldd	r24, Y+33	; 0x21
    2cfc:	9a a1       	ldd	r25, Y+34	; 0x22
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	9a a3       	std	Y+34, r25	; 0x22
    2d02:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d04:	89 a1       	ldd	r24, Y+33	; 0x21
    2d06:	9a a1       	ldd	r25, Y+34	; 0x22
    2d08:	00 97       	sbiw	r24, 0x00	; 0
    2d0a:	69 f7       	brne	.-38     	; 0x2ce6 <main+0x260>
    2d0c:	14 c0       	rjmp	.+40     	; 0x2d36 <main+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d0e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d10:	7c a1       	ldd	r23, Y+36	; 0x24
    2d12:	8d a1       	ldd	r24, Y+37	; 0x25
    2d14:	9e a1       	ldd	r25, Y+38	; 0x26
    2d16:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	9a a3       	std	Y+34, r25	; 0x22
    2d20:	89 a3       	std	Y+33, r24	; 0x21
    2d22:	89 a1       	ldd	r24, Y+33	; 0x21
    2d24:	9a a1       	ldd	r25, Y+34	; 0x22
    2d26:	9e 8f       	std	Y+30, r25	; 0x1e
    2d28:	8d 8f       	std	Y+29, r24	; 0x1d
    2d2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d2e:	01 97       	sbiw	r24, 0x01	; 1
    2d30:	f1 f7       	brne	.-4      	; 0x2d2e <main+0x2a8>
    2d32:	9e 8f       	std	Y+30, r25	; 0x1e
    2d34:	8d 8f       	std	Y+29, r24	; 0x1d
		if(flagset==1) {move();}
		if(flagm3==1){
				int i;
				
					if(angle1p>angle1)
						for(i=angle1p-1;i>=angle1;i-=4){
    2d36:	89 ad       	ldd	r24, Y+57	; 0x39
    2d38:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d3a:	04 97       	sbiw	r24, 0x04	; 4
    2d3c:	9a af       	std	Y+58, r25	; 0x3a
    2d3e:	89 af       	std	Y+57, r24	; 0x39
    2d40:	20 91 06 02 	lds	r18, 0x0206
    2d44:	30 91 07 02 	lds	r19, 0x0207
    2d48:	89 ad       	ldd	r24, Y+57	; 0x39
    2d4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d4c:	82 17       	cp	r24, r18
    2d4e:	93 07       	cpc	r25, r19
    2d50:	0c f0       	brlt	.+2      	; 0x2d54 <main+0x2ce>
    2d52:	05 cf       	rjmp	.-502    	; 0x2b5e <main+0xd8>
    2d54:	03 c1       	rjmp	.+518    	; 0x2f5c <main+0x4d6>
							servo_2(250-(i-30));    //30-140 250-140
							_delay_ms(10);

						}
					else
						for(i=angle1p+1;i<=angle1;i+=4){
    2d56:	80 91 2c 03 	lds	r24, 0x032C
    2d5a:	90 91 2d 03 	lds	r25, 0x032D
    2d5e:	01 96       	adiw	r24, 0x01	; 1
    2d60:	9a af       	std	Y+58, r25	; 0x3a
    2d62:	89 af       	std	Y+57, r24	; 0x39
    2d64:	f1 c0       	rjmp	.+482    	; 0x2f48 <main+0x4c2>
							servo_1(i);
    2d66:	89 ad       	ldd	r24, Y+57	; 0x39
    2d68:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <servo_1>
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	a0 e0       	ldi	r26, 0x00	; 0
    2d72:	b0 e4       	ldi	r27, 0x40	; 64
    2d74:	89 8f       	std	Y+25, r24	; 0x19
    2d76:	9a 8f       	std	Y+26, r25	; 0x1a
    2d78:	ab 8f       	std	Y+27, r26	; 0x1b
    2d7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d7c:	69 8d       	ldd	r22, Y+25	; 0x19
    2d7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d84:	26 e6       	ldi	r18, 0x66	; 102
    2d86:	36 e6       	ldi	r19, 0x66	; 102
    2d88:	46 e6       	ldi	r20, 0x66	; 102
    2d8a:	55 e4       	ldi	r21, 0x45	; 69
    2d8c:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	8d 8b       	std	Y+21, r24	; 0x15
    2d96:	9e 8b       	std	Y+22, r25	; 0x16
    2d98:	af 8b       	std	Y+23, r26	; 0x17
    2d9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2da0:	8f 89       	ldd	r24, Y+23	; 0x17
    2da2:	98 8d       	ldd	r25, Y+24	; 0x18
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 e8       	ldi	r20, 0x80	; 128
    2daa:	5f e3       	ldi	r21, 0x3F	; 63
    2dac:	0e 94 97 1b 	call	0x372e	; 0x372e <__ltsf2>
    2db0:	88 23       	and	r24, r24
    2db2:	2c f4       	brge	.+10     	; 0x2dbe <main+0x338>
		__ticks = 1;
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	9c 8b       	std	Y+20, r25	; 0x14
    2dba:	8b 8b       	std	Y+19, r24	; 0x13
    2dbc:	3f c0       	rjmp	.+126    	; 0x2e3c <main+0x3b6>
	else if (__tmp > 65535)
    2dbe:	6d 89       	ldd	r22, Y+21	; 0x15
    2dc0:	7e 89       	ldd	r23, Y+22	; 0x16
    2dc2:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc4:	98 8d       	ldd	r25, Y+24	; 0x18
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	3f ef       	ldi	r19, 0xFF	; 255
    2dca:	4f e7       	ldi	r20, 0x7F	; 127
    2dcc:	57 e4       	ldi	r21, 0x47	; 71
    2dce:	0e 94 37 1b 	call	0x366e	; 0x366e <__gtsf2>
    2dd2:	18 16       	cp	r1, r24
    2dd4:	4c f5       	brge	.+82     	; 0x2e28 <main+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd6:	69 8d       	ldd	r22, Y+25	; 0x19
    2dd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ddc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	40 e2       	ldi	r20, 0x20	; 32
    2de4:	51 e4       	ldi	r21, 0x41	; 65
    2de6:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	bc 01       	movw	r22, r24
    2df0:	cd 01       	movw	r24, r26
    2df2:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	9c 8b       	std	Y+20, r25	; 0x14
    2dfc:	8b 8b       	std	Y+19, r24	; 0x13
    2dfe:	0f c0       	rjmp	.+30     	; 0x2e1e <main+0x398>
    2e00:	80 e7       	ldi	r24, 0x70	; 112
    2e02:	91 e0       	ldi	r25, 0x01	; 1
    2e04:	9a 8b       	std	Y+18, r25	; 0x12
    2e06:	89 8b       	std	Y+17, r24	; 0x11
    2e08:	89 89       	ldd	r24, Y+17	; 0x11
    2e0a:	9a 89       	ldd	r25, Y+18	; 0x12
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	f1 f7       	brne	.-4      	; 0x2e0c <main+0x386>
    2e10:	9a 8b       	std	Y+18, r25	; 0x12
    2e12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e14:	8b 89       	ldd	r24, Y+19	; 0x13
    2e16:	9c 89       	ldd	r25, Y+20	; 0x14
    2e18:	01 97       	sbiw	r24, 0x01	; 1
    2e1a:	9c 8b       	std	Y+20, r25	; 0x14
    2e1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e20:	9c 89       	ldd	r25, Y+20	; 0x14
    2e22:	00 97       	sbiw	r24, 0x00	; 0
    2e24:	69 f7       	brne	.-38     	; 0x2e00 <main+0x37a>
    2e26:	14 c0       	rjmp	.+40     	; 0x2e50 <main+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e28:	6d 89       	ldd	r22, Y+21	; 0x15
    2e2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e30:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	9c 8b       	std	Y+20, r25	; 0x14
    2e3a:	8b 8b       	std	Y+19, r24	; 0x13
    2e3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e40:	98 8b       	std	Y+16, r25	; 0x10
    2e42:	8f 87       	std	Y+15, r24	; 0x0f
    2e44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e46:	98 89       	ldd	r25, Y+16	; 0x10
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	f1 f7       	brne	.-4      	; 0x2e48 <main+0x3c2>
    2e4c:	98 8b       	std	Y+16, r25	; 0x10
    2e4e:	8f 87       	std	Y+15, r24	; 0x0f
							_delay_ms(2);
							servo_2(250-(i-30));    //30-140 250-140
    2e50:	99 ad       	ldd	r25, Y+57	; 0x39
    2e52:	88 e1       	ldi	r24, 0x18	; 24
    2e54:	89 1b       	sub	r24, r25
    2e56:	0e 94 44 0b 	call	0x1688	; 0x1688 <servo_2>
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	a0 e2       	ldi	r26, 0x20	; 32
    2e60:	b1 e4       	ldi	r27, 0x41	; 65
    2e62:	8b 87       	std	Y+11, r24	; 0x0b
    2e64:	9c 87       	std	Y+12, r25	; 0x0c
    2e66:	ad 87       	std	Y+13, r26	; 0x0d
    2e68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e70:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e72:	26 e6       	ldi	r18, 0x66	; 102
    2e74:	36 e6       	ldi	r19, 0x66	; 102
    2e76:	46 e6       	ldi	r20, 0x66	; 102
    2e78:	55 e4       	ldi	r21, 0x45	; 69
    2e7a:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	8f 83       	std	Y+7, r24	; 0x07
    2e84:	98 87       	std	Y+8, r25	; 0x08
    2e86:	a9 87       	std	Y+9, r26	; 0x09
    2e88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e8c:	78 85       	ldd	r23, Y+8	; 0x08
    2e8e:	89 85       	ldd	r24, Y+9	; 0x09
    2e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e8       	ldi	r20, 0x80	; 128
    2e98:	5f e3       	ldi	r21, 0x3F	; 63
    2e9a:	0e 94 97 1b 	call	0x372e	; 0x372e <__ltsf2>
    2e9e:	88 23       	and	r24, r24
    2ea0:	2c f4       	brge	.+10     	; 0x2eac <main+0x426>
		__ticks = 1;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	9e 83       	std	Y+6, r25	; 0x06
    2ea8:	8d 83       	std	Y+5, r24	; 0x05
    2eaa:	3f c0       	rjmp	.+126    	; 0x2f2a <main+0x4a4>
	else if (__tmp > 65535)
    2eac:	6f 81       	ldd	r22, Y+7	; 0x07
    2eae:	78 85       	ldd	r23, Y+8	; 0x08
    2eb0:	89 85       	ldd	r24, Y+9	; 0x09
    2eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	3f ef       	ldi	r19, 0xFF	; 255
    2eb8:	4f e7       	ldi	r20, 0x7F	; 127
    2eba:	57 e4       	ldi	r21, 0x47	; 71
    2ebc:	0e 94 37 1b 	call	0x366e	; 0x366e <__gtsf2>
    2ec0:	18 16       	cp	r1, r24
    2ec2:	4c f5       	brge	.+82     	; 0x2f16 <main+0x490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ec6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e2       	ldi	r20, 0x20	; 32
    2ed2:	51 e4       	ldi	r21, 0x41	; 65
    2ed4:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	bc 01       	movw	r22, r24
    2ede:	cd 01       	movw	r24, r26
    2ee0:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	9e 83       	std	Y+6, r25	; 0x06
    2eea:	8d 83       	std	Y+5, r24	; 0x05
    2eec:	0f c0       	rjmp	.+30     	; 0x2f0c <main+0x486>
    2eee:	80 e7       	ldi	r24, 0x70	; 112
    2ef0:	91 e0       	ldi	r25, 0x01	; 1
    2ef2:	9c 83       	std	Y+4, r25	; 0x04
    2ef4:	8b 83       	std	Y+3, r24	; 0x03
    2ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	f1 f7       	brne	.-4      	; 0x2efa <main+0x474>
    2efe:	9c 83       	std	Y+4, r25	; 0x04
    2f00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f02:	8d 81       	ldd	r24, Y+5	; 0x05
    2f04:	9e 81       	ldd	r25, Y+6	; 0x06
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	9e 83       	std	Y+6, r25	; 0x06
    2f0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f10:	00 97       	sbiw	r24, 0x00	; 0
    2f12:	69 f7       	brne	.-38     	; 0x2eee <main+0x468>
    2f14:	14 c0       	rjmp	.+40     	; 0x2f3e <main+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f16:	6f 81       	ldd	r22, Y+7	; 0x07
    2f18:	78 85       	ldd	r23, Y+8	; 0x08
    2f1a:	89 85       	ldd	r24, Y+9	; 0x09
    2f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__fixunssfsi>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	9e 83       	std	Y+6, r25	; 0x06
    2f28:	8d 83       	std	Y+5, r24	; 0x05
    2f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2e:	9a 83       	std	Y+2, r25	; 0x02
    2f30:	89 83       	std	Y+1, r24	; 0x01
    2f32:	89 81       	ldd	r24, Y+1	; 0x01
    2f34:	9a 81       	ldd	r25, Y+2	; 0x02
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	f1 f7       	brne	.-4      	; 0x2f36 <main+0x4b0>
    2f3a:	9a 83       	std	Y+2, r25	; 0x02
    2f3c:	89 83       	std	Y+1, r24	; 0x01
							servo_2(250-(i-30));    //30-140 250-140
							_delay_ms(10);

						}
					else
						for(i=angle1p+1;i<=angle1;i+=4){
    2f3e:	89 ad       	ldd	r24, Y+57	; 0x39
    2f40:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f42:	04 96       	adiw	r24, 0x04	; 4
    2f44:	9a af       	std	Y+58, r25	; 0x3a
    2f46:	89 af       	std	Y+57, r24	; 0x39
    2f48:	20 91 06 02 	lds	r18, 0x0206
    2f4c:	30 91 07 02 	lds	r19, 0x0207
    2f50:	89 ad       	ldd	r24, Y+57	; 0x39
    2f52:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f54:	28 17       	cp	r18, r24
    2f56:	39 07       	cpc	r19, r25
    2f58:	0c f0       	brlt	.+2      	; 0x2f5c <main+0x4d6>
    2f5a:	05 cf       	rjmp	.-502    	; 0x2d66 <main+0x2e0>
							servo_2(250-(i-30));    //30-140 250-140
							_delay_ms(10);

						}
				
				angle1p=angle1;
    2f5c:	80 91 06 02 	lds	r24, 0x0206
    2f60:	90 91 07 02 	lds	r25, 0x0207
    2f64:	90 93 2d 03 	sts	0x032D, r25
    2f68:	80 93 2c 03 	sts	0x032C, r24
				flagm3=0;
    2f6c:	10 92 39 03 	sts	0x0339, r1
    2f70:	10 92 38 03 	sts	0x0338, r1
    2f74:	9c cd       	rjmp	.-1224   	; 0x2aae <main+0x28>

00002f76 <__fixunssfsi>:
    2f76:	ef 92       	push	r14
    2f78:	ff 92       	push	r15
    2f7a:	0f 93       	push	r16
    2f7c:	1f 93       	push	r17
    2f7e:	7b 01       	movw	r14, r22
    2f80:	8c 01       	movw	r16, r24
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e0       	ldi	r20, 0x00	; 0
    2f88:	5f e4       	ldi	r21, 0x4F	; 79
    2f8a:	0e 94 67 1b 	call	0x36ce	; 0x36ce <__gesf2>
    2f8e:	88 23       	and	r24, r24
    2f90:	8c f0       	brlt	.+34     	; 0x2fb4 <__fixunssfsi+0x3e>
    2f92:	c8 01       	movw	r24, r16
    2f94:	b7 01       	movw	r22, r14
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e0       	ldi	r20, 0x00	; 0
    2f9c:	5f e4       	ldi	r21, 0x4F	; 79
    2f9e:	0e 94 33 19 	call	0x3266	; 0x3266 <__subsf3>
    2fa2:	0e 94 25 1c 	call	0x384a	; 0x384a <__fixsfsi>
    2fa6:	9b 01       	movw	r18, r22
    2fa8:	ac 01       	movw	r20, r24
    2faa:	20 50       	subi	r18, 0x00	; 0
    2fac:	30 40       	sbci	r19, 0x00	; 0
    2fae:	40 40       	sbci	r20, 0x00	; 0
    2fb0:	50 48       	sbci	r21, 0x80	; 128
    2fb2:	06 c0       	rjmp	.+12     	; 0x2fc0 <__fixunssfsi+0x4a>
    2fb4:	c8 01       	movw	r24, r16
    2fb6:	b7 01       	movw	r22, r14
    2fb8:	0e 94 25 1c 	call	0x384a	; 0x384a <__fixsfsi>
    2fbc:	9b 01       	movw	r18, r22
    2fbe:	ac 01       	movw	r20, r24
    2fc0:	b9 01       	movw	r22, r18
    2fc2:	ca 01       	movw	r24, r20
    2fc4:	1f 91       	pop	r17
    2fc6:	0f 91       	pop	r16
    2fc8:	ff 90       	pop	r15
    2fca:	ef 90       	pop	r14
    2fcc:	08 95       	ret

00002fce <_fpadd_parts>:
    2fce:	a0 e0       	ldi	r26, 0x00	; 0
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	ed ee       	ldi	r30, 0xED	; 237
    2fd4:	f7 e1       	ldi	r31, 0x17	; 23
    2fd6:	0c 94 fb 1e 	jmp	0x3df6	; 0x3df6 <__prologue_saves__>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	2b 01       	movw	r4, r22
    2fde:	fa 01       	movw	r30, r20
    2fe0:	9c 91       	ld	r25, X
    2fe2:	92 30       	cpi	r25, 0x02	; 2
    2fe4:	08 f4       	brcc	.+2      	; 0x2fe8 <_fpadd_parts+0x1a>
    2fe6:	39 c1       	rjmp	.+626    	; 0x325a <_fpadd_parts+0x28c>
    2fe8:	eb 01       	movw	r28, r22
    2fea:	88 81       	ld	r24, Y
    2fec:	82 30       	cpi	r24, 0x02	; 2
    2fee:	08 f4       	brcc	.+2      	; 0x2ff2 <_fpadd_parts+0x24>
    2ff0:	33 c1       	rjmp	.+614    	; 0x3258 <_fpadd_parts+0x28a>
    2ff2:	94 30       	cpi	r25, 0x04	; 4
    2ff4:	69 f4       	brne	.+26     	; 0x3010 <_fpadd_parts+0x42>
    2ff6:	84 30       	cpi	r24, 0x04	; 4
    2ff8:	09 f0       	breq	.+2      	; 0x2ffc <_fpadd_parts+0x2e>
    2ffa:	2f c1       	rjmp	.+606    	; 0x325a <_fpadd_parts+0x28c>
    2ffc:	11 96       	adiw	r26, 0x01	; 1
    2ffe:	9c 91       	ld	r25, X
    3000:	11 97       	sbiw	r26, 0x01	; 1
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	98 17       	cp	r25, r24
    3006:	09 f4       	brne	.+2      	; 0x300a <_fpadd_parts+0x3c>
    3008:	28 c1       	rjmp	.+592    	; 0x325a <_fpadd_parts+0x28c>
    300a:	a8 e0       	ldi	r26, 0x08	; 8
    300c:	b2 e0       	ldi	r27, 0x02	; 2
    300e:	25 c1       	rjmp	.+586    	; 0x325a <_fpadd_parts+0x28c>
    3010:	84 30       	cpi	r24, 0x04	; 4
    3012:	09 f4       	brne	.+2      	; 0x3016 <_fpadd_parts+0x48>
    3014:	21 c1       	rjmp	.+578    	; 0x3258 <_fpadd_parts+0x28a>
    3016:	82 30       	cpi	r24, 0x02	; 2
    3018:	a9 f4       	brne	.+42     	; 0x3044 <_fpadd_parts+0x76>
    301a:	92 30       	cpi	r25, 0x02	; 2
    301c:	09 f0       	breq	.+2      	; 0x3020 <_fpadd_parts+0x52>
    301e:	1d c1       	rjmp	.+570    	; 0x325a <_fpadd_parts+0x28c>
    3020:	9a 01       	movw	r18, r20
    3022:	ad 01       	movw	r20, r26
    3024:	88 e0       	ldi	r24, 0x08	; 8
    3026:	ea 01       	movw	r28, r20
    3028:	09 90       	ld	r0, Y+
    302a:	ae 01       	movw	r20, r28
    302c:	e9 01       	movw	r28, r18
    302e:	09 92       	st	Y+, r0
    3030:	9e 01       	movw	r18, r28
    3032:	81 50       	subi	r24, 0x01	; 1
    3034:	c1 f7       	brne	.-16     	; 0x3026 <_fpadd_parts+0x58>
    3036:	e2 01       	movw	r28, r4
    3038:	89 81       	ldd	r24, Y+1	; 0x01
    303a:	11 96       	adiw	r26, 0x01	; 1
    303c:	9c 91       	ld	r25, X
    303e:	89 23       	and	r24, r25
    3040:	81 83       	std	Z+1, r24	; 0x01
    3042:	08 c1       	rjmp	.+528    	; 0x3254 <_fpadd_parts+0x286>
    3044:	92 30       	cpi	r25, 0x02	; 2
    3046:	09 f4       	brne	.+2      	; 0x304a <_fpadd_parts+0x7c>
    3048:	07 c1       	rjmp	.+526    	; 0x3258 <_fpadd_parts+0x28a>
    304a:	12 96       	adiw	r26, 0x02	; 2
    304c:	2d 90       	ld	r2, X+
    304e:	3c 90       	ld	r3, X
    3050:	13 97       	sbiw	r26, 0x03	; 3
    3052:	eb 01       	movw	r28, r22
    3054:	8a 81       	ldd	r24, Y+2	; 0x02
    3056:	9b 81       	ldd	r25, Y+3	; 0x03
    3058:	14 96       	adiw	r26, 0x04	; 4
    305a:	ad 90       	ld	r10, X+
    305c:	bd 90       	ld	r11, X+
    305e:	cd 90       	ld	r12, X+
    3060:	dc 90       	ld	r13, X
    3062:	17 97       	sbiw	r26, 0x07	; 7
    3064:	ec 80       	ldd	r14, Y+4	; 0x04
    3066:	fd 80       	ldd	r15, Y+5	; 0x05
    3068:	0e 81       	ldd	r16, Y+6	; 0x06
    306a:	1f 81       	ldd	r17, Y+7	; 0x07
    306c:	91 01       	movw	r18, r2
    306e:	28 1b       	sub	r18, r24
    3070:	39 0b       	sbc	r19, r25
    3072:	b9 01       	movw	r22, r18
    3074:	37 ff       	sbrs	r19, 7
    3076:	04 c0       	rjmp	.+8      	; 0x3080 <_fpadd_parts+0xb2>
    3078:	66 27       	eor	r22, r22
    307a:	77 27       	eor	r23, r23
    307c:	62 1b       	sub	r22, r18
    307e:	73 0b       	sbc	r23, r19
    3080:	60 32       	cpi	r22, 0x20	; 32
    3082:	71 05       	cpc	r23, r1
    3084:	0c f0       	brlt	.+2      	; 0x3088 <_fpadd_parts+0xba>
    3086:	61 c0       	rjmp	.+194    	; 0x314a <_fpadd_parts+0x17c>
    3088:	12 16       	cp	r1, r18
    308a:	13 06       	cpc	r1, r19
    308c:	6c f5       	brge	.+90     	; 0x30e8 <_fpadd_parts+0x11a>
    308e:	37 01       	movw	r6, r14
    3090:	48 01       	movw	r8, r16
    3092:	06 2e       	mov	r0, r22
    3094:	04 c0       	rjmp	.+8      	; 0x309e <_fpadd_parts+0xd0>
    3096:	96 94       	lsr	r9
    3098:	87 94       	ror	r8
    309a:	77 94       	ror	r7
    309c:	67 94       	ror	r6
    309e:	0a 94       	dec	r0
    30a0:	d2 f7       	brpl	.-12     	; 0x3096 <_fpadd_parts+0xc8>
    30a2:	21 e0       	ldi	r18, 0x01	; 1
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	40 e0       	ldi	r20, 0x00	; 0
    30a8:	50 e0       	ldi	r21, 0x00	; 0
    30aa:	04 c0       	rjmp	.+8      	; 0x30b4 <_fpadd_parts+0xe6>
    30ac:	22 0f       	add	r18, r18
    30ae:	33 1f       	adc	r19, r19
    30b0:	44 1f       	adc	r20, r20
    30b2:	55 1f       	adc	r21, r21
    30b4:	6a 95       	dec	r22
    30b6:	d2 f7       	brpl	.-12     	; 0x30ac <_fpadd_parts+0xde>
    30b8:	21 50       	subi	r18, 0x01	; 1
    30ba:	30 40       	sbci	r19, 0x00	; 0
    30bc:	40 40       	sbci	r20, 0x00	; 0
    30be:	50 40       	sbci	r21, 0x00	; 0
    30c0:	2e 21       	and	r18, r14
    30c2:	3f 21       	and	r19, r15
    30c4:	40 23       	and	r20, r16
    30c6:	51 23       	and	r21, r17
    30c8:	21 15       	cp	r18, r1
    30ca:	31 05       	cpc	r19, r1
    30cc:	41 05       	cpc	r20, r1
    30ce:	51 05       	cpc	r21, r1
    30d0:	21 f0       	breq	.+8      	; 0x30da <_fpadd_parts+0x10c>
    30d2:	21 e0       	ldi	r18, 0x01	; 1
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e0       	ldi	r20, 0x00	; 0
    30d8:	50 e0       	ldi	r21, 0x00	; 0
    30da:	79 01       	movw	r14, r18
    30dc:	8a 01       	movw	r16, r20
    30de:	e6 28       	or	r14, r6
    30e0:	f7 28       	or	r15, r7
    30e2:	08 29       	or	r16, r8
    30e4:	19 29       	or	r17, r9
    30e6:	3c c0       	rjmp	.+120    	; 0x3160 <_fpadd_parts+0x192>
    30e8:	23 2b       	or	r18, r19
    30ea:	d1 f1       	breq	.+116    	; 0x3160 <_fpadd_parts+0x192>
    30ec:	26 0e       	add	r2, r22
    30ee:	37 1e       	adc	r3, r23
    30f0:	35 01       	movw	r6, r10
    30f2:	46 01       	movw	r8, r12
    30f4:	06 2e       	mov	r0, r22
    30f6:	04 c0       	rjmp	.+8      	; 0x3100 <_fpadd_parts+0x132>
    30f8:	96 94       	lsr	r9
    30fa:	87 94       	ror	r8
    30fc:	77 94       	ror	r7
    30fe:	67 94       	ror	r6
    3100:	0a 94       	dec	r0
    3102:	d2 f7       	brpl	.-12     	; 0x30f8 <_fpadd_parts+0x12a>
    3104:	21 e0       	ldi	r18, 0x01	; 1
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	40 e0       	ldi	r20, 0x00	; 0
    310a:	50 e0       	ldi	r21, 0x00	; 0
    310c:	04 c0       	rjmp	.+8      	; 0x3116 <_fpadd_parts+0x148>
    310e:	22 0f       	add	r18, r18
    3110:	33 1f       	adc	r19, r19
    3112:	44 1f       	adc	r20, r20
    3114:	55 1f       	adc	r21, r21
    3116:	6a 95       	dec	r22
    3118:	d2 f7       	brpl	.-12     	; 0x310e <_fpadd_parts+0x140>
    311a:	21 50       	subi	r18, 0x01	; 1
    311c:	30 40       	sbci	r19, 0x00	; 0
    311e:	40 40       	sbci	r20, 0x00	; 0
    3120:	50 40       	sbci	r21, 0x00	; 0
    3122:	2a 21       	and	r18, r10
    3124:	3b 21       	and	r19, r11
    3126:	4c 21       	and	r20, r12
    3128:	5d 21       	and	r21, r13
    312a:	21 15       	cp	r18, r1
    312c:	31 05       	cpc	r19, r1
    312e:	41 05       	cpc	r20, r1
    3130:	51 05       	cpc	r21, r1
    3132:	21 f0       	breq	.+8      	; 0x313c <_fpadd_parts+0x16e>
    3134:	21 e0       	ldi	r18, 0x01	; 1
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	40 e0       	ldi	r20, 0x00	; 0
    313a:	50 e0       	ldi	r21, 0x00	; 0
    313c:	59 01       	movw	r10, r18
    313e:	6a 01       	movw	r12, r20
    3140:	a6 28       	or	r10, r6
    3142:	b7 28       	or	r11, r7
    3144:	c8 28       	or	r12, r8
    3146:	d9 28       	or	r13, r9
    3148:	0b c0       	rjmp	.+22     	; 0x3160 <_fpadd_parts+0x192>
    314a:	82 15       	cp	r24, r2
    314c:	93 05       	cpc	r25, r3
    314e:	2c f0       	brlt	.+10     	; 0x315a <_fpadd_parts+0x18c>
    3150:	1c 01       	movw	r2, r24
    3152:	aa 24       	eor	r10, r10
    3154:	bb 24       	eor	r11, r11
    3156:	65 01       	movw	r12, r10
    3158:	03 c0       	rjmp	.+6      	; 0x3160 <_fpadd_parts+0x192>
    315a:	ee 24       	eor	r14, r14
    315c:	ff 24       	eor	r15, r15
    315e:	87 01       	movw	r16, r14
    3160:	11 96       	adiw	r26, 0x01	; 1
    3162:	9c 91       	ld	r25, X
    3164:	d2 01       	movw	r26, r4
    3166:	11 96       	adiw	r26, 0x01	; 1
    3168:	8c 91       	ld	r24, X
    316a:	98 17       	cp	r25, r24
    316c:	09 f4       	brne	.+2      	; 0x3170 <_fpadd_parts+0x1a2>
    316e:	45 c0       	rjmp	.+138    	; 0x31fa <_fpadd_parts+0x22c>
    3170:	99 23       	and	r25, r25
    3172:	39 f0       	breq	.+14     	; 0x3182 <_fpadd_parts+0x1b4>
    3174:	a8 01       	movw	r20, r16
    3176:	97 01       	movw	r18, r14
    3178:	2a 19       	sub	r18, r10
    317a:	3b 09       	sbc	r19, r11
    317c:	4c 09       	sbc	r20, r12
    317e:	5d 09       	sbc	r21, r13
    3180:	06 c0       	rjmp	.+12     	; 0x318e <_fpadd_parts+0x1c0>
    3182:	a6 01       	movw	r20, r12
    3184:	95 01       	movw	r18, r10
    3186:	2e 19       	sub	r18, r14
    3188:	3f 09       	sbc	r19, r15
    318a:	40 0b       	sbc	r20, r16
    318c:	51 0b       	sbc	r21, r17
    318e:	57 fd       	sbrc	r21, 7
    3190:	08 c0       	rjmp	.+16     	; 0x31a2 <_fpadd_parts+0x1d4>
    3192:	11 82       	std	Z+1, r1	; 0x01
    3194:	33 82       	std	Z+3, r3	; 0x03
    3196:	22 82       	std	Z+2, r2	; 0x02
    3198:	24 83       	std	Z+4, r18	; 0x04
    319a:	35 83       	std	Z+5, r19	; 0x05
    319c:	46 83       	std	Z+6, r20	; 0x06
    319e:	57 83       	std	Z+7, r21	; 0x07
    31a0:	1d c0       	rjmp	.+58     	; 0x31dc <_fpadd_parts+0x20e>
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	81 83       	std	Z+1, r24	; 0x01
    31a6:	33 82       	std	Z+3, r3	; 0x03
    31a8:	22 82       	std	Z+2, r2	; 0x02
    31aa:	88 27       	eor	r24, r24
    31ac:	99 27       	eor	r25, r25
    31ae:	dc 01       	movw	r26, r24
    31b0:	82 1b       	sub	r24, r18
    31b2:	93 0b       	sbc	r25, r19
    31b4:	a4 0b       	sbc	r26, r20
    31b6:	b5 0b       	sbc	r27, r21
    31b8:	84 83       	std	Z+4, r24	; 0x04
    31ba:	95 83       	std	Z+5, r25	; 0x05
    31bc:	a6 83       	std	Z+6, r26	; 0x06
    31be:	b7 83       	std	Z+7, r27	; 0x07
    31c0:	0d c0       	rjmp	.+26     	; 0x31dc <_fpadd_parts+0x20e>
    31c2:	22 0f       	add	r18, r18
    31c4:	33 1f       	adc	r19, r19
    31c6:	44 1f       	adc	r20, r20
    31c8:	55 1f       	adc	r21, r21
    31ca:	24 83       	std	Z+4, r18	; 0x04
    31cc:	35 83       	std	Z+5, r19	; 0x05
    31ce:	46 83       	std	Z+6, r20	; 0x06
    31d0:	57 83       	std	Z+7, r21	; 0x07
    31d2:	82 81       	ldd	r24, Z+2	; 0x02
    31d4:	93 81       	ldd	r25, Z+3	; 0x03
    31d6:	01 97       	sbiw	r24, 0x01	; 1
    31d8:	93 83       	std	Z+3, r25	; 0x03
    31da:	82 83       	std	Z+2, r24	; 0x02
    31dc:	24 81       	ldd	r18, Z+4	; 0x04
    31de:	35 81       	ldd	r19, Z+5	; 0x05
    31e0:	46 81       	ldd	r20, Z+6	; 0x06
    31e2:	57 81       	ldd	r21, Z+7	; 0x07
    31e4:	da 01       	movw	r26, r20
    31e6:	c9 01       	movw	r24, r18
    31e8:	01 97       	sbiw	r24, 0x01	; 1
    31ea:	a1 09       	sbc	r26, r1
    31ec:	b1 09       	sbc	r27, r1
    31ee:	8f 5f       	subi	r24, 0xFF	; 255
    31f0:	9f 4f       	sbci	r25, 0xFF	; 255
    31f2:	af 4f       	sbci	r26, 0xFF	; 255
    31f4:	bf 43       	sbci	r27, 0x3F	; 63
    31f6:	28 f3       	brcs	.-54     	; 0x31c2 <_fpadd_parts+0x1f4>
    31f8:	0b c0       	rjmp	.+22     	; 0x3210 <_fpadd_parts+0x242>
    31fa:	91 83       	std	Z+1, r25	; 0x01
    31fc:	33 82       	std	Z+3, r3	; 0x03
    31fe:	22 82       	std	Z+2, r2	; 0x02
    3200:	ea 0c       	add	r14, r10
    3202:	fb 1c       	adc	r15, r11
    3204:	0c 1d       	adc	r16, r12
    3206:	1d 1d       	adc	r17, r13
    3208:	e4 82       	std	Z+4, r14	; 0x04
    320a:	f5 82       	std	Z+5, r15	; 0x05
    320c:	06 83       	std	Z+6, r16	; 0x06
    320e:	17 83       	std	Z+7, r17	; 0x07
    3210:	83 e0       	ldi	r24, 0x03	; 3
    3212:	80 83       	st	Z, r24
    3214:	24 81       	ldd	r18, Z+4	; 0x04
    3216:	35 81       	ldd	r19, Z+5	; 0x05
    3218:	46 81       	ldd	r20, Z+6	; 0x06
    321a:	57 81       	ldd	r21, Z+7	; 0x07
    321c:	57 ff       	sbrs	r21, 7
    321e:	1a c0       	rjmp	.+52     	; 0x3254 <_fpadd_parts+0x286>
    3220:	c9 01       	movw	r24, r18
    3222:	aa 27       	eor	r26, r26
    3224:	97 fd       	sbrc	r25, 7
    3226:	a0 95       	com	r26
    3228:	ba 2f       	mov	r27, r26
    322a:	81 70       	andi	r24, 0x01	; 1
    322c:	90 70       	andi	r25, 0x00	; 0
    322e:	a0 70       	andi	r26, 0x00	; 0
    3230:	b0 70       	andi	r27, 0x00	; 0
    3232:	56 95       	lsr	r21
    3234:	47 95       	ror	r20
    3236:	37 95       	ror	r19
    3238:	27 95       	ror	r18
    323a:	82 2b       	or	r24, r18
    323c:	93 2b       	or	r25, r19
    323e:	a4 2b       	or	r26, r20
    3240:	b5 2b       	or	r27, r21
    3242:	84 83       	std	Z+4, r24	; 0x04
    3244:	95 83       	std	Z+5, r25	; 0x05
    3246:	a6 83       	std	Z+6, r26	; 0x06
    3248:	b7 83       	std	Z+7, r27	; 0x07
    324a:	82 81       	ldd	r24, Z+2	; 0x02
    324c:	93 81       	ldd	r25, Z+3	; 0x03
    324e:	01 96       	adiw	r24, 0x01	; 1
    3250:	93 83       	std	Z+3, r25	; 0x03
    3252:	82 83       	std	Z+2, r24	; 0x02
    3254:	df 01       	movw	r26, r30
    3256:	01 c0       	rjmp	.+2      	; 0x325a <_fpadd_parts+0x28c>
    3258:	d2 01       	movw	r26, r4
    325a:	cd 01       	movw	r24, r26
    325c:	cd b7       	in	r28, 0x3d	; 61
    325e:	de b7       	in	r29, 0x3e	; 62
    3260:	e2 e1       	ldi	r30, 0x12	; 18
    3262:	0c 94 17 1f 	jmp	0x3e2e	; 0x3e2e <__epilogue_restores__>

00003266 <__subsf3>:
    3266:	a0 e2       	ldi	r26, 0x20	; 32
    3268:	b0 e0       	ldi	r27, 0x00	; 0
    326a:	e9 e3       	ldi	r30, 0x39	; 57
    326c:	f9 e1       	ldi	r31, 0x19	; 25
    326e:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__prologue_saves__+0x18>
    3272:	69 83       	std	Y+1, r22	; 0x01
    3274:	7a 83       	std	Y+2, r23	; 0x02
    3276:	8b 83       	std	Y+3, r24	; 0x03
    3278:	9c 83       	std	Y+4, r25	; 0x04
    327a:	2d 83       	std	Y+5, r18	; 0x05
    327c:	3e 83       	std	Y+6, r19	; 0x06
    327e:	4f 83       	std	Y+7, r20	; 0x07
    3280:	58 87       	std	Y+8, r21	; 0x08
    3282:	e9 e0       	ldi	r30, 0x09	; 9
    3284:	ee 2e       	mov	r14, r30
    3286:	f1 2c       	mov	r15, r1
    3288:	ec 0e       	add	r14, r28
    328a:	fd 1e       	adc	r15, r29
    328c:	ce 01       	movw	r24, r28
    328e:	01 96       	adiw	r24, 0x01	; 1
    3290:	b7 01       	movw	r22, r14
    3292:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__unpack_f>
    3296:	8e 01       	movw	r16, r28
    3298:	0f 5e       	subi	r16, 0xEF	; 239
    329a:	1f 4f       	sbci	r17, 0xFF	; 255
    329c:	ce 01       	movw	r24, r28
    329e:	05 96       	adiw	r24, 0x05	; 5
    32a0:	b8 01       	movw	r22, r16
    32a2:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__unpack_f>
    32a6:	8a 89       	ldd	r24, Y+18	; 0x12
    32a8:	91 e0       	ldi	r25, 0x01	; 1
    32aa:	89 27       	eor	r24, r25
    32ac:	8a 8b       	std	Y+18, r24	; 0x12
    32ae:	c7 01       	movw	r24, r14
    32b0:	b8 01       	movw	r22, r16
    32b2:	ae 01       	movw	r20, r28
    32b4:	47 5e       	subi	r20, 0xE7	; 231
    32b6:	5f 4f       	sbci	r21, 0xFF	; 255
    32b8:	0e 94 e7 17 	call	0x2fce	; 0x2fce <_fpadd_parts>
    32bc:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__pack_f>
    32c0:	a0 96       	adiw	r28, 0x20	; 32
    32c2:	e6 e0       	ldi	r30, 0x06	; 6
    32c4:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__epilogue_restores__+0x18>

000032c8 <__addsf3>:
    32c8:	a0 e2       	ldi	r26, 0x20	; 32
    32ca:	b0 e0       	ldi	r27, 0x00	; 0
    32cc:	ea e6       	ldi	r30, 0x6A	; 106
    32ce:	f9 e1       	ldi	r31, 0x19	; 25
    32d0:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__prologue_saves__+0x18>
    32d4:	69 83       	std	Y+1, r22	; 0x01
    32d6:	7a 83       	std	Y+2, r23	; 0x02
    32d8:	8b 83       	std	Y+3, r24	; 0x03
    32da:	9c 83       	std	Y+4, r25	; 0x04
    32dc:	2d 83       	std	Y+5, r18	; 0x05
    32de:	3e 83       	std	Y+6, r19	; 0x06
    32e0:	4f 83       	std	Y+7, r20	; 0x07
    32e2:	58 87       	std	Y+8, r21	; 0x08
    32e4:	f9 e0       	ldi	r31, 0x09	; 9
    32e6:	ef 2e       	mov	r14, r31
    32e8:	f1 2c       	mov	r15, r1
    32ea:	ec 0e       	add	r14, r28
    32ec:	fd 1e       	adc	r15, r29
    32ee:	ce 01       	movw	r24, r28
    32f0:	01 96       	adiw	r24, 0x01	; 1
    32f2:	b7 01       	movw	r22, r14
    32f4:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__unpack_f>
    32f8:	8e 01       	movw	r16, r28
    32fa:	0f 5e       	subi	r16, 0xEF	; 239
    32fc:	1f 4f       	sbci	r17, 0xFF	; 255
    32fe:	ce 01       	movw	r24, r28
    3300:	05 96       	adiw	r24, 0x05	; 5
    3302:	b8 01       	movw	r22, r16
    3304:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__unpack_f>
    3308:	c7 01       	movw	r24, r14
    330a:	b8 01       	movw	r22, r16
    330c:	ae 01       	movw	r20, r28
    330e:	47 5e       	subi	r20, 0xE7	; 231
    3310:	5f 4f       	sbci	r21, 0xFF	; 255
    3312:	0e 94 e7 17 	call	0x2fce	; 0x2fce <_fpadd_parts>
    3316:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__pack_f>
    331a:	a0 96       	adiw	r28, 0x20	; 32
    331c:	e6 e0       	ldi	r30, 0x06	; 6
    331e:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__epilogue_restores__+0x18>

00003322 <__mulsf3>:
    3322:	a0 e2       	ldi	r26, 0x20	; 32
    3324:	b0 e0       	ldi	r27, 0x00	; 0
    3326:	e7 e9       	ldi	r30, 0x97	; 151
    3328:	f9 e1       	ldi	r31, 0x19	; 25
    332a:	0c 94 fb 1e 	jmp	0x3df6	; 0x3df6 <__prologue_saves__>
    332e:	69 83       	std	Y+1, r22	; 0x01
    3330:	7a 83       	std	Y+2, r23	; 0x02
    3332:	8b 83       	std	Y+3, r24	; 0x03
    3334:	9c 83       	std	Y+4, r25	; 0x04
    3336:	2d 83       	std	Y+5, r18	; 0x05
    3338:	3e 83       	std	Y+6, r19	; 0x06
    333a:	4f 83       	std	Y+7, r20	; 0x07
    333c:	58 87       	std	Y+8, r21	; 0x08
    333e:	ce 01       	movw	r24, r28
    3340:	01 96       	adiw	r24, 0x01	; 1
    3342:	be 01       	movw	r22, r28
    3344:	67 5f       	subi	r22, 0xF7	; 247
    3346:	7f 4f       	sbci	r23, 0xFF	; 255
    3348:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__unpack_f>
    334c:	ce 01       	movw	r24, r28
    334e:	05 96       	adiw	r24, 0x05	; 5
    3350:	be 01       	movw	r22, r28
    3352:	6f 5e       	subi	r22, 0xEF	; 239
    3354:	7f 4f       	sbci	r23, 0xFF	; 255
    3356:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__unpack_f>
    335a:	99 85       	ldd	r25, Y+9	; 0x09
    335c:	92 30       	cpi	r25, 0x02	; 2
    335e:	88 f0       	brcs	.+34     	; 0x3382 <__mulsf3+0x60>
    3360:	89 89       	ldd	r24, Y+17	; 0x11
    3362:	82 30       	cpi	r24, 0x02	; 2
    3364:	c8 f0       	brcs	.+50     	; 0x3398 <__mulsf3+0x76>
    3366:	94 30       	cpi	r25, 0x04	; 4
    3368:	19 f4       	brne	.+6      	; 0x3370 <__mulsf3+0x4e>
    336a:	82 30       	cpi	r24, 0x02	; 2
    336c:	51 f4       	brne	.+20     	; 0x3382 <__mulsf3+0x60>
    336e:	04 c0       	rjmp	.+8      	; 0x3378 <__mulsf3+0x56>
    3370:	84 30       	cpi	r24, 0x04	; 4
    3372:	29 f4       	brne	.+10     	; 0x337e <__mulsf3+0x5c>
    3374:	92 30       	cpi	r25, 0x02	; 2
    3376:	81 f4       	brne	.+32     	; 0x3398 <__mulsf3+0x76>
    3378:	88 e0       	ldi	r24, 0x08	; 8
    337a:	92 e0       	ldi	r25, 0x02	; 2
    337c:	c6 c0       	rjmp	.+396    	; 0x350a <__mulsf3+0x1e8>
    337e:	92 30       	cpi	r25, 0x02	; 2
    3380:	49 f4       	brne	.+18     	; 0x3394 <__mulsf3+0x72>
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	9a 85       	ldd	r25, Y+10	; 0x0a
    3386:	8a 89       	ldd	r24, Y+18	; 0x12
    3388:	98 13       	cpse	r25, r24
    338a:	21 e0       	ldi	r18, 0x01	; 1
    338c:	2a 87       	std	Y+10, r18	; 0x0a
    338e:	ce 01       	movw	r24, r28
    3390:	09 96       	adiw	r24, 0x09	; 9
    3392:	bb c0       	rjmp	.+374    	; 0x350a <__mulsf3+0x1e8>
    3394:	82 30       	cpi	r24, 0x02	; 2
    3396:	49 f4       	brne	.+18     	; 0x33aa <__mulsf3+0x88>
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	9a 85       	ldd	r25, Y+10	; 0x0a
    339c:	8a 89       	ldd	r24, Y+18	; 0x12
    339e:	98 13       	cpse	r25, r24
    33a0:	21 e0       	ldi	r18, 0x01	; 1
    33a2:	2a 8b       	std	Y+18, r18	; 0x12
    33a4:	ce 01       	movw	r24, r28
    33a6:	41 96       	adiw	r24, 0x11	; 17
    33a8:	b0 c0       	rjmp	.+352    	; 0x350a <__mulsf3+0x1e8>
    33aa:	2d 84       	ldd	r2, Y+13	; 0x0d
    33ac:	3e 84       	ldd	r3, Y+14	; 0x0e
    33ae:	4f 84       	ldd	r4, Y+15	; 0x0f
    33b0:	58 88       	ldd	r5, Y+16	; 0x10
    33b2:	6d 88       	ldd	r6, Y+21	; 0x15
    33b4:	7e 88       	ldd	r7, Y+22	; 0x16
    33b6:	8f 88       	ldd	r8, Y+23	; 0x17
    33b8:	98 8c       	ldd	r9, Y+24	; 0x18
    33ba:	ee 24       	eor	r14, r14
    33bc:	ff 24       	eor	r15, r15
    33be:	87 01       	movw	r16, r14
    33c0:	aa 24       	eor	r10, r10
    33c2:	bb 24       	eor	r11, r11
    33c4:	65 01       	movw	r12, r10
    33c6:	40 e0       	ldi	r20, 0x00	; 0
    33c8:	50 e0       	ldi	r21, 0x00	; 0
    33ca:	60 e0       	ldi	r22, 0x00	; 0
    33cc:	70 e0       	ldi	r23, 0x00	; 0
    33ce:	e0 e0       	ldi	r30, 0x00	; 0
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	c1 01       	movw	r24, r2
    33d4:	81 70       	andi	r24, 0x01	; 1
    33d6:	90 70       	andi	r25, 0x00	; 0
    33d8:	89 2b       	or	r24, r25
    33da:	e9 f0       	breq	.+58     	; 0x3416 <__mulsf3+0xf4>
    33dc:	e6 0c       	add	r14, r6
    33de:	f7 1c       	adc	r15, r7
    33e0:	08 1d       	adc	r16, r8
    33e2:	19 1d       	adc	r17, r9
    33e4:	9a 01       	movw	r18, r20
    33e6:	ab 01       	movw	r20, r22
    33e8:	2a 0d       	add	r18, r10
    33ea:	3b 1d       	adc	r19, r11
    33ec:	4c 1d       	adc	r20, r12
    33ee:	5d 1d       	adc	r21, r13
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	a0 e0       	ldi	r26, 0x00	; 0
    33f6:	b0 e0       	ldi	r27, 0x00	; 0
    33f8:	e6 14       	cp	r14, r6
    33fa:	f7 04       	cpc	r15, r7
    33fc:	08 05       	cpc	r16, r8
    33fe:	19 05       	cpc	r17, r9
    3400:	20 f4       	brcc	.+8      	; 0x340a <__mulsf3+0xe8>
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	a0 e0       	ldi	r26, 0x00	; 0
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	ba 01       	movw	r22, r20
    340c:	a9 01       	movw	r20, r18
    340e:	48 0f       	add	r20, r24
    3410:	59 1f       	adc	r21, r25
    3412:	6a 1f       	adc	r22, r26
    3414:	7b 1f       	adc	r23, r27
    3416:	aa 0c       	add	r10, r10
    3418:	bb 1c       	adc	r11, r11
    341a:	cc 1c       	adc	r12, r12
    341c:	dd 1c       	adc	r13, r13
    341e:	97 fe       	sbrs	r9, 7
    3420:	08 c0       	rjmp	.+16     	; 0x3432 <__mulsf3+0x110>
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	a0 e0       	ldi	r26, 0x00	; 0
    3428:	b0 e0       	ldi	r27, 0x00	; 0
    342a:	a8 2a       	or	r10, r24
    342c:	b9 2a       	or	r11, r25
    342e:	ca 2a       	or	r12, r26
    3430:	db 2a       	or	r13, r27
    3432:	31 96       	adiw	r30, 0x01	; 1
    3434:	e0 32       	cpi	r30, 0x20	; 32
    3436:	f1 05       	cpc	r31, r1
    3438:	49 f0       	breq	.+18     	; 0x344c <__mulsf3+0x12a>
    343a:	66 0c       	add	r6, r6
    343c:	77 1c       	adc	r7, r7
    343e:	88 1c       	adc	r8, r8
    3440:	99 1c       	adc	r9, r9
    3442:	56 94       	lsr	r5
    3444:	47 94       	ror	r4
    3446:	37 94       	ror	r3
    3448:	27 94       	ror	r2
    344a:	c3 cf       	rjmp	.-122    	; 0x33d2 <__mulsf3+0xb0>
    344c:	fa 85       	ldd	r31, Y+10	; 0x0a
    344e:	ea 89       	ldd	r30, Y+18	; 0x12
    3450:	2b 89       	ldd	r18, Y+19	; 0x13
    3452:	3c 89       	ldd	r19, Y+20	; 0x14
    3454:	8b 85       	ldd	r24, Y+11	; 0x0b
    3456:	9c 85       	ldd	r25, Y+12	; 0x0c
    3458:	28 0f       	add	r18, r24
    345a:	39 1f       	adc	r19, r25
    345c:	2e 5f       	subi	r18, 0xFE	; 254
    345e:	3f 4f       	sbci	r19, 0xFF	; 255
    3460:	17 c0       	rjmp	.+46     	; 0x3490 <__mulsf3+0x16e>
    3462:	ca 01       	movw	r24, r20
    3464:	81 70       	andi	r24, 0x01	; 1
    3466:	90 70       	andi	r25, 0x00	; 0
    3468:	89 2b       	or	r24, r25
    346a:	61 f0       	breq	.+24     	; 0x3484 <__mulsf3+0x162>
    346c:	16 95       	lsr	r17
    346e:	07 95       	ror	r16
    3470:	f7 94       	ror	r15
    3472:	e7 94       	ror	r14
    3474:	80 e0       	ldi	r24, 0x00	; 0
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	a0 e0       	ldi	r26, 0x00	; 0
    347a:	b0 e8       	ldi	r27, 0x80	; 128
    347c:	e8 2a       	or	r14, r24
    347e:	f9 2a       	or	r15, r25
    3480:	0a 2b       	or	r16, r26
    3482:	1b 2b       	or	r17, r27
    3484:	76 95       	lsr	r23
    3486:	67 95       	ror	r22
    3488:	57 95       	ror	r21
    348a:	47 95       	ror	r20
    348c:	2f 5f       	subi	r18, 0xFF	; 255
    348e:	3f 4f       	sbci	r19, 0xFF	; 255
    3490:	77 fd       	sbrc	r23, 7
    3492:	e7 cf       	rjmp	.-50     	; 0x3462 <__mulsf3+0x140>
    3494:	0c c0       	rjmp	.+24     	; 0x34ae <__mulsf3+0x18c>
    3496:	44 0f       	add	r20, r20
    3498:	55 1f       	adc	r21, r21
    349a:	66 1f       	adc	r22, r22
    349c:	77 1f       	adc	r23, r23
    349e:	17 fd       	sbrc	r17, 7
    34a0:	41 60       	ori	r20, 0x01	; 1
    34a2:	ee 0c       	add	r14, r14
    34a4:	ff 1c       	adc	r15, r15
    34a6:	00 1f       	adc	r16, r16
    34a8:	11 1f       	adc	r17, r17
    34aa:	21 50       	subi	r18, 0x01	; 1
    34ac:	30 40       	sbci	r19, 0x00	; 0
    34ae:	40 30       	cpi	r20, 0x00	; 0
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	59 07       	cpc	r21, r25
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	69 07       	cpc	r22, r25
    34b8:	90 e4       	ldi	r25, 0x40	; 64
    34ba:	79 07       	cpc	r23, r25
    34bc:	60 f3       	brcs	.-40     	; 0x3496 <__mulsf3+0x174>
    34be:	2b 8f       	std	Y+27, r18	; 0x1b
    34c0:	3c 8f       	std	Y+28, r19	; 0x1c
    34c2:	db 01       	movw	r26, r22
    34c4:	ca 01       	movw	r24, r20
    34c6:	8f 77       	andi	r24, 0x7F	; 127
    34c8:	90 70       	andi	r25, 0x00	; 0
    34ca:	a0 70       	andi	r26, 0x00	; 0
    34cc:	b0 70       	andi	r27, 0x00	; 0
    34ce:	80 34       	cpi	r24, 0x40	; 64
    34d0:	91 05       	cpc	r25, r1
    34d2:	a1 05       	cpc	r26, r1
    34d4:	b1 05       	cpc	r27, r1
    34d6:	61 f4       	brne	.+24     	; 0x34f0 <__mulsf3+0x1ce>
    34d8:	47 fd       	sbrc	r20, 7
    34da:	0a c0       	rjmp	.+20     	; 0x34f0 <__mulsf3+0x1ce>
    34dc:	e1 14       	cp	r14, r1
    34de:	f1 04       	cpc	r15, r1
    34e0:	01 05       	cpc	r16, r1
    34e2:	11 05       	cpc	r17, r1
    34e4:	29 f0       	breq	.+10     	; 0x34f0 <__mulsf3+0x1ce>
    34e6:	40 5c       	subi	r20, 0xC0	; 192
    34e8:	5f 4f       	sbci	r21, 0xFF	; 255
    34ea:	6f 4f       	sbci	r22, 0xFF	; 255
    34ec:	7f 4f       	sbci	r23, 0xFF	; 255
    34ee:	40 78       	andi	r20, 0x80	; 128
    34f0:	1a 8e       	std	Y+26, r1	; 0x1a
    34f2:	fe 17       	cp	r31, r30
    34f4:	11 f0       	breq	.+4      	; 0x34fa <__mulsf3+0x1d8>
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	8a 8f       	std	Y+26, r24	; 0x1a
    34fa:	4d 8f       	std	Y+29, r20	; 0x1d
    34fc:	5e 8f       	std	Y+30, r21	; 0x1e
    34fe:	6f 8f       	std	Y+31, r22	; 0x1f
    3500:	78 a3       	std	Y+32, r23	; 0x20
    3502:	83 e0       	ldi	r24, 0x03	; 3
    3504:	89 8f       	std	Y+25, r24	; 0x19
    3506:	ce 01       	movw	r24, r28
    3508:	49 96       	adiw	r24, 0x19	; 25
    350a:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__pack_f>
    350e:	a0 96       	adiw	r28, 0x20	; 32
    3510:	e2 e1       	ldi	r30, 0x12	; 18
    3512:	0c 94 17 1f 	jmp	0x3e2e	; 0x3e2e <__epilogue_restores__>

00003516 <__divsf3>:
    3516:	a8 e1       	ldi	r26, 0x18	; 24
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	e1 e9       	ldi	r30, 0x91	; 145
    351c:	fa e1       	ldi	r31, 0x1A	; 26
    351e:	0c 94 03 1f 	jmp	0x3e06	; 0x3e06 <__prologue_saves__+0x10>
    3522:	69 83       	std	Y+1, r22	; 0x01
    3524:	7a 83       	std	Y+2, r23	; 0x02
    3526:	8b 83       	std	Y+3, r24	; 0x03
    3528:	9c 83       	std	Y+4, r25	; 0x04
    352a:	2d 83       	std	Y+5, r18	; 0x05
    352c:	3e 83       	std	Y+6, r19	; 0x06
    352e:	4f 83       	std	Y+7, r20	; 0x07
    3530:	58 87       	std	Y+8, r21	; 0x08
    3532:	b9 e0       	ldi	r27, 0x09	; 9
    3534:	eb 2e       	mov	r14, r27
    3536:	f1 2c       	mov	r15, r1
    3538:	ec 0e       	add	r14, r28
    353a:	fd 1e       	adc	r15, r29
    353c:	ce 01       	movw	r24, r28
    353e:	01 96       	adiw	r24, 0x01	; 1
    3540:	b7 01       	movw	r22, r14
    3542:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__unpack_f>
    3546:	8e 01       	movw	r16, r28
    3548:	0f 5e       	subi	r16, 0xEF	; 239
    354a:	1f 4f       	sbci	r17, 0xFF	; 255
    354c:	ce 01       	movw	r24, r28
    354e:	05 96       	adiw	r24, 0x05	; 5
    3550:	b8 01       	movw	r22, r16
    3552:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__unpack_f>
    3556:	29 85       	ldd	r18, Y+9	; 0x09
    3558:	22 30       	cpi	r18, 0x02	; 2
    355a:	08 f4       	brcc	.+2      	; 0x355e <__divsf3+0x48>
    355c:	7e c0       	rjmp	.+252    	; 0x365a <__divsf3+0x144>
    355e:	39 89       	ldd	r19, Y+17	; 0x11
    3560:	32 30       	cpi	r19, 0x02	; 2
    3562:	10 f4       	brcc	.+4      	; 0x3568 <__divsf3+0x52>
    3564:	b8 01       	movw	r22, r16
    3566:	7c c0       	rjmp	.+248    	; 0x3660 <__divsf3+0x14a>
    3568:	8a 85       	ldd	r24, Y+10	; 0x0a
    356a:	9a 89       	ldd	r25, Y+18	; 0x12
    356c:	89 27       	eor	r24, r25
    356e:	8a 87       	std	Y+10, r24	; 0x0a
    3570:	24 30       	cpi	r18, 0x04	; 4
    3572:	11 f0       	breq	.+4      	; 0x3578 <__divsf3+0x62>
    3574:	22 30       	cpi	r18, 0x02	; 2
    3576:	31 f4       	brne	.+12     	; 0x3584 <__divsf3+0x6e>
    3578:	23 17       	cp	r18, r19
    357a:	09 f0       	breq	.+2      	; 0x357e <__divsf3+0x68>
    357c:	6e c0       	rjmp	.+220    	; 0x365a <__divsf3+0x144>
    357e:	68 e0       	ldi	r22, 0x08	; 8
    3580:	72 e0       	ldi	r23, 0x02	; 2
    3582:	6e c0       	rjmp	.+220    	; 0x3660 <__divsf3+0x14a>
    3584:	34 30       	cpi	r19, 0x04	; 4
    3586:	39 f4       	brne	.+14     	; 0x3596 <__divsf3+0x80>
    3588:	1d 86       	std	Y+13, r1	; 0x0d
    358a:	1e 86       	std	Y+14, r1	; 0x0e
    358c:	1f 86       	std	Y+15, r1	; 0x0f
    358e:	18 8a       	std	Y+16, r1	; 0x10
    3590:	1c 86       	std	Y+12, r1	; 0x0c
    3592:	1b 86       	std	Y+11, r1	; 0x0b
    3594:	04 c0       	rjmp	.+8      	; 0x359e <__divsf3+0x88>
    3596:	32 30       	cpi	r19, 0x02	; 2
    3598:	21 f4       	brne	.+8      	; 0x35a2 <__divsf3+0x8c>
    359a:	84 e0       	ldi	r24, 0x04	; 4
    359c:	89 87       	std	Y+9, r24	; 0x09
    359e:	b7 01       	movw	r22, r14
    35a0:	5f c0       	rjmp	.+190    	; 0x3660 <__divsf3+0x14a>
    35a2:	2b 85       	ldd	r18, Y+11	; 0x0b
    35a4:	3c 85       	ldd	r19, Y+12	; 0x0c
    35a6:	8b 89       	ldd	r24, Y+19	; 0x13
    35a8:	9c 89       	ldd	r25, Y+20	; 0x14
    35aa:	28 1b       	sub	r18, r24
    35ac:	39 0b       	sbc	r19, r25
    35ae:	3c 87       	std	Y+12, r19	; 0x0c
    35b0:	2b 87       	std	Y+11, r18	; 0x0b
    35b2:	ed 84       	ldd	r14, Y+13	; 0x0d
    35b4:	fe 84       	ldd	r15, Y+14	; 0x0e
    35b6:	0f 85       	ldd	r16, Y+15	; 0x0f
    35b8:	18 89       	ldd	r17, Y+16	; 0x10
    35ba:	ad 88       	ldd	r10, Y+21	; 0x15
    35bc:	be 88       	ldd	r11, Y+22	; 0x16
    35be:	cf 88       	ldd	r12, Y+23	; 0x17
    35c0:	d8 8c       	ldd	r13, Y+24	; 0x18
    35c2:	ea 14       	cp	r14, r10
    35c4:	fb 04       	cpc	r15, r11
    35c6:	0c 05       	cpc	r16, r12
    35c8:	1d 05       	cpc	r17, r13
    35ca:	40 f4       	brcc	.+16     	; 0x35dc <__divsf3+0xc6>
    35cc:	ee 0c       	add	r14, r14
    35ce:	ff 1c       	adc	r15, r15
    35d0:	00 1f       	adc	r16, r16
    35d2:	11 1f       	adc	r17, r17
    35d4:	21 50       	subi	r18, 0x01	; 1
    35d6:	30 40       	sbci	r19, 0x00	; 0
    35d8:	3c 87       	std	Y+12, r19	; 0x0c
    35da:	2b 87       	std	Y+11, r18	; 0x0b
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	40 e0       	ldi	r20, 0x00	; 0
    35e2:	50 e0       	ldi	r21, 0x00	; 0
    35e4:	80 e0       	ldi	r24, 0x00	; 0
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	a0 e0       	ldi	r26, 0x00	; 0
    35ea:	b0 e4       	ldi	r27, 0x40	; 64
    35ec:	60 e0       	ldi	r22, 0x00	; 0
    35ee:	70 e0       	ldi	r23, 0x00	; 0
    35f0:	ea 14       	cp	r14, r10
    35f2:	fb 04       	cpc	r15, r11
    35f4:	0c 05       	cpc	r16, r12
    35f6:	1d 05       	cpc	r17, r13
    35f8:	40 f0       	brcs	.+16     	; 0x360a <__divsf3+0xf4>
    35fa:	28 2b       	or	r18, r24
    35fc:	39 2b       	or	r19, r25
    35fe:	4a 2b       	or	r20, r26
    3600:	5b 2b       	or	r21, r27
    3602:	ea 18       	sub	r14, r10
    3604:	fb 08       	sbc	r15, r11
    3606:	0c 09       	sbc	r16, r12
    3608:	1d 09       	sbc	r17, r13
    360a:	b6 95       	lsr	r27
    360c:	a7 95       	ror	r26
    360e:	97 95       	ror	r25
    3610:	87 95       	ror	r24
    3612:	ee 0c       	add	r14, r14
    3614:	ff 1c       	adc	r15, r15
    3616:	00 1f       	adc	r16, r16
    3618:	11 1f       	adc	r17, r17
    361a:	6f 5f       	subi	r22, 0xFF	; 255
    361c:	7f 4f       	sbci	r23, 0xFF	; 255
    361e:	6f 31       	cpi	r22, 0x1F	; 31
    3620:	71 05       	cpc	r23, r1
    3622:	31 f7       	brne	.-52     	; 0x35f0 <__divsf3+0xda>
    3624:	da 01       	movw	r26, r20
    3626:	c9 01       	movw	r24, r18
    3628:	8f 77       	andi	r24, 0x7F	; 127
    362a:	90 70       	andi	r25, 0x00	; 0
    362c:	a0 70       	andi	r26, 0x00	; 0
    362e:	b0 70       	andi	r27, 0x00	; 0
    3630:	80 34       	cpi	r24, 0x40	; 64
    3632:	91 05       	cpc	r25, r1
    3634:	a1 05       	cpc	r26, r1
    3636:	b1 05       	cpc	r27, r1
    3638:	61 f4       	brne	.+24     	; 0x3652 <__divsf3+0x13c>
    363a:	27 fd       	sbrc	r18, 7
    363c:	0a c0       	rjmp	.+20     	; 0x3652 <__divsf3+0x13c>
    363e:	e1 14       	cp	r14, r1
    3640:	f1 04       	cpc	r15, r1
    3642:	01 05       	cpc	r16, r1
    3644:	11 05       	cpc	r17, r1
    3646:	29 f0       	breq	.+10     	; 0x3652 <__divsf3+0x13c>
    3648:	20 5c       	subi	r18, 0xC0	; 192
    364a:	3f 4f       	sbci	r19, 0xFF	; 255
    364c:	4f 4f       	sbci	r20, 0xFF	; 255
    364e:	5f 4f       	sbci	r21, 0xFF	; 255
    3650:	20 78       	andi	r18, 0x80	; 128
    3652:	2d 87       	std	Y+13, r18	; 0x0d
    3654:	3e 87       	std	Y+14, r19	; 0x0e
    3656:	4f 87       	std	Y+15, r20	; 0x0f
    3658:	58 8b       	std	Y+16, r21	; 0x10
    365a:	be 01       	movw	r22, r28
    365c:	67 5f       	subi	r22, 0xF7	; 247
    365e:	7f 4f       	sbci	r23, 0xFF	; 255
    3660:	cb 01       	movw	r24, r22
    3662:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__pack_f>
    3666:	68 96       	adiw	r28, 0x18	; 24
    3668:	ea e0       	ldi	r30, 0x0A	; 10
    366a:	0c 94 1f 1f 	jmp	0x3e3e	; 0x3e3e <__epilogue_restores__+0x10>

0000366e <__gtsf2>:
    366e:	a8 e1       	ldi	r26, 0x18	; 24
    3670:	b0 e0       	ldi	r27, 0x00	; 0
    3672:	ed e3       	ldi	r30, 0x3D	; 61
    3674:	fb e1       	ldi	r31, 0x1B	; 27
    3676:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__prologue_saves__+0x18>
    367a:	69 83       	std	Y+1, r22	; 0x01
    367c:	7a 83       	std	Y+2, r23	; 0x02
    367e:	8b 83       	std	Y+3, r24	; 0x03
    3680:	9c 83       	std	Y+4, r25	; 0x04
    3682:	2d 83       	std	Y+5, r18	; 0x05
    3684:	3e 83       	std	Y+6, r19	; 0x06
    3686:	4f 83       	std	Y+7, r20	; 0x07
    3688:	58 87       	std	Y+8, r21	; 0x08
    368a:	89 e0       	ldi	r24, 0x09	; 9
    368c:	e8 2e       	mov	r14, r24
    368e:	f1 2c       	mov	r15, r1
    3690:	ec 0e       	add	r14, r28
    3692:	fd 1e       	adc	r15, r29
    3694:	ce 01       	movw	r24, r28
    3696:	01 96       	adiw	r24, 0x01	; 1
    3698:	b7 01       	movw	r22, r14
    369a:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__unpack_f>
    369e:	8e 01       	movw	r16, r28
    36a0:	0f 5e       	subi	r16, 0xEF	; 239
    36a2:	1f 4f       	sbci	r17, 0xFF	; 255
    36a4:	ce 01       	movw	r24, r28
    36a6:	05 96       	adiw	r24, 0x05	; 5
    36a8:	b8 01       	movw	r22, r16
    36aa:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__unpack_f>
    36ae:	89 85       	ldd	r24, Y+9	; 0x09
    36b0:	82 30       	cpi	r24, 0x02	; 2
    36b2:	40 f0       	brcs	.+16     	; 0x36c4 <__gtsf2+0x56>
    36b4:	89 89       	ldd	r24, Y+17	; 0x11
    36b6:	82 30       	cpi	r24, 0x02	; 2
    36b8:	28 f0       	brcs	.+10     	; 0x36c4 <__gtsf2+0x56>
    36ba:	c7 01       	movw	r24, r14
    36bc:	b8 01       	movw	r22, r16
    36be:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <__fpcmp_parts_f>
    36c2:	01 c0       	rjmp	.+2      	; 0x36c6 <__gtsf2+0x58>
    36c4:	8f ef       	ldi	r24, 0xFF	; 255
    36c6:	68 96       	adiw	r28, 0x18	; 24
    36c8:	e6 e0       	ldi	r30, 0x06	; 6
    36ca:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__epilogue_restores__+0x18>

000036ce <__gesf2>:
    36ce:	a8 e1       	ldi	r26, 0x18	; 24
    36d0:	b0 e0       	ldi	r27, 0x00	; 0
    36d2:	ed e6       	ldi	r30, 0x6D	; 109
    36d4:	fb e1       	ldi	r31, 0x1B	; 27
    36d6:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__prologue_saves__+0x18>
    36da:	69 83       	std	Y+1, r22	; 0x01
    36dc:	7a 83       	std	Y+2, r23	; 0x02
    36de:	8b 83       	std	Y+3, r24	; 0x03
    36e0:	9c 83       	std	Y+4, r25	; 0x04
    36e2:	2d 83       	std	Y+5, r18	; 0x05
    36e4:	3e 83       	std	Y+6, r19	; 0x06
    36e6:	4f 83       	std	Y+7, r20	; 0x07
    36e8:	58 87       	std	Y+8, r21	; 0x08
    36ea:	89 e0       	ldi	r24, 0x09	; 9
    36ec:	e8 2e       	mov	r14, r24
    36ee:	f1 2c       	mov	r15, r1
    36f0:	ec 0e       	add	r14, r28
    36f2:	fd 1e       	adc	r15, r29
    36f4:	ce 01       	movw	r24, r28
    36f6:	01 96       	adiw	r24, 0x01	; 1
    36f8:	b7 01       	movw	r22, r14
    36fa:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__unpack_f>
    36fe:	8e 01       	movw	r16, r28
    3700:	0f 5e       	subi	r16, 0xEF	; 239
    3702:	1f 4f       	sbci	r17, 0xFF	; 255
    3704:	ce 01       	movw	r24, r28
    3706:	05 96       	adiw	r24, 0x05	; 5
    3708:	b8 01       	movw	r22, r16
    370a:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__unpack_f>
    370e:	89 85       	ldd	r24, Y+9	; 0x09
    3710:	82 30       	cpi	r24, 0x02	; 2
    3712:	40 f0       	brcs	.+16     	; 0x3724 <__gesf2+0x56>
    3714:	89 89       	ldd	r24, Y+17	; 0x11
    3716:	82 30       	cpi	r24, 0x02	; 2
    3718:	28 f0       	brcs	.+10     	; 0x3724 <__gesf2+0x56>
    371a:	c7 01       	movw	r24, r14
    371c:	b8 01       	movw	r22, r16
    371e:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <__fpcmp_parts_f>
    3722:	01 c0       	rjmp	.+2      	; 0x3726 <__gesf2+0x58>
    3724:	8f ef       	ldi	r24, 0xFF	; 255
    3726:	68 96       	adiw	r28, 0x18	; 24
    3728:	e6 e0       	ldi	r30, 0x06	; 6
    372a:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__epilogue_restores__+0x18>

0000372e <__ltsf2>:
    372e:	a8 e1       	ldi	r26, 0x18	; 24
    3730:	b0 e0       	ldi	r27, 0x00	; 0
    3732:	ed e9       	ldi	r30, 0x9D	; 157
    3734:	fb e1       	ldi	r31, 0x1B	; 27
    3736:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__prologue_saves__+0x18>
    373a:	69 83       	std	Y+1, r22	; 0x01
    373c:	7a 83       	std	Y+2, r23	; 0x02
    373e:	8b 83       	std	Y+3, r24	; 0x03
    3740:	9c 83       	std	Y+4, r25	; 0x04
    3742:	2d 83       	std	Y+5, r18	; 0x05
    3744:	3e 83       	std	Y+6, r19	; 0x06
    3746:	4f 83       	std	Y+7, r20	; 0x07
    3748:	58 87       	std	Y+8, r21	; 0x08
    374a:	89 e0       	ldi	r24, 0x09	; 9
    374c:	e8 2e       	mov	r14, r24
    374e:	f1 2c       	mov	r15, r1
    3750:	ec 0e       	add	r14, r28
    3752:	fd 1e       	adc	r15, r29
    3754:	ce 01       	movw	r24, r28
    3756:	01 96       	adiw	r24, 0x01	; 1
    3758:	b7 01       	movw	r22, r14
    375a:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__unpack_f>
    375e:	8e 01       	movw	r16, r28
    3760:	0f 5e       	subi	r16, 0xEF	; 239
    3762:	1f 4f       	sbci	r17, 0xFF	; 255
    3764:	ce 01       	movw	r24, r28
    3766:	05 96       	adiw	r24, 0x05	; 5
    3768:	b8 01       	movw	r22, r16
    376a:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__unpack_f>
    376e:	89 85       	ldd	r24, Y+9	; 0x09
    3770:	82 30       	cpi	r24, 0x02	; 2
    3772:	40 f0       	brcs	.+16     	; 0x3784 <__ltsf2+0x56>
    3774:	89 89       	ldd	r24, Y+17	; 0x11
    3776:	82 30       	cpi	r24, 0x02	; 2
    3778:	28 f0       	brcs	.+10     	; 0x3784 <__ltsf2+0x56>
    377a:	c7 01       	movw	r24, r14
    377c:	b8 01       	movw	r22, r16
    377e:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <__fpcmp_parts_f>
    3782:	01 c0       	rjmp	.+2      	; 0x3786 <__ltsf2+0x58>
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	68 96       	adiw	r28, 0x18	; 24
    3788:	e6 e0       	ldi	r30, 0x06	; 6
    378a:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__epilogue_restores__+0x18>

0000378e <__floatsisf>:
    378e:	a8 e0       	ldi	r26, 0x08	; 8
    3790:	b0 e0       	ldi	r27, 0x00	; 0
    3792:	ed ec       	ldi	r30, 0xCD	; 205
    3794:	fb e1       	ldi	r31, 0x1B	; 27
    3796:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__prologue_saves__+0x12>
    379a:	9b 01       	movw	r18, r22
    379c:	ac 01       	movw	r20, r24
    379e:	83 e0       	ldi	r24, 0x03	; 3
    37a0:	89 83       	std	Y+1, r24	; 0x01
    37a2:	da 01       	movw	r26, r20
    37a4:	c9 01       	movw	r24, r18
    37a6:	88 27       	eor	r24, r24
    37a8:	b7 fd       	sbrc	r27, 7
    37aa:	83 95       	inc	r24
    37ac:	99 27       	eor	r25, r25
    37ae:	aa 27       	eor	r26, r26
    37b0:	bb 27       	eor	r27, r27
    37b2:	b8 2e       	mov	r11, r24
    37b4:	21 15       	cp	r18, r1
    37b6:	31 05       	cpc	r19, r1
    37b8:	41 05       	cpc	r20, r1
    37ba:	51 05       	cpc	r21, r1
    37bc:	19 f4       	brne	.+6      	; 0x37c4 <__floatsisf+0x36>
    37be:	82 e0       	ldi	r24, 0x02	; 2
    37c0:	89 83       	std	Y+1, r24	; 0x01
    37c2:	3a c0       	rjmp	.+116    	; 0x3838 <__floatsisf+0xaa>
    37c4:	88 23       	and	r24, r24
    37c6:	a9 f0       	breq	.+42     	; 0x37f2 <__floatsisf+0x64>
    37c8:	20 30       	cpi	r18, 0x00	; 0
    37ca:	80 e0       	ldi	r24, 0x00	; 0
    37cc:	38 07       	cpc	r19, r24
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	48 07       	cpc	r20, r24
    37d2:	80 e8       	ldi	r24, 0x80	; 128
    37d4:	58 07       	cpc	r21, r24
    37d6:	29 f4       	brne	.+10     	; 0x37e2 <__floatsisf+0x54>
    37d8:	60 e0       	ldi	r22, 0x00	; 0
    37da:	70 e0       	ldi	r23, 0x00	; 0
    37dc:	80 e0       	ldi	r24, 0x00	; 0
    37de:	9f ec       	ldi	r25, 0xCF	; 207
    37e0:	30 c0       	rjmp	.+96     	; 0x3842 <__floatsisf+0xb4>
    37e2:	ee 24       	eor	r14, r14
    37e4:	ff 24       	eor	r15, r15
    37e6:	87 01       	movw	r16, r14
    37e8:	e2 1a       	sub	r14, r18
    37ea:	f3 0a       	sbc	r15, r19
    37ec:	04 0b       	sbc	r16, r20
    37ee:	15 0b       	sbc	r17, r21
    37f0:	02 c0       	rjmp	.+4      	; 0x37f6 <__floatsisf+0x68>
    37f2:	79 01       	movw	r14, r18
    37f4:	8a 01       	movw	r16, r20
    37f6:	8e e1       	ldi	r24, 0x1E	; 30
    37f8:	c8 2e       	mov	r12, r24
    37fa:	d1 2c       	mov	r13, r1
    37fc:	dc 82       	std	Y+4, r13	; 0x04
    37fe:	cb 82       	std	Y+3, r12	; 0x03
    3800:	ed 82       	std	Y+5, r14	; 0x05
    3802:	fe 82       	std	Y+6, r15	; 0x06
    3804:	0f 83       	std	Y+7, r16	; 0x07
    3806:	18 87       	std	Y+8, r17	; 0x08
    3808:	c8 01       	movw	r24, r16
    380a:	b7 01       	movw	r22, r14
    380c:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__clzsi2>
    3810:	01 97       	sbiw	r24, 0x01	; 1
    3812:	18 16       	cp	r1, r24
    3814:	19 06       	cpc	r1, r25
    3816:	84 f4       	brge	.+32     	; 0x3838 <__floatsisf+0xaa>
    3818:	08 2e       	mov	r0, r24
    381a:	04 c0       	rjmp	.+8      	; 0x3824 <__floatsisf+0x96>
    381c:	ee 0c       	add	r14, r14
    381e:	ff 1c       	adc	r15, r15
    3820:	00 1f       	adc	r16, r16
    3822:	11 1f       	adc	r17, r17
    3824:	0a 94       	dec	r0
    3826:	d2 f7       	brpl	.-12     	; 0x381c <__floatsisf+0x8e>
    3828:	ed 82       	std	Y+5, r14	; 0x05
    382a:	fe 82       	std	Y+6, r15	; 0x06
    382c:	0f 83       	std	Y+7, r16	; 0x07
    382e:	18 87       	std	Y+8, r17	; 0x08
    3830:	c8 1a       	sub	r12, r24
    3832:	d9 0a       	sbc	r13, r25
    3834:	dc 82       	std	Y+4, r13	; 0x04
    3836:	cb 82       	std	Y+3, r12	; 0x03
    3838:	ba 82       	std	Y+2, r11	; 0x02
    383a:	ce 01       	movw	r24, r28
    383c:	01 96       	adiw	r24, 0x01	; 1
    383e:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__pack_f>
    3842:	28 96       	adiw	r28, 0x08	; 8
    3844:	e9 e0       	ldi	r30, 0x09	; 9
    3846:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__epilogue_restores__+0x12>

0000384a <__fixsfsi>:
    384a:	ac e0       	ldi	r26, 0x0C	; 12
    384c:	b0 e0       	ldi	r27, 0x00	; 0
    384e:	eb e2       	ldi	r30, 0x2B	; 43
    3850:	fc e1       	ldi	r31, 0x1C	; 28
    3852:	0c 94 0b 1f 	jmp	0x3e16	; 0x3e16 <__prologue_saves__+0x20>
    3856:	69 83       	std	Y+1, r22	; 0x01
    3858:	7a 83       	std	Y+2, r23	; 0x02
    385a:	8b 83       	std	Y+3, r24	; 0x03
    385c:	9c 83       	std	Y+4, r25	; 0x04
    385e:	ce 01       	movw	r24, r28
    3860:	01 96       	adiw	r24, 0x01	; 1
    3862:	be 01       	movw	r22, r28
    3864:	6b 5f       	subi	r22, 0xFB	; 251
    3866:	7f 4f       	sbci	r23, 0xFF	; 255
    3868:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__unpack_f>
    386c:	8d 81       	ldd	r24, Y+5	; 0x05
    386e:	82 30       	cpi	r24, 0x02	; 2
    3870:	61 f1       	breq	.+88     	; 0x38ca <__fixsfsi+0x80>
    3872:	82 30       	cpi	r24, 0x02	; 2
    3874:	50 f1       	brcs	.+84     	; 0x38ca <__fixsfsi+0x80>
    3876:	84 30       	cpi	r24, 0x04	; 4
    3878:	21 f4       	brne	.+8      	; 0x3882 <__fixsfsi+0x38>
    387a:	8e 81       	ldd	r24, Y+6	; 0x06
    387c:	88 23       	and	r24, r24
    387e:	51 f1       	breq	.+84     	; 0x38d4 <__fixsfsi+0x8a>
    3880:	2e c0       	rjmp	.+92     	; 0x38de <__fixsfsi+0x94>
    3882:	2f 81       	ldd	r18, Y+7	; 0x07
    3884:	38 85       	ldd	r19, Y+8	; 0x08
    3886:	37 fd       	sbrc	r19, 7
    3888:	20 c0       	rjmp	.+64     	; 0x38ca <__fixsfsi+0x80>
    388a:	6e 81       	ldd	r22, Y+6	; 0x06
    388c:	2f 31       	cpi	r18, 0x1F	; 31
    388e:	31 05       	cpc	r19, r1
    3890:	1c f0       	brlt	.+6      	; 0x3898 <__fixsfsi+0x4e>
    3892:	66 23       	and	r22, r22
    3894:	f9 f0       	breq	.+62     	; 0x38d4 <__fixsfsi+0x8a>
    3896:	23 c0       	rjmp	.+70     	; 0x38de <__fixsfsi+0x94>
    3898:	8e e1       	ldi	r24, 0x1E	; 30
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	82 1b       	sub	r24, r18
    389e:	93 0b       	sbc	r25, r19
    38a0:	29 85       	ldd	r18, Y+9	; 0x09
    38a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    38a4:	4b 85       	ldd	r20, Y+11	; 0x0b
    38a6:	5c 85       	ldd	r21, Y+12	; 0x0c
    38a8:	04 c0       	rjmp	.+8      	; 0x38b2 <__fixsfsi+0x68>
    38aa:	56 95       	lsr	r21
    38ac:	47 95       	ror	r20
    38ae:	37 95       	ror	r19
    38b0:	27 95       	ror	r18
    38b2:	8a 95       	dec	r24
    38b4:	d2 f7       	brpl	.-12     	; 0x38aa <__fixsfsi+0x60>
    38b6:	66 23       	and	r22, r22
    38b8:	b1 f0       	breq	.+44     	; 0x38e6 <__fixsfsi+0x9c>
    38ba:	50 95       	com	r21
    38bc:	40 95       	com	r20
    38be:	30 95       	com	r19
    38c0:	21 95       	neg	r18
    38c2:	3f 4f       	sbci	r19, 0xFF	; 255
    38c4:	4f 4f       	sbci	r20, 0xFF	; 255
    38c6:	5f 4f       	sbci	r21, 0xFF	; 255
    38c8:	0e c0       	rjmp	.+28     	; 0x38e6 <__fixsfsi+0x9c>
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	40 e0       	ldi	r20, 0x00	; 0
    38d0:	50 e0       	ldi	r21, 0x00	; 0
    38d2:	09 c0       	rjmp	.+18     	; 0x38e6 <__fixsfsi+0x9c>
    38d4:	2f ef       	ldi	r18, 0xFF	; 255
    38d6:	3f ef       	ldi	r19, 0xFF	; 255
    38d8:	4f ef       	ldi	r20, 0xFF	; 255
    38da:	5f e7       	ldi	r21, 0x7F	; 127
    38dc:	04 c0       	rjmp	.+8      	; 0x38e6 <__fixsfsi+0x9c>
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	40 e0       	ldi	r20, 0x00	; 0
    38e4:	50 e8       	ldi	r21, 0x80	; 128
    38e6:	b9 01       	movw	r22, r18
    38e8:	ca 01       	movw	r24, r20
    38ea:	2c 96       	adiw	r28, 0x0c	; 12
    38ec:	e2 e0       	ldi	r30, 0x02	; 2
    38ee:	0c 94 27 1f 	jmp	0x3e4e	; 0x3e4e <__epilogue_restores__+0x20>

000038f2 <__floatunsisf>:
    38f2:	a8 e0       	ldi	r26, 0x08	; 8
    38f4:	b0 e0       	ldi	r27, 0x00	; 0
    38f6:	ef e7       	ldi	r30, 0x7F	; 127
    38f8:	fc e1       	ldi	r31, 0x1C	; 28
    38fa:	0c 94 03 1f 	jmp	0x3e06	; 0x3e06 <__prologue_saves__+0x10>
    38fe:	7b 01       	movw	r14, r22
    3900:	8c 01       	movw	r16, r24
    3902:	61 15       	cp	r22, r1
    3904:	71 05       	cpc	r23, r1
    3906:	81 05       	cpc	r24, r1
    3908:	91 05       	cpc	r25, r1
    390a:	19 f4       	brne	.+6      	; 0x3912 <__floatunsisf+0x20>
    390c:	82 e0       	ldi	r24, 0x02	; 2
    390e:	89 83       	std	Y+1, r24	; 0x01
    3910:	60 c0       	rjmp	.+192    	; 0x39d2 <__floatunsisf+0xe0>
    3912:	83 e0       	ldi	r24, 0x03	; 3
    3914:	89 83       	std	Y+1, r24	; 0x01
    3916:	8e e1       	ldi	r24, 0x1E	; 30
    3918:	c8 2e       	mov	r12, r24
    391a:	d1 2c       	mov	r13, r1
    391c:	dc 82       	std	Y+4, r13	; 0x04
    391e:	cb 82       	std	Y+3, r12	; 0x03
    3920:	ed 82       	std	Y+5, r14	; 0x05
    3922:	fe 82       	std	Y+6, r15	; 0x06
    3924:	0f 83       	std	Y+7, r16	; 0x07
    3926:	18 87       	std	Y+8, r17	; 0x08
    3928:	c8 01       	movw	r24, r16
    392a:	b7 01       	movw	r22, r14
    392c:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__clzsi2>
    3930:	fc 01       	movw	r30, r24
    3932:	31 97       	sbiw	r30, 0x01	; 1
    3934:	f7 ff       	sbrs	r31, 7
    3936:	3b c0       	rjmp	.+118    	; 0x39ae <__floatunsisf+0xbc>
    3938:	22 27       	eor	r18, r18
    393a:	33 27       	eor	r19, r19
    393c:	2e 1b       	sub	r18, r30
    393e:	3f 0b       	sbc	r19, r31
    3940:	57 01       	movw	r10, r14
    3942:	68 01       	movw	r12, r16
    3944:	02 2e       	mov	r0, r18
    3946:	04 c0       	rjmp	.+8      	; 0x3950 <__floatunsisf+0x5e>
    3948:	d6 94       	lsr	r13
    394a:	c7 94       	ror	r12
    394c:	b7 94       	ror	r11
    394e:	a7 94       	ror	r10
    3950:	0a 94       	dec	r0
    3952:	d2 f7       	brpl	.-12     	; 0x3948 <__floatunsisf+0x56>
    3954:	40 e0       	ldi	r20, 0x00	; 0
    3956:	50 e0       	ldi	r21, 0x00	; 0
    3958:	60 e0       	ldi	r22, 0x00	; 0
    395a:	70 e0       	ldi	r23, 0x00	; 0
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	a0 e0       	ldi	r26, 0x00	; 0
    3962:	b0 e0       	ldi	r27, 0x00	; 0
    3964:	04 c0       	rjmp	.+8      	; 0x396e <__floatunsisf+0x7c>
    3966:	88 0f       	add	r24, r24
    3968:	99 1f       	adc	r25, r25
    396a:	aa 1f       	adc	r26, r26
    396c:	bb 1f       	adc	r27, r27
    396e:	2a 95       	dec	r18
    3970:	d2 f7       	brpl	.-12     	; 0x3966 <__floatunsisf+0x74>
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	a1 09       	sbc	r26, r1
    3976:	b1 09       	sbc	r27, r1
    3978:	8e 21       	and	r24, r14
    397a:	9f 21       	and	r25, r15
    397c:	a0 23       	and	r26, r16
    397e:	b1 23       	and	r27, r17
    3980:	00 97       	sbiw	r24, 0x00	; 0
    3982:	a1 05       	cpc	r26, r1
    3984:	b1 05       	cpc	r27, r1
    3986:	21 f0       	breq	.+8      	; 0x3990 <__floatunsisf+0x9e>
    3988:	41 e0       	ldi	r20, 0x01	; 1
    398a:	50 e0       	ldi	r21, 0x00	; 0
    398c:	60 e0       	ldi	r22, 0x00	; 0
    398e:	70 e0       	ldi	r23, 0x00	; 0
    3990:	4a 29       	or	r20, r10
    3992:	5b 29       	or	r21, r11
    3994:	6c 29       	or	r22, r12
    3996:	7d 29       	or	r23, r13
    3998:	4d 83       	std	Y+5, r20	; 0x05
    399a:	5e 83       	std	Y+6, r21	; 0x06
    399c:	6f 83       	std	Y+7, r22	; 0x07
    399e:	78 87       	std	Y+8, r23	; 0x08
    39a0:	8e e1       	ldi	r24, 0x1E	; 30
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	8e 1b       	sub	r24, r30
    39a6:	9f 0b       	sbc	r25, r31
    39a8:	9c 83       	std	Y+4, r25	; 0x04
    39aa:	8b 83       	std	Y+3, r24	; 0x03
    39ac:	12 c0       	rjmp	.+36     	; 0x39d2 <__floatunsisf+0xe0>
    39ae:	30 97       	sbiw	r30, 0x00	; 0
    39b0:	81 f0       	breq	.+32     	; 0x39d2 <__floatunsisf+0xe0>
    39b2:	0e 2e       	mov	r0, r30
    39b4:	04 c0       	rjmp	.+8      	; 0x39be <__floatunsisf+0xcc>
    39b6:	ee 0c       	add	r14, r14
    39b8:	ff 1c       	adc	r15, r15
    39ba:	00 1f       	adc	r16, r16
    39bc:	11 1f       	adc	r17, r17
    39be:	0a 94       	dec	r0
    39c0:	d2 f7       	brpl	.-12     	; 0x39b6 <__floatunsisf+0xc4>
    39c2:	ed 82       	std	Y+5, r14	; 0x05
    39c4:	fe 82       	std	Y+6, r15	; 0x06
    39c6:	0f 83       	std	Y+7, r16	; 0x07
    39c8:	18 87       	std	Y+8, r17	; 0x08
    39ca:	ce 1a       	sub	r12, r30
    39cc:	df 0a       	sbc	r13, r31
    39ce:	dc 82       	std	Y+4, r13	; 0x04
    39d0:	cb 82       	std	Y+3, r12	; 0x03
    39d2:	1a 82       	std	Y+2, r1	; 0x02
    39d4:	ce 01       	movw	r24, r28
    39d6:	01 96       	adiw	r24, 0x01	; 1
    39d8:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__pack_f>
    39dc:	28 96       	adiw	r28, 0x08	; 8
    39de:	ea e0       	ldi	r30, 0x0A	; 10
    39e0:	0c 94 1f 1f 	jmp	0x3e3e	; 0x3e3e <__epilogue_restores__+0x10>

000039e4 <__clzsi2>:
    39e4:	ef 92       	push	r14
    39e6:	ff 92       	push	r15
    39e8:	0f 93       	push	r16
    39ea:	1f 93       	push	r17
    39ec:	7b 01       	movw	r14, r22
    39ee:	8c 01       	movw	r16, r24
    39f0:	80 e0       	ldi	r24, 0x00	; 0
    39f2:	e8 16       	cp	r14, r24
    39f4:	80 e0       	ldi	r24, 0x00	; 0
    39f6:	f8 06       	cpc	r15, r24
    39f8:	81 e0       	ldi	r24, 0x01	; 1
    39fa:	08 07       	cpc	r16, r24
    39fc:	80 e0       	ldi	r24, 0x00	; 0
    39fe:	18 07       	cpc	r17, r24
    3a00:	88 f4       	brcc	.+34     	; 0x3a24 <__clzsi2+0x40>
    3a02:	8f ef       	ldi	r24, 0xFF	; 255
    3a04:	e8 16       	cp	r14, r24
    3a06:	f1 04       	cpc	r15, r1
    3a08:	01 05       	cpc	r16, r1
    3a0a:	11 05       	cpc	r17, r1
    3a0c:	31 f0       	breq	.+12     	; 0x3a1a <__clzsi2+0x36>
    3a0e:	28 f0       	brcs	.+10     	; 0x3a1a <__clzsi2+0x36>
    3a10:	88 e0       	ldi	r24, 0x08	; 8
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	a0 e0       	ldi	r26, 0x00	; 0
    3a16:	b0 e0       	ldi	r27, 0x00	; 0
    3a18:	17 c0       	rjmp	.+46     	; 0x3a48 <__clzsi2+0x64>
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	a0 e0       	ldi	r26, 0x00	; 0
    3a20:	b0 e0       	ldi	r27, 0x00	; 0
    3a22:	12 c0       	rjmp	.+36     	; 0x3a48 <__clzsi2+0x64>
    3a24:	80 e0       	ldi	r24, 0x00	; 0
    3a26:	e8 16       	cp	r14, r24
    3a28:	80 e0       	ldi	r24, 0x00	; 0
    3a2a:	f8 06       	cpc	r15, r24
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	08 07       	cpc	r16, r24
    3a30:	81 e0       	ldi	r24, 0x01	; 1
    3a32:	18 07       	cpc	r17, r24
    3a34:	28 f0       	brcs	.+10     	; 0x3a40 <__clzsi2+0x5c>
    3a36:	88 e1       	ldi	r24, 0x18	; 24
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	a0 e0       	ldi	r26, 0x00	; 0
    3a3c:	b0 e0       	ldi	r27, 0x00	; 0
    3a3e:	04 c0       	rjmp	.+8      	; 0x3a48 <__clzsi2+0x64>
    3a40:	80 e1       	ldi	r24, 0x10	; 16
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	a0 e0       	ldi	r26, 0x00	; 0
    3a46:	b0 e0       	ldi	r27, 0x00	; 0
    3a48:	20 e2       	ldi	r18, 0x20	; 32
    3a4a:	30 e0       	ldi	r19, 0x00	; 0
    3a4c:	40 e0       	ldi	r20, 0x00	; 0
    3a4e:	50 e0       	ldi	r21, 0x00	; 0
    3a50:	28 1b       	sub	r18, r24
    3a52:	39 0b       	sbc	r19, r25
    3a54:	4a 0b       	sbc	r20, r26
    3a56:	5b 0b       	sbc	r21, r27
    3a58:	04 c0       	rjmp	.+8      	; 0x3a62 <__clzsi2+0x7e>
    3a5a:	16 95       	lsr	r17
    3a5c:	07 95       	ror	r16
    3a5e:	f7 94       	ror	r15
    3a60:	e7 94       	ror	r14
    3a62:	8a 95       	dec	r24
    3a64:	d2 f7       	brpl	.-12     	; 0x3a5a <__clzsi2+0x76>
    3a66:	f7 01       	movw	r30, r14
    3a68:	e0 5f       	subi	r30, 0xF0	; 240
    3a6a:	fd 4f       	sbci	r31, 0xFD	; 253
    3a6c:	80 81       	ld	r24, Z
    3a6e:	28 1b       	sub	r18, r24
    3a70:	31 09       	sbc	r19, r1
    3a72:	41 09       	sbc	r20, r1
    3a74:	51 09       	sbc	r21, r1
    3a76:	c9 01       	movw	r24, r18
    3a78:	1f 91       	pop	r17
    3a7a:	0f 91       	pop	r16
    3a7c:	ff 90       	pop	r15
    3a7e:	ef 90       	pop	r14
    3a80:	08 95       	ret

00003a82 <__pack_f>:
    3a82:	df 92       	push	r13
    3a84:	ef 92       	push	r14
    3a86:	ff 92       	push	r15
    3a88:	0f 93       	push	r16
    3a8a:	1f 93       	push	r17
    3a8c:	fc 01       	movw	r30, r24
    3a8e:	e4 80       	ldd	r14, Z+4	; 0x04
    3a90:	f5 80       	ldd	r15, Z+5	; 0x05
    3a92:	06 81       	ldd	r16, Z+6	; 0x06
    3a94:	17 81       	ldd	r17, Z+7	; 0x07
    3a96:	d1 80       	ldd	r13, Z+1	; 0x01
    3a98:	80 81       	ld	r24, Z
    3a9a:	82 30       	cpi	r24, 0x02	; 2
    3a9c:	48 f4       	brcc	.+18     	; 0x3ab0 <__pack_f+0x2e>
    3a9e:	80 e0       	ldi	r24, 0x00	; 0
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	a0 e1       	ldi	r26, 0x10	; 16
    3aa4:	b0 e0       	ldi	r27, 0x00	; 0
    3aa6:	e8 2a       	or	r14, r24
    3aa8:	f9 2a       	or	r15, r25
    3aaa:	0a 2b       	or	r16, r26
    3aac:	1b 2b       	or	r17, r27
    3aae:	a5 c0       	rjmp	.+330    	; 0x3bfa <__pack_f+0x178>
    3ab0:	84 30       	cpi	r24, 0x04	; 4
    3ab2:	09 f4       	brne	.+2      	; 0x3ab6 <__pack_f+0x34>
    3ab4:	9f c0       	rjmp	.+318    	; 0x3bf4 <__pack_f+0x172>
    3ab6:	82 30       	cpi	r24, 0x02	; 2
    3ab8:	21 f4       	brne	.+8      	; 0x3ac2 <__pack_f+0x40>
    3aba:	ee 24       	eor	r14, r14
    3abc:	ff 24       	eor	r15, r15
    3abe:	87 01       	movw	r16, r14
    3ac0:	05 c0       	rjmp	.+10     	; 0x3acc <__pack_f+0x4a>
    3ac2:	e1 14       	cp	r14, r1
    3ac4:	f1 04       	cpc	r15, r1
    3ac6:	01 05       	cpc	r16, r1
    3ac8:	11 05       	cpc	r17, r1
    3aca:	19 f4       	brne	.+6      	; 0x3ad2 <__pack_f+0x50>
    3acc:	e0 e0       	ldi	r30, 0x00	; 0
    3ace:	f0 e0       	ldi	r31, 0x00	; 0
    3ad0:	96 c0       	rjmp	.+300    	; 0x3bfe <__pack_f+0x17c>
    3ad2:	62 81       	ldd	r22, Z+2	; 0x02
    3ad4:	73 81       	ldd	r23, Z+3	; 0x03
    3ad6:	9f ef       	ldi	r25, 0xFF	; 255
    3ad8:	62 38       	cpi	r22, 0x82	; 130
    3ada:	79 07       	cpc	r23, r25
    3adc:	0c f0       	brlt	.+2      	; 0x3ae0 <__pack_f+0x5e>
    3ade:	5b c0       	rjmp	.+182    	; 0x3b96 <__pack_f+0x114>
    3ae0:	22 e8       	ldi	r18, 0x82	; 130
    3ae2:	3f ef       	ldi	r19, 0xFF	; 255
    3ae4:	26 1b       	sub	r18, r22
    3ae6:	37 0b       	sbc	r19, r23
    3ae8:	2a 31       	cpi	r18, 0x1A	; 26
    3aea:	31 05       	cpc	r19, r1
    3aec:	2c f0       	brlt	.+10     	; 0x3af8 <__pack_f+0x76>
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	40 e0       	ldi	r20, 0x00	; 0
    3af4:	50 e0       	ldi	r21, 0x00	; 0
    3af6:	2a c0       	rjmp	.+84     	; 0x3b4c <__pack_f+0xca>
    3af8:	b8 01       	movw	r22, r16
    3afa:	a7 01       	movw	r20, r14
    3afc:	02 2e       	mov	r0, r18
    3afe:	04 c0       	rjmp	.+8      	; 0x3b08 <__pack_f+0x86>
    3b00:	76 95       	lsr	r23
    3b02:	67 95       	ror	r22
    3b04:	57 95       	ror	r21
    3b06:	47 95       	ror	r20
    3b08:	0a 94       	dec	r0
    3b0a:	d2 f7       	brpl	.-12     	; 0x3b00 <__pack_f+0x7e>
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	a0 e0       	ldi	r26, 0x00	; 0
    3b12:	b0 e0       	ldi	r27, 0x00	; 0
    3b14:	04 c0       	rjmp	.+8      	; 0x3b1e <__pack_f+0x9c>
    3b16:	88 0f       	add	r24, r24
    3b18:	99 1f       	adc	r25, r25
    3b1a:	aa 1f       	adc	r26, r26
    3b1c:	bb 1f       	adc	r27, r27
    3b1e:	2a 95       	dec	r18
    3b20:	d2 f7       	brpl	.-12     	; 0x3b16 <__pack_f+0x94>
    3b22:	01 97       	sbiw	r24, 0x01	; 1
    3b24:	a1 09       	sbc	r26, r1
    3b26:	b1 09       	sbc	r27, r1
    3b28:	8e 21       	and	r24, r14
    3b2a:	9f 21       	and	r25, r15
    3b2c:	a0 23       	and	r26, r16
    3b2e:	b1 23       	and	r27, r17
    3b30:	00 97       	sbiw	r24, 0x00	; 0
    3b32:	a1 05       	cpc	r26, r1
    3b34:	b1 05       	cpc	r27, r1
    3b36:	21 f0       	breq	.+8      	; 0x3b40 <__pack_f+0xbe>
    3b38:	81 e0       	ldi	r24, 0x01	; 1
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	a0 e0       	ldi	r26, 0x00	; 0
    3b3e:	b0 e0       	ldi	r27, 0x00	; 0
    3b40:	9a 01       	movw	r18, r20
    3b42:	ab 01       	movw	r20, r22
    3b44:	28 2b       	or	r18, r24
    3b46:	39 2b       	or	r19, r25
    3b48:	4a 2b       	or	r20, r26
    3b4a:	5b 2b       	or	r21, r27
    3b4c:	da 01       	movw	r26, r20
    3b4e:	c9 01       	movw	r24, r18
    3b50:	8f 77       	andi	r24, 0x7F	; 127
    3b52:	90 70       	andi	r25, 0x00	; 0
    3b54:	a0 70       	andi	r26, 0x00	; 0
    3b56:	b0 70       	andi	r27, 0x00	; 0
    3b58:	80 34       	cpi	r24, 0x40	; 64
    3b5a:	91 05       	cpc	r25, r1
    3b5c:	a1 05       	cpc	r26, r1
    3b5e:	b1 05       	cpc	r27, r1
    3b60:	39 f4       	brne	.+14     	; 0x3b70 <__pack_f+0xee>
    3b62:	27 ff       	sbrs	r18, 7
    3b64:	09 c0       	rjmp	.+18     	; 0x3b78 <__pack_f+0xf6>
    3b66:	20 5c       	subi	r18, 0xC0	; 192
    3b68:	3f 4f       	sbci	r19, 0xFF	; 255
    3b6a:	4f 4f       	sbci	r20, 0xFF	; 255
    3b6c:	5f 4f       	sbci	r21, 0xFF	; 255
    3b6e:	04 c0       	rjmp	.+8      	; 0x3b78 <__pack_f+0xf6>
    3b70:	21 5c       	subi	r18, 0xC1	; 193
    3b72:	3f 4f       	sbci	r19, 0xFF	; 255
    3b74:	4f 4f       	sbci	r20, 0xFF	; 255
    3b76:	5f 4f       	sbci	r21, 0xFF	; 255
    3b78:	e0 e0       	ldi	r30, 0x00	; 0
    3b7a:	f0 e0       	ldi	r31, 0x00	; 0
    3b7c:	20 30       	cpi	r18, 0x00	; 0
    3b7e:	a0 e0       	ldi	r26, 0x00	; 0
    3b80:	3a 07       	cpc	r19, r26
    3b82:	a0 e0       	ldi	r26, 0x00	; 0
    3b84:	4a 07       	cpc	r20, r26
    3b86:	a0 e4       	ldi	r26, 0x40	; 64
    3b88:	5a 07       	cpc	r21, r26
    3b8a:	10 f0       	brcs	.+4      	; 0x3b90 <__pack_f+0x10e>
    3b8c:	e1 e0       	ldi	r30, 0x01	; 1
    3b8e:	f0 e0       	ldi	r31, 0x00	; 0
    3b90:	79 01       	movw	r14, r18
    3b92:	8a 01       	movw	r16, r20
    3b94:	27 c0       	rjmp	.+78     	; 0x3be4 <__pack_f+0x162>
    3b96:	60 38       	cpi	r22, 0x80	; 128
    3b98:	71 05       	cpc	r23, r1
    3b9a:	64 f5       	brge	.+88     	; 0x3bf4 <__pack_f+0x172>
    3b9c:	fb 01       	movw	r30, r22
    3b9e:	e1 58       	subi	r30, 0x81	; 129
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	d8 01       	movw	r26, r16
    3ba4:	c7 01       	movw	r24, r14
    3ba6:	8f 77       	andi	r24, 0x7F	; 127
    3ba8:	90 70       	andi	r25, 0x00	; 0
    3baa:	a0 70       	andi	r26, 0x00	; 0
    3bac:	b0 70       	andi	r27, 0x00	; 0
    3bae:	80 34       	cpi	r24, 0x40	; 64
    3bb0:	91 05       	cpc	r25, r1
    3bb2:	a1 05       	cpc	r26, r1
    3bb4:	b1 05       	cpc	r27, r1
    3bb6:	39 f4       	brne	.+14     	; 0x3bc6 <__pack_f+0x144>
    3bb8:	e7 fe       	sbrs	r14, 7
    3bba:	0d c0       	rjmp	.+26     	; 0x3bd6 <__pack_f+0x154>
    3bbc:	80 e4       	ldi	r24, 0x40	; 64
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	a0 e0       	ldi	r26, 0x00	; 0
    3bc2:	b0 e0       	ldi	r27, 0x00	; 0
    3bc4:	04 c0       	rjmp	.+8      	; 0x3bce <__pack_f+0x14c>
    3bc6:	8f e3       	ldi	r24, 0x3F	; 63
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	a0 e0       	ldi	r26, 0x00	; 0
    3bcc:	b0 e0       	ldi	r27, 0x00	; 0
    3bce:	e8 0e       	add	r14, r24
    3bd0:	f9 1e       	adc	r15, r25
    3bd2:	0a 1f       	adc	r16, r26
    3bd4:	1b 1f       	adc	r17, r27
    3bd6:	17 ff       	sbrs	r17, 7
    3bd8:	05 c0       	rjmp	.+10     	; 0x3be4 <__pack_f+0x162>
    3bda:	16 95       	lsr	r17
    3bdc:	07 95       	ror	r16
    3bde:	f7 94       	ror	r15
    3be0:	e7 94       	ror	r14
    3be2:	31 96       	adiw	r30, 0x01	; 1
    3be4:	87 e0       	ldi	r24, 0x07	; 7
    3be6:	16 95       	lsr	r17
    3be8:	07 95       	ror	r16
    3bea:	f7 94       	ror	r15
    3bec:	e7 94       	ror	r14
    3bee:	8a 95       	dec	r24
    3bf0:	d1 f7       	brne	.-12     	; 0x3be6 <__pack_f+0x164>
    3bf2:	05 c0       	rjmp	.+10     	; 0x3bfe <__pack_f+0x17c>
    3bf4:	ee 24       	eor	r14, r14
    3bf6:	ff 24       	eor	r15, r15
    3bf8:	87 01       	movw	r16, r14
    3bfa:	ef ef       	ldi	r30, 0xFF	; 255
    3bfc:	f0 e0       	ldi	r31, 0x00	; 0
    3bfe:	6e 2f       	mov	r22, r30
    3c00:	67 95       	ror	r22
    3c02:	66 27       	eor	r22, r22
    3c04:	67 95       	ror	r22
    3c06:	90 2f       	mov	r25, r16
    3c08:	9f 77       	andi	r25, 0x7F	; 127
    3c0a:	d7 94       	ror	r13
    3c0c:	dd 24       	eor	r13, r13
    3c0e:	d7 94       	ror	r13
    3c10:	8e 2f       	mov	r24, r30
    3c12:	86 95       	lsr	r24
    3c14:	49 2f       	mov	r20, r25
    3c16:	46 2b       	or	r20, r22
    3c18:	58 2f       	mov	r21, r24
    3c1a:	5d 29       	or	r21, r13
    3c1c:	b7 01       	movw	r22, r14
    3c1e:	ca 01       	movw	r24, r20
    3c20:	1f 91       	pop	r17
    3c22:	0f 91       	pop	r16
    3c24:	ff 90       	pop	r15
    3c26:	ef 90       	pop	r14
    3c28:	df 90       	pop	r13
    3c2a:	08 95       	ret

00003c2c <__unpack_f>:
    3c2c:	fc 01       	movw	r30, r24
    3c2e:	db 01       	movw	r26, r22
    3c30:	40 81       	ld	r20, Z
    3c32:	51 81       	ldd	r21, Z+1	; 0x01
    3c34:	22 81       	ldd	r18, Z+2	; 0x02
    3c36:	62 2f       	mov	r22, r18
    3c38:	6f 77       	andi	r22, 0x7F	; 127
    3c3a:	70 e0       	ldi	r23, 0x00	; 0
    3c3c:	22 1f       	adc	r18, r18
    3c3e:	22 27       	eor	r18, r18
    3c40:	22 1f       	adc	r18, r18
    3c42:	93 81       	ldd	r25, Z+3	; 0x03
    3c44:	89 2f       	mov	r24, r25
    3c46:	88 0f       	add	r24, r24
    3c48:	82 2b       	or	r24, r18
    3c4a:	28 2f       	mov	r18, r24
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	99 1f       	adc	r25, r25
    3c50:	99 27       	eor	r25, r25
    3c52:	99 1f       	adc	r25, r25
    3c54:	11 96       	adiw	r26, 0x01	; 1
    3c56:	9c 93       	st	X, r25
    3c58:	11 97       	sbiw	r26, 0x01	; 1
    3c5a:	21 15       	cp	r18, r1
    3c5c:	31 05       	cpc	r19, r1
    3c5e:	a9 f5       	brne	.+106    	; 0x3cca <__unpack_f+0x9e>
    3c60:	41 15       	cp	r20, r1
    3c62:	51 05       	cpc	r21, r1
    3c64:	61 05       	cpc	r22, r1
    3c66:	71 05       	cpc	r23, r1
    3c68:	11 f4       	brne	.+4      	; 0x3c6e <__unpack_f+0x42>
    3c6a:	82 e0       	ldi	r24, 0x02	; 2
    3c6c:	37 c0       	rjmp	.+110    	; 0x3cdc <__unpack_f+0xb0>
    3c6e:	82 e8       	ldi	r24, 0x82	; 130
    3c70:	9f ef       	ldi	r25, 0xFF	; 255
    3c72:	13 96       	adiw	r26, 0x03	; 3
    3c74:	9c 93       	st	X, r25
    3c76:	8e 93       	st	-X, r24
    3c78:	12 97       	sbiw	r26, 0x02	; 2
    3c7a:	9a 01       	movw	r18, r20
    3c7c:	ab 01       	movw	r20, r22
    3c7e:	67 e0       	ldi	r22, 0x07	; 7
    3c80:	22 0f       	add	r18, r18
    3c82:	33 1f       	adc	r19, r19
    3c84:	44 1f       	adc	r20, r20
    3c86:	55 1f       	adc	r21, r21
    3c88:	6a 95       	dec	r22
    3c8a:	d1 f7       	brne	.-12     	; 0x3c80 <__unpack_f+0x54>
    3c8c:	83 e0       	ldi	r24, 0x03	; 3
    3c8e:	8c 93       	st	X, r24
    3c90:	0d c0       	rjmp	.+26     	; 0x3cac <__unpack_f+0x80>
    3c92:	22 0f       	add	r18, r18
    3c94:	33 1f       	adc	r19, r19
    3c96:	44 1f       	adc	r20, r20
    3c98:	55 1f       	adc	r21, r21
    3c9a:	12 96       	adiw	r26, 0x02	; 2
    3c9c:	8d 91       	ld	r24, X+
    3c9e:	9c 91       	ld	r25, X
    3ca0:	13 97       	sbiw	r26, 0x03	; 3
    3ca2:	01 97       	sbiw	r24, 0x01	; 1
    3ca4:	13 96       	adiw	r26, 0x03	; 3
    3ca6:	9c 93       	st	X, r25
    3ca8:	8e 93       	st	-X, r24
    3caa:	12 97       	sbiw	r26, 0x02	; 2
    3cac:	20 30       	cpi	r18, 0x00	; 0
    3cae:	80 e0       	ldi	r24, 0x00	; 0
    3cb0:	38 07       	cpc	r19, r24
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	48 07       	cpc	r20, r24
    3cb6:	80 e4       	ldi	r24, 0x40	; 64
    3cb8:	58 07       	cpc	r21, r24
    3cba:	58 f3       	brcs	.-42     	; 0x3c92 <__unpack_f+0x66>
    3cbc:	14 96       	adiw	r26, 0x04	; 4
    3cbe:	2d 93       	st	X+, r18
    3cc0:	3d 93       	st	X+, r19
    3cc2:	4d 93       	st	X+, r20
    3cc4:	5c 93       	st	X, r21
    3cc6:	17 97       	sbiw	r26, 0x07	; 7
    3cc8:	08 95       	ret
    3cca:	2f 3f       	cpi	r18, 0xFF	; 255
    3ccc:	31 05       	cpc	r19, r1
    3cce:	79 f4       	brne	.+30     	; 0x3cee <__unpack_f+0xc2>
    3cd0:	41 15       	cp	r20, r1
    3cd2:	51 05       	cpc	r21, r1
    3cd4:	61 05       	cpc	r22, r1
    3cd6:	71 05       	cpc	r23, r1
    3cd8:	19 f4       	brne	.+6      	; 0x3ce0 <__unpack_f+0xb4>
    3cda:	84 e0       	ldi	r24, 0x04	; 4
    3cdc:	8c 93       	st	X, r24
    3cde:	08 95       	ret
    3ce0:	64 ff       	sbrs	r22, 4
    3ce2:	03 c0       	rjmp	.+6      	; 0x3cea <__unpack_f+0xbe>
    3ce4:	81 e0       	ldi	r24, 0x01	; 1
    3ce6:	8c 93       	st	X, r24
    3ce8:	12 c0       	rjmp	.+36     	; 0x3d0e <__unpack_f+0xe2>
    3cea:	1c 92       	st	X, r1
    3cec:	10 c0       	rjmp	.+32     	; 0x3d0e <__unpack_f+0xe2>
    3cee:	2f 57       	subi	r18, 0x7F	; 127
    3cf0:	30 40       	sbci	r19, 0x00	; 0
    3cf2:	13 96       	adiw	r26, 0x03	; 3
    3cf4:	3c 93       	st	X, r19
    3cf6:	2e 93       	st	-X, r18
    3cf8:	12 97       	sbiw	r26, 0x02	; 2
    3cfa:	83 e0       	ldi	r24, 0x03	; 3
    3cfc:	8c 93       	st	X, r24
    3cfe:	87 e0       	ldi	r24, 0x07	; 7
    3d00:	44 0f       	add	r20, r20
    3d02:	55 1f       	adc	r21, r21
    3d04:	66 1f       	adc	r22, r22
    3d06:	77 1f       	adc	r23, r23
    3d08:	8a 95       	dec	r24
    3d0a:	d1 f7       	brne	.-12     	; 0x3d00 <__unpack_f+0xd4>
    3d0c:	70 64       	ori	r23, 0x40	; 64
    3d0e:	14 96       	adiw	r26, 0x04	; 4
    3d10:	4d 93       	st	X+, r20
    3d12:	5d 93       	st	X+, r21
    3d14:	6d 93       	st	X+, r22
    3d16:	7c 93       	st	X, r23
    3d18:	17 97       	sbiw	r26, 0x07	; 7
    3d1a:	08 95       	ret

00003d1c <__fpcmp_parts_f>:
    3d1c:	1f 93       	push	r17
    3d1e:	dc 01       	movw	r26, r24
    3d20:	fb 01       	movw	r30, r22
    3d22:	9c 91       	ld	r25, X
    3d24:	92 30       	cpi	r25, 0x02	; 2
    3d26:	08 f4       	brcc	.+2      	; 0x3d2a <__fpcmp_parts_f+0xe>
    3d28:	47 c0       	rjmp	.+142    	; 0x3db8 <__fpcmp_parts_f+0x9c>
    3d2a:	80 81       	ld	r24, Z
    3d2c:	82 30       	cpi	r24, 0x02	; 2
    3d2e:	08 f4       	brcc	.+2      	; 0x3d32 <__fpcmp_parts_f+0x16>
    3d30:	43 c0       	rjmp	.+134    	; 0x3db8 <__fpcmp_parts_f+0x9c>
    3d32:	94 30       	cpi	r25, 0x04	; 4
    3d34:	51 f4       	brne	.+20     	; 0x3d4a <__fpcmp_parts_f+0x2e>
    3d36:	11 96       	adiw	r26, 0x01	; 1
    3d38:	1c 91       	ld	r17, X
    3d3a:	84 30       	cpi	r24, 0x04	; 4
    3d3c:	99 f5       	brne	.+102    	; 0x3da4 <__fpcmp_parts_f+0x88>
    3d3e:	81 81       	ldd	r24, Z+1	; 0x01
    3d40:	68 2f       	mov	r22, r24
    3d42:	70 e0       	ldi	r23, 0x00	; 0
    3d44:	61 1b       	sub	r22, r17
    3d46:	71 09       	sbc	r23, r1
    3d48:	3f c0       	rjmp	.+126    	; 0x3dc8 <__fpcmp_parts_f+0xac>
    3d4a:	84 30       	cpi	r24, 0x04	; 4
    3d4c:	21 f0       	breq	.+8      	; 0x3d56 <__fpcmp_parts_f+0x3a>
    3d4e:	92 30       	cpi	r25, 0x02	; 2
    3d50:	31 f4       	brne	.+12     	; 0x3d5e <__fpcmp_parts_f+0x42>
    3d52:	82 30       	cpi	r24, 0x02	; 2
    3d54:	b9 f1       	breq	.+110    	; 0x3dc4 <__fpcmp_parts_f+0xa8>
    3d56:	81 81       	ldd	r24, Z+1	; 0x01
    3d58:	88 23       	and	r24, r24
    3d5a:	89 f1       	breq	.+98     	; 0x3dbe <__fpcmp_parts_f+0xa2>
    3d5c:	2d c0       	rjmp	.+90     	; 0x3db8 <__fpcmp_parts_f+0x9c>
    3d5e:	11 96       	adiw	r26, 0x01	; 1
    3d60:	1c 91       	ld	r17, X
    3d62:	11 97       	sbiw	r26, 0x01	; 1
    3d64:	82 30       	cpi	r24, 0x02	; 2
    3d66:	f1 f0       	breq	.+60     	; 0x3da4 <__fpcmp_parts_f+0x88>
    3d68:	81 81       	ldd	r24, Z+1	; 0x01
    3d6a:	18 17       	cp	r17, r24
    3d6c:	d9 f4       	brne	.+54     	; 0x3da4 <__fpcmp_parts_f+0x88>
    3d6e:	12 96       	adiw	r26, 0x02	; 2
    3d70:	2d 91       	ld	r18, X+
    3d72:	3c 91       	ld	r19, X
    3d74:	13 97       	sbiw	r26, 0x03	; 3
    3d76:	82 81       	ldd	r24, Z+2	; 0x02
    3d78:	93 81       	ldd	r25, Z+3	; 0x03
    3d7a:	82 17       	cp	r24, r18
    3d7c:	93 07       	cpc	r25, r19
    3d7e:	94 f0       	brlt	.+36     	; 0x3da4 <__fpcmp_parts_f+0x88>
    3d80:	28 17       	cp	r18, r24
    3d82:	39 07       	cpc	r19, r25
    3d84:	bc f0       	brlt	.+46     	; 0x3db4 <__fpcmp_parts_f+0x98>
    3d86:	14 96       	adiw	r26, 0x04	; 4
    3d88:	8d 91       	ld	r24, X+
    3d8a:	9d 91       	ld	r25, X+
    3d8c:	0d 90       	ld	r0, X+
    3d8e:	bc 91       	ld	r27, X
    3d90:	a0 2d       	mov	r26, r0
    3d92:	24 81       	ldd	r18, Z+4	; 0x04
    3d94:	35 81       	ldd	r19, Z+5	; 0x05
    3d96:	46 81       	ldd	r20, Z+6	; 0x06
    3d98:	57 81       	ldd	r21, Z+7	; 0x07
    3d9a:	28 17       	cp	r18, r24
    3d9c:	39 07       	cpc	r19, r25
    3d9e:	4a 07       	cpc	r20, r26
    3da0:	5b 07       	cpc	r21, r27
    3da2:	18 f4       	brcc	.+6      	; 0x3daa <__fpcmp_parts_f+0x8e>
    3da4:	11 23       	and	r17, r17
    3da6:	41 f0       	breq	.+16     	; 0x3db8 <__fpcmp_parts_f+0x9c>
    3da8:	0a c0       	rjmp	.+20     	; 0x3dbe <__fpcmp_parts_f+0xa2>
    3daa:	82 17       	cp	r24, r18
    3dac:	93 07       	cpc	r25, r19
    3dae:	a4 07       	cpc	r26, r20
    3db0:	b5 07       	cpc	r27, r21
    3db2:	40 f4       	brcc	.+16     	; 0x3dc4 <__fpcmp_parts_f+0xa8>
    3db4:	11 23       	and	r17, r17
    3db6:	19 f0       	breq	.+6      	; 0x3dbe <__fpcmp_parts_f+0xa2>
    3db8:	61 e0       	ldi	r22, 0x01	; 1
    3dba:	70 e0       	ldi	r23, 0x00	; 0
    3dbc:	05 c0       	rjmp	.+10     	; 0x3dc8 <__fpcmp_parts_f+0xac>
    3dbe:	6f ef       	ldi	r22, 0xFF	; 255
    3dc0:	7f ef       	ldi	r23, 0xFF	; 255
    3dc2:	02 c0       	rjmp	.+4      	; 0x3dc8 <__fpcmp_parts_f+0xac>
    3dc4:	60 e0       	ldi	r22, 0x00	; 0
    3dc6:	70 e0       	ldi	r23, 0x00	; 0
    3dc8:	cb 01       	movw	r24, r22
    3dca:	1f 91       	pop	r17
    3dcc:	08 95       	ret

00003dce <__udivmodhi4>:
    3dce:	aa 1b       	sub	r26, r26
    3dd0:	bb 1b       	sub	r27, r27
    3dd2:	51 e1       	ldi	r21, 0x11	; 17
    3dd4:	07 c0       	rjmp	.+14     	; 0x3de4 <__udivmodhi4_ep>

00003dd6 <__udivmodhi4_loop>:
    3dd6:	aa 1f       	adc	r26, r26
    3dd8:	bb 1f       	adc	r27, r27
    3dda:	a6 17       	cp	r26, r22
    3ddc:	b7 07       	cpc	r27, r23
    3dde:	10 f0       	brcs	.+4      	; 0x3de4 <__udivmodhi4_ep>
    3de0:	a6 1b       	sub	r26, r22
    3de2:	b7 0b       	sbc	r27, r23

00003de4 <__udivmodhi4_ep>:
    3de4:	88 1f       	adc	r24, r24
    3de6:	99 1f       	adc	r25, r25
    3de8:	5a 95       	dec	r21
    3dea:	a9 f7       	brne	.-22     	; 0x3dd6 <__udivmodhi4_loop>
    3dec:	80 95       	com	r24
    3dee:	90 95       	com	r25
    3df0:	bc 01       	movw	r22, r24
    3df2:	cd 01       	movw	r24, r26
    3df4:	08 95       	ret

00003df6 <__prologue_saves__>:
    3df6:	2f 92       	push	r2
    3df8:	3f 92       	push	r3
    3dfa:	4f 92       	push	r4
    3dfc:	5f 92       	push	r5
    3dfe:	6f 92       	push	r6
    3e00:	7f 92       	push	r7
    3e02:	8f 92       	push	r8
    3e04:	9f 92       	push	r9
    3e06:	af 92       	push	r10
    3e08:	bf 92       	push	r11
    3e0a:	cf 92       	push	r12
    3e0c:	df 92       	push	r13
    3e0e:	ef 92       	push	r14
    3e10:	ff 92       	push	r15
    3e12:	0f 93       	push	r16
    3e14:	1f 93       	push	r17
    3e16:	cf 93       	push	r28
    3e18:	df 93       	push	r29
    3e1a:	cd b7       	in	r28, 0x3d	; 61
    3e1c:	de b7       	in	r29, 0x3e	; 62
    3e1e:	ca 1b       	sub	r28, r26
    3e20:	db 0b       	sbc	r29, r27
    3e22:	0f b6       	in	r0, 0x3f	; 63
    3e24:	f8 94       	cli
    3e26:	de bf       	out	0x3e, r29	; 62
    3e28:	0f be       	out	0x3f, r0	; 63
    3e2a:	cd bf       	out	0x3d, r28	; 61
    3e2c:	19 94       	eijmp

00003e2e <__epilogue_restores__>:
    3e2e:	2a 88       	ldd	r2, Y+18	; 0x12
    3e30:	39 88       	ldd	r3, Y+17	; 0x11
    3e32:	48 88       	ldd	r4, Y+16	; 0x10
    3e34:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e36:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e38:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e40:	b9 84       	ldd	r11, Y+9	; 0x09
    3e42:	c8 84       	ldd	r12, Y+8	; 0x08
    3e44:	df 80       	ldd	r13, Y+7	; 0x07
    3e46:	ee 80       	ldd	r14, Y+6	; 0x06
    3e48:	fd 80       	ldd	r15, Y+5	; 0x05
    3e4a:	0c 81       	ldd	r16, Y+4	; 0x04
    3e4c:	1b 81       	ldd	r17, Y+3	; 0x03
    3e4e:	aa 81       	ldd	r26, Y+2	; 0x02
    3e50:	b9 81       	ldd	r27, Y+1	; 0x01
    3e52:	ce 0f       	add	r28, r30
    3e54:	d1 1d       	adc	r29, r1
    3e56:	0f b6       	in	r0, 0x3f	; 63
    3e58:	f8 94       	cli
    3e5a:	de bf       	out	0x3e, r29	; 62
    3e5c:	0f be       	out	0x3f, r0	; 63
    3e5e:	cd bf       	out	0x3d, r28	; 61
    3e60:	ed 01       	movw	r28, r26
    3e62:	08 95       	ret

00003e64 <_exit>:
    3e64:	f8 94       	cli

00003e66 <__stop_program>:
    3e66:	ff cf       	rjmp	.-2      	; 0x3e66 <__stop_program>
